Задача 1. Имена 2
Что нужно сделать
Есть файл people.txt, в котором построчно хранится N имён пользователей. 

Напишите программу, которая берёт количество символов в каждой строке файла и в качестве ответа выводит общую сумму. Если в какой-либо строке меньше трёх символов (не считая литерала \n), то вызывается ошибка и сообщение, в какой именно строке она возникла. Программа при этом не завершается и обрабатывает все имена файла.

Также при желании можно вывести все ошибки в отдельный файл errors.log.

Пример работы программы

Содержимое файла people.txt:

Василий

Николай

Надежда

Никита

Ян

Ольга

Евгения

Кристина



Ответ в консоли:

Ошибка: менее трёх символов в строке 5.

Общее количество символов: 49.

Что оценивается
Результат вычислений корректен.
Формат вывода соответствует примеру.
Основной функционал описан в отдельных функциях.
Переменные и функции имеют значащие имена, а не только a, b, c, d (подробнее об этом в видео 2.3).
Входные и выходные файлы названы так, как указано в задании.


Задача 2. Счастливое число
Что нужно сделать
Напишите программу, которая запрашивает у пользователя число до тех пор, пока сумма запрашиваемых чисел не станет больше либо равна 777. Каждое введённое число при этом дозаписывается в файл out_file.txt. Сделайте так, чтобы перед дозаписью программа с вероятностью 1 к 13 выдавала пользователю случайное исключение и завершалась.

Пример 1

Введите число: 10

Введите число: 500

Введите число: 200

Введите число: 67

Вы успешно выполнили условие для выхода из порочного цикла!

Содержимое файла out_file.txt:

10

500

200

67

Пример 2

Введите число: 10

Введите число: 500

Вас постигла неудача!

Содержимое файла out_file.txt:

10

Что оценивается
Результат вычислений корректен.
Формат вывода соответствует примеру.
Input содержит корректные приглашения для ввода. 
Основной функционал описан в отдельных функциях.
Переменные и функции имеют значащие имена, а не только a, b, c, d (подробнее об этом в видео 2.3).
Выходной файл назван так, как указано в задании.


Задача 3. Регистрация
Что нужно сделать
У вас есть файл с протоколом регистрации пользователей на сайте — registrations.txt. Каждая строка содержит имя, имейл и возраст, разделённые пробелами. Например: Василий test@test.ru 27.

Напишите программу, которая проверяет данные из файла для каждой строки:

Присутствуют все три поля.
Поле «Имя» содержит только буквы.
Поле «Имейл» содержит @ и точку.
Поле «Возраст» представляет число от 10 до 99.
В результате проверки сформируйте два файла:

registrations_good.log для правильных данных; записывать строки как есть;
registrations_bad.log — для ошибочных; записывать строку и вид ошибки.
Для валидации строки данных напишите функцию, которая может выдавать исключения:

НЕ присутствуют все три поля: IndexError.
Поле «Имя» содержит НЕ только буквы: NameError.
Поле «Имейл» НЕ содержит @ и точку: SyntaxError.
Поле «Возраст» НЕ представляет число от 10 до 99: ValueError.
Формат выходных данных

Содержимое файла registrations_bad.log:

Ольга kmrn@gmail.com 123        Поле «Возраст» НЕ представляет число от 10 до 99

Чехова kb@gmail.com 142        Поле «Возраст» НЕ представляет число от 10 до 99

……

Степан ky 59        Поле «Имейл» НЕ содержит @ и точку

……

Содержимое файла registrations_good.log:

Геннадий ttdababmt@gmail.com 69

Ольга ysbxur@gmail.com 20

……

Советы и рекомендации
Помните, что пайтон не всегда будет выполнять операции, которые вы предполагали, например:
if '1' and '2' in строка — по приоритету операций сперва будет выполнено действие с in, а уже потом and. Значит, пайтон не будет в этом случае искать 1 внутри строки. 
Элементы а, б, с: разделять объект (например, список) на несколько переменных очень удобно при помощи множественного присваивания. Но если элементов в списке окажется меньше, чем указанных переменных, то появится ошибка.
При необходимости вы можете объединять исключения в except-блоке. Для этого нужно перечислить классы исключений, которые вы хотите отследить в кортеже: 
except (DrunkError, CarCrashError...) as exc
    As exc в данном случае сработает так же, как и с файлами в конструкции with open(...) as file. То есть пайтон запишет пойманное исключение в переменную с названием exc (название может быть любым).
При переезде зачастую нужно вынести много коробок с вещами из дома. Если для переноса каждой коробки придётся открывать/закрывать двери, то на это уйдет много сил. Их уйдет меньше, если получится открыть двери один раз и закрыть, когда всё будет сделано. То же самое справедливо и для файлов. Старайтесь открывать и закрывать их экономно, например, открыть файлы можно до цикла, а закрыть — после (если нет необходимости переоткрывать файл внутри цикла).
Что оценивается
Результат вычислений корректен.
Формат вывода соответствует примеру.
Основной функционал описан в отдельных функциях.
Переменные и функции имеют значащие имена, а не только a, b, c, d (подробнее об этом в видео 2.3).
Входные и выходные файлы названы так, как указано в задании.


Задача 4. Чат
Что нужно сделать
Реализуйте программу — чат, в котором могут участвовать сразу несколько человек, то есть программу, которая может работать одновременно для нескольких пользователей. При запуске запрашивается имя пользователя. После этого он выбирает одно из действий:

Посмотреть текущий текст чата.
Отправить сообщение (затем вводит сообщение).
Действия запрашиваются бесконечно. 

Примечание: для решения задачи вам достаточно текущих знаний, нужно лишь проявить немного фантазии и хитрости. Не углубляйтесь в дебри работы с сетями, создание GUI-приложений и прочее. Однако, если очень хочется, то останавливать вас никто не будет!

Что оценивается
Результат вычислений корректен.
Основной функционал описан в отдельных функциях.
Переменные и функции имеют значащие имена, а не только a, b, c, d (подробнее об этом в видео 2.3).
Входные и выходные файлы названы так, как указано в задании.
Сообщения об ошибках осмысленные и понятные для пользователя.


Задача 5. Надёжные вычисления
Контекст 
Вы работаете в компании, занимающейся финансовыми вычислениями. Вам необходимо разработать функцию для вычисления квадратного корня числа, которая будет использоваться в анализе финансовых данных и расчёте инвестиционных показателей. Вы понимаете, что передача отрицательного числа или возникновение других ошибок вычисления могут привести к непредсказуемым результатам.

Задача 
Напишите функцию, которая будет:

Вычислять и возвращать квадратный корень полученного числа. 

Обрабатывать исключения для отрицательных чисел и других возможных ошибок.

Советы
При помощи оператора as вы можете сохранить пойманную ошибку в переменную, чтобы затем использовать её для получения дополнительной информации:

except Exception as exc:
    print(exc)
Старайтесь не смешивать конкретные исключения, которые вы ожидаете, со всеми другими (except Exception будет ловить все исключения, которые не были пойманы предыдущими except).



Что оценивается в практической работе
Работа сдана через GitLab.
Структура папок и файлов репозитория соответствует репозиторию python_basic.
Все задачи выполнены в соответствующих папках и файлах main.py.
Описания коммитов осмыслены и понятны: 111, done, «я сделалъ» — неверно, added m15 homework, 14.3 fix: variables naming — верно.
Использованы именованные индексы, а не просто i (подробнее в видео 7.2).
Использованы правильные числа, без дополнительных действий со стороны пользователя, без +1 (подробнее об этом в видео 7.4).
Правильно оформлен input, без пустого приветствия для ввода (подробнее об этом в видео 2.3).
Переменные и функции имеют значащие имена, а не только a, b, c, d (подробнее об этом в видео 2.3).
Присутствуют пробелы после запятых и при бинарных операциях.
Отсутствуют пробелы после имён функций и перед скобками: print (),input () — неверно, print() — верно.
Правильно оформлены блоки if-elif-else, циклы и функции; отступы одинаковы во всех блоках одного уровня.
Основной функционал описывается в отдельной(-ых) функции(-ях).
Все входные и выходные файлы называются так, как указано в заданиях.
Работа с файлами осуществляется с помощью контекстного менеджера with.
Для обработки исключений используются блоки try-except.


Советы и рекомендации
Арифметические операции PEP8 остаются в приоритете. Необходимо вводить and, or.
Руководство по стилю Python PEP8 на английском языке.
Руководство по стилю Python PEP8 на русском языке.
Список встроенных функций.
