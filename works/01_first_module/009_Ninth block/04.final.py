# Задача 1. Конвертация
# Что нужно сделать
# При оплате покупок картой за рубежом банки делают конвертацию через промежуточную валюту. 
# Например, если оплачивать отечественной картой товар в евро, то сначала эта сумма конвертируется в доллары, а потом — в рубли.

# Напишите программу, которая получает на вход стоимость покупки в евро, а затем выводит ответ в рублях. 
# Представим, что мы живём в альтернативной реальности, где 1 евро = 1.25 доллара, а 1 доллар = 60.87 руб.

# Вводим стоимость покупки в евро
euro = float(input("Введите стоимость покупки в евро: "))

# Конвертируем евро в доллары
dollars = euro * 1.25

# Конвертируем доллары в рубли
rubles = dollars * 60.87

# Выводим результат
print(f"Стоимость покупки в рублях: {rubles:.2f} руб.")


# Задача 2. Грубая математика
# Что нужно сделать
# В одном центре математического анализа работал практикант, который писал программы для расчёта функций. Однажды он очень устал и неправильно понял техническое задание, поэтому функции стали грубо рассчитываться. 

# Его программа работает следующим образом: вводится последовательность из N вещественных чисел, при этом положительные числа округляются вверх, а отрицательные — вниз. 

# Напишите программу, которая выводит натуральный логарифм от числа, если оно положительное, и экспоненту в степени числа, если оно отрицательное.

# Пример:

# Введите кол-во чисел: 3

# Введите число: 1.3

# x = 2 log(x) = 0.6931471805599453

# Введите число: -2.1

# x = -3 exp(x) = 0.049787068367863944

# Введите число: -5.9

# x = -6 exp(x) = 0.0024787521766663585



# Задача 3. Аналог Steam
# Что нужно сделать
# Вы пишете программу-инсталлятор для компьютерной игры. Пока инсталлятор скачивает обновление, 
# для пользователя необходимо отображать количество скачанных процентов, чтобы он понимал, успеет ли заварить чай, 
# прежде чем завершится процесс. Каждое обновление игры требует разного количества мегабайт, 
# при этом у разных игроков разная скорость интернет-соединения.

# Напишите программу, принимающую на вход размер файла обновления в мегабайтах и скорость интернет-соединения в мегабайтах в секунду.
#  Для каждой секунды программа должна рассчитывать и выводить на экран процент скачанного объёма до тех пор, 
# пока скачивание не завершится. В конце программа должна показать, сколько секунд заняло скачивание обновления. 
# Обеспечьте контроль ввода.

# Пример:

# Укажите размер файла для скачивания: 123

# Какова скорость вашего соединения: 27

# Прошло 1 сек. Скачано 27 из 123 Мб (22%)

# Прошло 2 сек. Скачано 54 из 123 Мб (44%)

# Прошло 3 сек. Скачано 81 из 123 Мб (66%)

# Прошло 4 сек. Скачано 108 из 123 Мб (88%)

# Прошло 5 сек. Скачано 123 из 123 Мб (100%)

import math

# Ввод данных от пользователя
file_size = float(input("Укажите размер файла для скачивания (Мб): "))
download_speed = float(input("Какова скорость вашего соединения (Мб/с): "))

# Инициализация переменных
downloaded = 0.0
seconds = 0

# Симуляция процесса скачивания
while downloaded < file_size:
    seconds += 1
    downloaded += download_speed
    
    # Ограничиваем скаченный объём, чтобы не превысить размер файла
    if downloaded > file_size:
        downloaded = file_size

    # Рассчёт процента скачанного файла
    percent = (downloaded / file_size) * 100

    # Вывод информации о процессе скачивания
    print(f"Прошло {seconds} сек. Скачано {math.ceil(downloaded)} из {file_size} Мб ({math.ceil(percent)}%)")

# Вывод общего времени скачивания
print(f"Скачивание завершено за {seconds} секунд.")


# Задача 4. Первая цифра
# Что нужно сделать
# Дано положительное действительное число X. Выведите его первую цифру после десятичной точки. 
# При решении этой задачи нельзя пользоваться условной инструкцией, циклом или строками.



# Пример:

# Введите число: 123.456

# Первая цифра после десятичной точки: 4
# Ввод числа от пользователя
x = float(input("Введите число: "))

# Отделяем дробную часть числа
fractional_part = x % 1  # это даст нам только дробную часть числа

# Умножаем дробную часть на 10 и берём целую часть
first_digit = int(fractional_part * 10)

# Вывод результата
print("Первая цифра после десятичной точки:", first_digit)

# Задача 5. Вот это объёмы!
# Что нужно сделать
# Для курсовой работы по физике Андрею нужно сравнить объёмы двух планет: 
# Земли и теоретически возможной для нашей вселенной планеты. Андрей хорошо разбирается в формулах,
#  но плохо считает. Объём Земли ему известен — это 1.08321 * 10 ** 12 км3.

# Объём теоретически возможной планеты ему нужно посчитать. У него есть формула:

# ‌   
# ‌

# В ней V — это объём, π — число пи, а R — радиус планеты.

# Напишите программу, которая получает на вход радиус случайной планеты и выводит на экран,
#  во сколько раз планета Земля меньше или больше теоретически возможной планеты по объёму. 
# Ответ округлите до трёх знаков после запятой.

# Пример 1:

# Введите радиус случайной планеты: 3389.5

# Объём планеты Земля больше в 6.641 раз

# Пример 2:

# Введите радиус теоретически возможной планеты: 7000

# Объём планеты Земля меньше в (1/0.754) = 1.326 раз


import math

# Объём Земли
volume_earth = 1.08321 * 10**12

# Ввод радиуса теоретически возможной планеты
radius_planet = float(input("Введите радиус теоретически возможной планеты (в километрах): "))

# Вычисляем объём теоретической планеты по формуле
volume_planet = (4/3) * math.pi * radius_planet ** 3

# Сравниваем объёмы
if volume_earth > volume_planet:
    ratio = volume_earth / volume_planet
    print(f"Объём планеты Земля больше в {round(ratio, 3)} раз")
else:
    ratio = volume_planet / volume_earth
    print(f"Объём планеты Земля меньше в {round(ratio, 3)} раз")

# Задача 6. Ход конём
# Что нужно сделать
# В рамках разработки шахматного ИИ стоит новая задача: по заданным вещественным координатам коня и точки программа должна определить,
#  может ли конь ходить в эту точку. Используйте как можно меньше конструкций if и логических операторов. Обеспечьте контроль ввода.

# Пример:

# Введите местоположение коня:

# 0.071

# 0.118

# Введите местоположение точки на доске:

# 0.213

# 0.068

# Конь в клетке (0, 1). Точка в клетке (2, 0).

# Да, конь может ходить в эту точку.

# Функция для получения координат клетки на доске (округляем вещественные числа)
def get_board_position(coord):
    return int(coord * 10)

# Ввод местоположения коня
knight_x = float(input("Введите местоположение коня по оси X: "))
knight_y = float(input("Введите местоположение коня по оси Y: "))

# Ввод местоположения целевой точки
target_x = float(input("Введите местоположение точки по оси X: "))
target_y = float(input("Введите местоположение точки по оси Y: "))

# Переводим координаты в шахматные клетки
knight_pos_x = get_board_position(knight_x)
knight_pos_y = get_board_position(knight_y)

target_pos_x = get_board_position(target_x)
target_pos_y = get_board_position(target_y)

# Вывод координат клетки
print(f"Конь в клетке ({knight_pos_x}, {knight_pos_y}). Точка в клетке ({target_pos_x}, {target_pos_y}).")

# Разница по осям
dx = abs(target_pos_x - knight_pos_x)
dy = abs(target_pos_y - knight_pos_y)

# Проверка хода коня: одна из разниц должна быть 2, другая — 1
can_knight_move = (dx == 2 and dy == 1) or (dx == 1 and dy == 2)

# Вывод результата
if can_knight_move:
    print("Да, конь может ходить в эту точку.")
else:
    print("Нет, конь не может ходить в эту точку.")

# Задача 7. За что?
# Что нужно сделать
# Вы встретились со старым другом, который тоже изучает программирование, но в другом учебном заведении. 
# За чашкой кофе он пожаловался, что их сумасбродный препод дал задание написать программу, 
# которая из двух введённых чисел определяет наибольшее, не используя при этом условные операторы,
#  циклы и встроенные функции вроде max/min/sorted. Радуясь, что на вашем курсе такого не требуют, 
# вы всё-таки решаете помочь другу. Напишите для него программу.

# Пример:

# Введите первое число: 10

# Введите второе число: 5

# Наибольшее число: 10

# Ввод двух чисел от пользователя
x = float(input("Введите первое число: "))
y = float(input("Введите второе число: "))

# Вычисление наибольшего числа без условных операторов
max_number = (x + y + abs(x - y)) / 2

# Вывод результата
print("Наибольшее число:", max_number)
