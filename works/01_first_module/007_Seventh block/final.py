print('Задача 1. Я стал новым пиратом!')

# Старому капитану нужно пополнить команду, но на корабль попадут только достойные! Он отобрал десять человек. 
# Те, кто крикнет слово «Карамба», попадут на борт.

# Что нужно сделать

# Пользователь вводит десять слов. Напишите программу, которая определяет, сколько из них совпадают со словом «Карамба».

capt_word = 'Карамба'
count_right = 0

for __ in range(11):
    crew_word = input('Крикните клич: ')
    if crew_word == capt_word:
        count_right += 1
print(f'Попало на кораль человек: {count_right}')
    


print('Задача 2. Кривой мессенджер')

# Существует мессенджер, в котором иногда возникают неполадки при передаче сообщений: в них попадает лишний символ — звёздочка.
#  Пользователям это надоело, поэтому они стали уходить в другие сервисы. Но один из них заинтересовался, 
# на каких позициях обычно появляется звёздочка. Чтобы выяснить это, пользователю необходимо подготовить строки, 
# в которых символ «*» встречается ровно один раз. 

# Что нужно сделать:

# Напишите программу, которая определяет порядковый номер звёздочки в строке.

# Пример:

# Введите текст: «Пр*ивет как дела».
# Символ «*» стоит на позиции 3.

text = input('Введите текст: ')
symbol_place = 0
for symbol in text:
    symbol_place += 1
    if symbol == '*':
     break
print(f'Символ "*" стоит на позиции {symbol_place}')


print('Задача 3. Театр')

# В городе планируют построить театр под открытым небом, но для начала нужно оценить, сколько сделать рядов, 
# сидений в них и каким должно быть расстояние между рядами.

# Что нужно сделать

# Напишите программу, которая получает на вход количество рядов, сидений и свободных метров между рядами, 
# а затем выводит примерный макет театра на экран.


# Сцена
# Введите кол-во рядов: 5
# Введите кол-во сидений ряду: 7
# Введите кол-во метров между рядами: 3
#
# ======= *** =======
# ======= *** =======
# ======= *** =======
# ======= *** =======
# ======= *** =======

row_count = int(input('Введите количество рядов: '))
seats_count = int(input('Введите количество сидений: '))
meter_between = int(input('Введите количество свободных метров между рядами: '))

between = '*' * meter_between

for seats in range (row_count):
    print('=' * seats_count, between, '=' * seats_count)

print('Задача 4. Марсоход 2')

# К роботу Валли отправили «коллегу» Билли. Это его первая высадка на Марс, поэтому его тестируют в прямоугольном помещении размером 15 × 20 м.
#  Марсоход высаживается в центре комнаты (в точке 8, 10), затем управление им передаётся оператору, то есть пользователю вашей программы. 

# Программа спрашивает, в какую сторону оператор хочет направить робота: север (клавиша W), юг (клавиша S), запад (клавиша A) или восток (клавиша D)
# Оператор делает выбор, марсоход перемещается в эту сторону на один метр, а программа сообщает новую позицию робота. Если марсоход упёрся в стену, он не должен пытаться переместиться в сторону стены — в этом случае его позиция не меняется. 

# Что нужно сделать
# Создайте программу для управления роботом Билли.

# Пример:
# 
# [Программа]: Марсоход находится на позиции 6, 19, введите команду:
# [Оператор]: A
# [Программа]: Марсоход находится на позиции 5, 19, введите команду:
# [Оператор]: W
# [Программа]: Марсоход находится на позиции 5, 20, введите команду:
# [Оператор]: W
# [Программа]: Марсоход находится на позиции 5, 20, введите команду:

north_direction = 'W'
south_direction = 'S'
west_direction = 'A'
east_direction = 'D'
position_on_horizontal = 8
position_on_vertical = 10

while True:
    command = input(f'Марсоход находится на позиции {position_on_horizontal}, {position_on_vertical}, введите команду: ') 
    if command == 'выход':
        break  
    if command == north_direction and position_on_vertical < 20:
        position_on_vertical += 1
    elif command == south_direction and position_on_vertical > 0:
        position_on_vertical -= 1
    elif command == west_direction and position_on_horizontal > 0:
        position_on_horizontal -= 1
    elif command == east_direction and position_on_horizontal < 15:
        position_on_horizontal += 1
   

print('Задача 5. Великий и могучий')

# Паоло изучает русский язык: занимается по учебникам, читает книги, слушает музыку. Ему особенно понравилась книга «Преступление и наказание». 
# Паоло решил найти самое длинное слово в этой книге, чтобы сравнить его с аналогом на своём языке.

# Что нужно сделать

# Напишите программу, которая получает на вход текст и находит длину самого длинного слова в нём. Слова в тексте разделяются одним пробелом.

# Пример:

# Введите текст: Меня зовут Пётр.
# Самое длинное слово, букв: 5.

# Введите текст: Меня зовут Василий
# Самое длинное слово, 7 букв

text_length = input('Введите текст: ')
max_length = 0  # Максимальная длина слова
count = 0  # Длина текущего слова

# Добавляем разделители для проверки
separators = ' ,.!?'

for symbol in text_length:
    if symbol in separators:  # Если символ - разделитель
        if count > max_length:  # Проверяем, больше ли текущая длина максимальной
            max_length = count
        count = 0  # Сбрасываем длину текущего слова
    else:
        count += 1  # Увеличиваем длину текущего слова

# Проверяем длину последнего слова, если оно не заканчивается на разделитель
if count > max_length:
    max_length = count

print(f'Самое длинное слово из {max_length} букв.')


print('Задача 6. Коровы')

# Для коров есть 10 стойл. В каждом из них условия для животных разные, поэтому и молока они дают по-разному. 
# В первом стойле производят 2 литра в день, во втором — 4, в третьем — 6, далее — 8, 10, 12, 14, 16, 18 и 20. 
# При этом коровы находятся не во всех стойлах. Свободные и занятые обозначаются строкой из букв a и b, где a — свободное стойло, b — занятое.

# Что нужно сделать

# Напишите программу для подсчёта получаемого молока в коровнике. Важно учитывать следующее взаимодействие: 
# пользователь вводит строку из десяти символов a и b. Необходимо определить, сколько в итоге будет произведено молока за день.


string = input('Введите строку из 10 символов a или b: ')
count = 0
milk_per_day = 0

for symbol in string:
    count += 1
    if symbol == 'b':
        milk_per_day += count * 2 
print(f'Молока произведено: {milk_per_day}')

print('Задача 7. Метод бутерброда')

# В секретном агентстве Super-Secret-no решили использовать «метод бутерброда» для шифрования переписки своих сотрудников. 
# Сначала буквы слова нумеруются в таком порядке: первая буква получает номер 1, последняя буква — номер 2, вторая — номер 3, 
# предпоследняя — номер 4, потом третья… и так для всех букв (см. рисунок). Затем все буквы записываются в шифр в порядке своих номеров.

# Например, слово «sandwich» зашифруется в «shacnidw».
# К сожалению, программист «Super-Secret-no», написал только программу шифрования и уволился.
# И теперь агенты не могут понять, что же они написали друг другу. Помогите им.

# Пример:
# Введите зашифрованное сообщение: shacnidw
# Расшифрованное сообщение: sandwich
#          1   3   5   7   8   6   4   2
# Слово: | s | a | n | d | w | i | c | h |
# Шифр:  | s | h | a | c | n | i | d | w |

word = input('Введите зашифрованое слово: ')
sum_1, sum_2 = ' ', ' '
count = 0
for letter in word:
 count += 1
 if (count % 2 == 1):
  sum_1 += letter
 else:
  sum_2 = letter + sum_2
print('Расшифрованое слово:', sum_1 + sum_2)

print('Задача 8. Древний палиндром')

# Контекст:
# Вы молодой археолог, который исследует древний свиток с таинственным посланием.
# Согласно легенде, если вы сможете прочитать палиндром из этого послания, то раскроете его секреты.
# Однако свиток весьма постарел, и некоторые буквы стерлись.
# Вам нужно разработать программу, которая поможет определить, является ли фрагмент послания, введенный пользователем, палиндромом.
# Если ваша программа сможет справиться с заданием, то вы сможете приблизиться к разгадке древней тайны.
#
# Задача: 
# Напишите программу, которая поможет определить, является ли введенная строка палиндромом.
# Если введенная строка является палиндромом, выведите сообщение "Да, это палиндром!".
# В противном случае выведите сообщение "Нет, это не палиндром!".
#
# Советы:
# -- Для выполнения задачи используйте цикл for и итерацию по символам строки.
# -- Возможно вам понадобиться развернуть строку, чтобы это сделать вам достаточно уметь проходить по строке циклом и использовать конкатенацию. 
# -- Чтобы сложить символы строки в обратном порядке - подумайте над переменой мест слагаемых. 
# Будут ли результаты одинаковы если мы все символы будем добавлять в конец строки (строка = строка + символ) 
# и если мы будем их добавлять в начало строки (строка = символ + строка)?

string = input('Введите предполагаемый палиндром: ')
reversed_string = ''  # Для перевёрнутой строки

# Переворачиваем строку вручную с помощью цикла
for symbol in string:
    reversed_string = symbol + reversed_string

# Сравниваем исходную строку с перевёрнутой
if string == reversed_string:
    print('Да, это палиндром!')
else:
    print('Нет, это не палиндром!')





