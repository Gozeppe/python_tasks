# üß® –ó–∞–¥–∞–Ω–∏–µ 1: –ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞
# –°–æ–∑–¥–∞–π –¥–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ x = 7 –∏ y = 3, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–µ–¥–∏:

# –∏—Ö —Å—É–º–º—É

# —Ä–∞–∑–Ω–æ—Å—Ç—å

# –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ

# —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–Ω–∏—è

# –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è

# —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è

# –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å

x = 7
y = 3

summ = x + y
difference = x - y  
multiply = x * y
divide = x / y
remainder = x % y  
floor_divide = x // y  
power = x ** y  

# üß® –ó–∞–¥–∞–Ω–∏–µ 2: –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
# –°–æ–∑–¥–∞–π –¥–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ a = True, b = False. –í—ã–≤–µ–¥–∏:

# a and b

# a or b

# not a

a = True
b = False

print(f'{a} and {b} = {a and b}')
print(f'{a} or {b} = {a or b}')
print(f'not {a} = {not a}')

# üß® –ó–∞–¥–∞–Ω–∏–µ 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
# –ü—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–≤–∞ —á–∏—Å–ª–∞. –°—Ä–∞–≤–Ω–∏ –∏—Ö:

# –±–æ–ª—å—à–µ –ª–∏ –ø–µ—Ä–≤–æ–µ –≤—Ç–æ—Ä–æ–≥–æ

# —Ä–∞–≤–Ω–æ –ª–∏

# –º–µ–Ω—å—à–µ –ª–∏

# –Ω–µ —Ä–∞–≤–Ω–æ –ª–∏

# –í—ã–≤–æ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ:

# –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ: True/False

first_digit = int(input('–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: '))
second_digit = int(input('–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: '))

print("–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ:", first_digit > second_digit)
print("–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ —Ä–∞–≤–Ω–æ –≤—Ç–æ—Ä–æ–º—É:", first_digit == second_digit)
print("–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ:", first_digit < second_digit)
print("–ß–∏—Å–ª–∞ –Ω–µ —Ä–∞–≤–Ω—ã:", first_digit != second_digit)

# üß® –ó–∞–¥–∞–Ω–∏–µ 4: –°–ª–æ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
# –°–æ–∑–¥–∞–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é num = 10. –í—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π:

# (num + 5) * 2

# num ** 2 - 10

# num % 3 + num // 2

num = 10

print((num + 5) * 2)
print(num ** 2 - 10)
print(num % 3 + num // 2)