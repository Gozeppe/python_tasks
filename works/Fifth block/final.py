#Задача 1. Должники
#Что нужно сделать
#В базе банка хранятся данные и должников, и законопослушных граждан. 
#Каждому человеку система присваивает свой номер. У нас есть случайная выборка из десяти номеров. 
#Правда, иногда база глючит и выдаёт номер с отрицательным значением.
#А ещё по статистике, которую собрал наш «МирПрогБанк», каждый второй пользователь брал кредит и не выплатил его вовремя, 
#то есть является должником.

#Напишите программу, которая при вводе десяти чисел определяет, сколько из них являются одновременно чётными и положительными.

positive_even_count = 0  # Счётчик для положительных чётных чисел

for _ in range(10):  # Цикл выполняется 10 раз
    citizen = int(input('Введите номер гражданина: '))
    
    if citizen % 2 == 0 and citizen > 0:  # Проверяем, что число чётное и положительное
        positive_even_count += 1  # Увеличиваем счётчик, если условие выполняется

print('Количество положительных чётных чисел:', positive_even_count)

#Что оценивается
#Задание считается успешно выполненным, если:

#результат вывода соответствует условию;
#input содержит корректное приглашение для ввода;
#переменные имеют значащие имена, не только a, b, c, d;
#задача решена с помощью конструкции for.

#Задача 2. Посчитай чужую зарплату...
#Что нужно сделать

#Бухгалтер устала постоянно считать вручную среднегодовую зарплату сотрудников компании и, чтобы облегчить себе жизнь, обратилась к программисту.

#Напишите программу, которая принимает от пользователя зарплату сотрудника за каждый из 12 месяцев и выводит на экран среднюю зарплату за год.

money = 0

for _ in range (1, 13):
   money_month = int(input('Введите зарплату за месяц: '))
   money += money_month
   
avg_money = money / 12
print(f'Количество денег, в среднем {avg_money}')

#Что оценивается
#Задание считается успешно выполненным, если:

#результат вывода соответствует условию;
#input содержит корректное приглашение для ввода;
#вывод содержит описание результата (не выведено одно число без описания);
#переменные имеют значащие имена, не только a, b, c, d;
#задача решена с помощью конструкции for.

#Задача 3. Факториал
#Что нужно сделать
#Мы всё ближе и ближе подбираемся к серьёзной математике. 
# Одна из классических задач — задача на нахождение факториала числа. И в будущем мы с ней ещё встретимся.

#Дано натуральное число n. Напишите программу, которая находит n! (n-факториал).

#Запись n! означает следующее:

#n! = 1 * 2 * 3 * 4 * 5 * … * n

#Пример:

#Введите число: 5

#Факториал числа 5 равен 120

fac_num = int(input('Введите число: '))
new_num = 0
for _ in (1, fac_num):
    new_num *= fac_num

print(f'Факториал числа {fac_num} равен {new_num}')                           



#Что оценивается
#Задание считается успешно выполненным, если:

#результат вывода соответствует условию;
#input содержит корректное приглашение для ввода;
#формат вывода соответствует примеру;
#вывод содержит описание, не только результат в виде числа;
#для решения используется цикл for, а не встроенные функции или рекурсия;
#переменные имеют значащие имена, не только a, b, c, d.

#Задача 4. Успеваемость в классе
#Что нужно сделать
#В классе N человек. Каждый из них получил за урок по информатике оценку: 3, 4 или 5, двоек сегодня не было. 
# Напишите программу, которая получает список оценок — N чисел — и выводит на экран сообщение о том, 
# кого сегодня больше: отличников, хорошистов или троечников.

#Замечание: можно предположить, что количество отличников, хорошистов, троечников различно.
five_grade = 0
four_grade = 0
three_grade = 0

class_people = int(input('Введите количество учеников в классе: '))

for _ in range(class_people):
    grade = int(input('Введите оценку ученика: '))

    if grade == 5:
        five_grade += 1
    elif grade == 4:
        four_grade += 1
    elif grade == 3:
        three_grade += 1
    else:
        print('Вы ввели неверное число')


if five_grade > four_grade and five_grade > three_grade:
    print('Сегодня больше отличников')
elif four_grade > five_grade and four_grade > three_grade:
    print('Сегодня больше хорошистов')
elif three_grade > five_grade and three_grade > four_grade:
    print('Сегодня больше троечников')
else:
    print('Сегодня одинаковое количество разных оценок') 

#Задача 5. Отрезок
#Что нужно сделать
#Напишите программу, которая считывает с клавиатуры два числа:
#  a и b, — считает и выводит в консоль среднее арифметическое всех чисел из отрезка [a; b], кратных числу 3.

a = int(input('Введите число A: '))
b = int(input('Введите число B: '))
sum_of_numbers = 0  # Переменная для суммы чисел, кратных 3
count = 0  # Переменная для подсчёта количества таких чисел

for num in range(a, b + 1):  # Включаем b в диапазон
    if num % 3 == 0:  # Проверяем кратность числа 3
        sum_of_numbers += num
        count += 1

if count > 0:  # Проверка, чтобы избежать деления на 0
    avg = sum_of_numbers / count
    print(f'Среднее арифметическое чисел, кратных 3, на отрезке [{a}; {b}] равно {avg:.2f}')
else:
    print(f'На отрезке [{a}; {b}] нет чисел, кратных 3')

#Задача 6. Замечательные числа
#Что нужно сделать
#Напишите программу, которая находит и выводит все двузначные числа, равные утроенному произведению своих цифр. К таким относятся, например, 15 и 24.

#Что оценивается
#Задание считается успешно выполненным, если:

#результат вывода соответствует условию;
#допускается вывод без описания, достаточно вывести числа;
#переменные имеют значащие имена, не только a, b, c, d.

#Задача 7. Пропавшая карточка
#Что нужно сделать
#Для настольной игры используются карточки с номерами от 1 до N. Одна карточка потерялась. Напишите программу, которая поможет найти потерянную карточку, если номера оставшихся известны. Найдите её, зная номера оставшихся карточек.

#Введите число карточек — N.

#Затем введите N − 1 номера оставшихся карточек. Они могут быть введены в любом порядке.

#Пример:

#Введите количество карточек: 5
#Введите номер оставшейся карточки: 1
#Введите номер оставшейся карточки: 4
#Введите номер оставшейся карточки: 5
#Введите номер оставшейся карточки: 3
#Номер пропавшей карточки: 2