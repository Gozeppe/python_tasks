#Что нужно сделать
#Задача 1. Неправильный таймер

#Петя писал таймер для телефона, но у него что-то пошло не так.

count = 10
while count <= 10:
    if count == 0:
        print('Время вышло!')
        break
    else:
     count -= 1
     print(count)

        
#Скопируйте программу в редактор, исправьте ошибки и убедитесь, что на экран выводятся числа с 10 до 0 и сообщение «Время вышло!».

#Задача 2. Тестируем приложение

#Напишите программу, которая имитирует работу с приложением: программа спрашивает у пользователя «Продолжаем работать?
#  1/0: » до тех пор, пока пользователь не введёт 0, — после этого выводится сообщение: «Приложение закрывается…». 
# В конце программы также выводится сообщение: «Работа завершена». Для создания бесконечного цикла используйте while True. 


continue_working = int(input('Continue working 1/0: '))
while True:
  active =  int(input('Countinue: 1/0? '))
  if active == 0:
     print('Programm closing')
     break
print('Working done')




#Задача 3. Вирус

#Дима написал программу-вирус специально для того, чтобы проучить своего друга-должника, который никак не хочет возвращать скейтборд.
#  Программа не даёт работать за компьютером и постоянно выводит на экран сообщение “Компьютер заблокирован. 
# Вернёшь скейт - скажу код разблокировки!”. Как только вводится правильный код: вирус удаляется. 
# Напишите такую же программу, которую написал Дима. Код не может начинаться с цифры 0.

#Пример:

#Компьютер заблокирован. Вернёшь скейт - скажу код разблокировки!
#Введите код: 1005
#Компьютер заблокирован. Вернёшь скейт - скажу код разблокировки!
#Введите код: 7777
#Компьютер заблокирован. Вернёшь скейт - скажу код разблокировки!
#Введите код: 550
#Код верный, завершаю работу...

unblock_code = int(input("Введите код разблокировки: "))

while True:
    if unblock_code != 552:
        print("Компьютер заблокирован. Вернёшь скейт - скажу код разблокировки!")
        unblock_code = int(input("Введите код разблокировки: "))
    else:
        print("Код верный, завершаю работу...")
        break  