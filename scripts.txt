#Программа для расчёта штрафа в Германии

import random

print('Система подсчёта штрафов')
print()

car_speed = random.randint(50, 150)
print(f'Скорость автомобиля: {car_speed} км/ч')
print()

fine_for_20_to_40 = 500

fine_for_40_to_60 = 1000

fine_for_60_to_80 = 2000

fine_for_80_and_over = 5000

country_speed = 90
town_speed = 60
is_Town = random_boolean = random.choice([True, False])
if is_Town == True:
  value = car_speed - town_speed
  if value < 20:
    print('Скорость в рамках допустимой в городе')
    print()
  elif value > 0:
    print(f'Скорость больше допустимой на {value} км/ч')
    print()
    print('В городе допустимая скорость равна 60 км/ч')
  print()
elif is_Town == False:
  value = car_speed - country_speed
  if value < 20:
    print('Скорость в рамках допустимой за городом')
    print()
  elif value > 0:
    print(f'Скорость больше допустимой на {value} км/ч')
    print()
    print('За городом допустимая скорость равна 90 км/ч')
    print()
  
#def fine_value(value):
#  if 20 <= value < 40:
#    return fine_for_20_to_40
#  elif 40 <= value < 60:
#    return fine_for_40_to_60
#  elif 60 <= value < 80:
#    return fine_for_60_to_80
#  elif value >= 80:
#    return fine_for_80_and_over
#  else:
#    return('Нет штрафа')
#print(f'Штраф: {fine_value(value)}')

if value < 20:
  print('Скорость не превышена или превышена незначительно')
elif value >= 20 and value < 40:
  print('Штраф - ' + str(fine_for_20_to_40))
elif value >= 40 and value < 60:
  print('Штраф - ' + str (fine_for_40_to_60))
elif value >= 60 and value < 80:
  print('Штраф - ' + str(fine_for_60_to_80))
elif value >= 80:
  print ('Штраф - ' +str(fine_for_80_and_over))



****************************************
#Задача 1. Моя первая переменная

#Создайте переменную, присвойте ей текст «Моя первая переменная!» и выведите значение переменной на экран. Для этого:

#1. Назовите переменную, используйте только буквы латинского алфавита. Пример имени: first.

#2. После этого сделайте присваивание (знак = ).

#3. Вставьте нужный текст.

#4. Вставьте команду вывода переменной на экран в следующей #строке программы. Кавычки здесь не нужны.

#5. Запустите программу и убедитесь, что в консоль выводится сообщение: «Моя первая переменная!»


first_perem = 'моя первая переменная!'
print(first_perem)


#Задача 2. Две переменные 

#Продолжая предыдущую программу, создайте ещё одну переменную с другим именем (например second), присвойте ей значение «И не последняя!» и выведете её на экран. В результате работы программы в консоли должно отобразиться две строки: «Моя перваяпеременная!» и «И не последняя!»

print('')
second_perem = 'И не последняя!'
print(second_perem)
print('')

#3. Скопируйте программу в редактор и исправьте ошибки в названиях и выводе переменных. При необходимости переставляйте строчки местами.

#Проверьте правильность работы программы.


#my color@ = 'Зелёный'
#*sport& = 'Бег'
#print('Меня зовут')
#print(name)
#name = 'Иван'
#print('Мой любимый цвет:')
#print(my_color)
#print('Мой любимый вид спорта:')
#print(спорт)


my_name = 'Иван'
my_color = 'Зелёный'
my_sport = 'Бег'
print('Меня зовут: ' + my_name)
print('Мой любимый цвет: ' + my_color)
print('Мой любимый вид спорта: ' + my_sport)

****************************************
#Задача 1. Приветствие пользователя

#Повторите действия из урока и создайте программу, которая запрашивает у пользователя имя и затем выводит для него приветствие. Для этого:

#Создайте переменную и присвойте ей команду input(). Внутри скобок команды напишите приглашение, например: «Введите имя».
#В следующих двух строках напишите вывод приветствия и переменной на экран.
#Запустите программу, введите в консоль имя и нажмите Enter. Убедитесь, что программа работает верно.

name = input("Введите имя - ")
#print('Приветствую, ' + name)

#Задача 2. Приветствие для двух пользователей

#Продолжая предыдущую программу, запросите у пользователя второе имя и выведите второе приветствие на экран. Пример результата программы:

surname = input("Введите второе имя - ")
print('Приветствую, ' + name + ' ' + surname)

#Задача 3. Неверная программа

#Ниже приведена программа, которая должна запрашивать фамилию пользователя и выводить её на экран. Но её написали неправильно. Скопируйте программу в редактор и исправьте все ошибки. Убедитесь, что программа работает.

#sur name = inpu('Введите фамилию: ')
#print('Ваша фамилия - ')
#print('sur name')

sur_name = input("Введите фамилию: ")
print("Ваша фамилия - " + sur_name)

****************************************
#Задача 1. Вывод в одну строку

#Напишите программу, которая запрашивает у пользователя его имя и выводит для него приветствие в одну строку, как в примере ниже. Не забывайте ставить запятую при перечислении объектов внутри print!

insert_name = input("Введите имя: ")
#print("Приветствую, " + insert_name)


#Задача 2. Конкатенация

#Что нужно сделать

#Используя программу из предыдущего задания, добавьте вывод восклицательного знака в конец приветственной строки. Проверьте программу.
#Затем попробуйте использовать конкатенацию для вывода строки. Для этого в команде print уберите запятые между объектами и вместо них поставьте знак «+». Снова проверьте программу. Результат должен быть такой же.


print("Приветствую, ", insert_name, "!")
print("Приветствую, " + insert_name + "!")


#Задача 3. Склейка

#Что нужно сделать

#Напишите программу, которая запрашивает на вход два слова, записывает их в разные переменные, затем склеивает их и выводит на экран полученную строку.

first_word = input("Введите первое слово: ")
second_word = input("Введите второе слово: ")
print(first_word + "" + second_word)

#Результат будет такой:

#Введите первое слово: Всем

#Введите второе слово: привет

#Всем привет


****************************************
print('Задача 1. Пропавшая переменная')
# Что нужно сделать
# Найдите в программе необъявленную переменную и объявите её, присвоив ей значение ‘Кот’.

client = 'Петя'
pet = 'Кот'
print(client)
print(' и ')
print(pet)

print('')
print('Задача 2. Цвета')

# Что нужно сделать
# Исправьте программу так, чтобы в результате её выполнения
# на экран в одну строку выводился текст: Red Blue Green RedGreenBlue Blue GreenBlue.
r = 'Red'
g = 'Green'
b =  'Blue'
print(r, b, g, r + g + b, b, g + b)

print('')
print('Задача 3. Животные')

# Что нужно сделать
# Создайте две переменные с именами «Первое животное» и «Второе животное» на английском языке. 
# Запишите в первую переменную слово «Заяц», а во вторую — «Черепаха». 
# Используя эти переменные, выведите на экран текст «Заяц спит, Черепаха идёт» в одну строку.

first_animal = 'Заяц'
second_animal = 'Черепаха'

print(first_animal + " спит, " + second_animal + " идёт")


print('')
print('Задача 4. Вход в систему')

# Что нужно сделать
# Исправьте программу и допишите необходимые команды для получения нужного результата.
# Будьте внимательны при исправлении и помните о правилах названия переменных.

# Программа:

first_name = input('Введите имя пользователя: ')
greeting = 'Привет'

intro = "К сожалению, у Вас нет доступа к системе."
info = "Пожалуйста, обратитесь к системному администратору."

print(greeting, first_name)
print(intro + '\n' + info)
# Ожидаемый результат: 

# Введите имя пользователя: Роман
# Привет, Роман
# К сожалению, у Вас нет доступа к системе.
# Пожалуйста, обратитесь к системному администратору.


print('')
print('Задача 5. Полёт')

# Что нужно сделать
# Напишите программу для сервиса заказа билетов,
# которая запрашивает у пользователя город вылета и город прилёта. 
# Затем выведите их в одну строку через тире. 
# Обратите внимание на свои переменные: названия должны отражать содержимое.

flight_from = input('Введите город отправления: ')
flight_to = input('Введите город прибытия: ')
print(flight_from + " - " + flight_to)


print('')
print('Задача 6. Обмен значений двух переменных')

# Что нужно сделать
# Дана программа, которая запрашивает у пользователя два слова, а затем выводит их на экран два раза.

a = input('Введите первое слово: ')
b = input('Введите второе слово: ')
print(a,b)
a, b = b, a
print(a,b)


# Задача: поменять значения переменных a и b местами.
# Изменять, удалять, менять местами 6-ю, 7-ю, 8-ю и последнюю строчки нельзя.
# Но в 9-ю строку можно вставлять сколько угодно строк кода, не трогая последний принт.
# Пример результата работы программы: 

# Введите первое слово: Сок
# Введите второе слово: Вода
# Сок Вода
# Вода Сок
****************************************
print('Задача 1. Выражения')

#Третьекласснику Вове задали домашнее задание по математике, и папа-программист сказал, что вечером обязательно проверит его. Но Вове лень считать, поэтому он пишет программы на Python.

#Посчитайте и последовательно выведите на экран значения математических выражений, по одному в каждой строчке, чтобы Вове не досталось от папы:

#6 умножить на 39;
#3 в степени 5;
#Минус 8 разделить на минус 4;
#10 разделить на 2 и прибавить 6.

multiply = 6 * 39
to_the_power_of = 3**5
divide = -8 / -4
do_math = 10 / 2 + 6
print(" Умножение: ", multiply, '\n', "Возведение в степень: ",
      to_the_power_of, '\n', "Деление: ", divide, '\n', "Результат примера: ",
      do_math)
print('')


print('Задача 2. Эти замечательные астрологи')

#Венера, преподаватель Максима по астрологии и нумерологии, не верит, что математические операции работают так, как описывает математика. Напишите для Максима программу, которая демонстрировала бы работу основных операций, чтобы убедить Венеру.

#Создайте три переменных, каждой из них присвойте любые числа, например 5, 4, 2 (кстати, не забывайте про множественное присваивание).
#Затем выведите результат сложения, вычитания, умножения, деления и возведения в степень всех трёх переменных в отдельных строчках. Результат с 5, 4 и 2 должен выглядеть так:

first_number, second_number, third_number = 5, 4, 2

plus = first_number + second_number + third_number
minus = first_number - second_number - third_number
multiply_astro = first_number * second_number * third_number
divide_astro = first_number / second_number / third_number
to_the_power_of_astro = first_number**second_number**third_number

print(" Сложение: ", plus)
print(" Вычитание: ", minus)
print(" Умножение: ", multiply_astro)
print(" Деление: ", divide_astro)
print(" Возведение в степень: ", to_the_power_of_astro)
print('')


print('Задача 3. Деление на ноль')

#Проверим школьное правило «На ноль делить нельзя». Напишите программу, которая выводит результат деления числа (например 65) на ноль. Какой будет ответ?

divide_by_zero = 65/0
print(divide_by_zero)
#Тизер к заданию

#Правильный ответ: деление на ноль в питоне порождает ошибку ZeroDivisionError, это означает, что на ноль делить нельзя. Однако в будущем мы узнаем, что делить на ноль всё-таки можно — и даже получать бесконечность, но это уже совсем другая история :)

****************************************
print('Задача 1. Фруктовый сад')

#Маша проводит исследования корреляции размеров фруктов в зависимости от их расположения на участке. Она взяла яблоко, грушу и персик диаметрами 8, 5 и 3 сантиметра соответственно и вычислила коэффициент зависимости по своей формуле.

#Реализуйте программу, которая вычисляет значение выражения


#где a, b и c — переменные, в которых лежат числа 8, 5 и 3 соответственно. Выведите результат на экран.

a = 8
b = 5
c = 3

apple = a
pear = b
peach = c

do_math = ((a / (b + c)) - a) / c
print(do_math)

print('Задача 2. Автобус или метро?')

#Для расчёта эффективности потраченных денег на метро и автобус Никита использует следующую формулу:


#В общем, не спрашивайте. Он написал программу для подсчёта формулы, но она почему-то не работает.

bus = 5
metro = 3
result = (6 + (10 - bus)** 2) / (metro + 1) + 132 / (2 + bus)
print(result)
#Скопируйте программу в редактор, исправьте выражение и убедитесь в правильности её работы. Правильный ответ: 26.607142857142858



print('Задача 3. Сложные степени')

#Говорят, если в 22:31:49 посчитать на Python значение определённого выражения, то спустя год станешь очень хорошим программистом. Давайте проверим это утверждение.



#1. Создайте переменную и запишите в неё следующее математическое выражение:


#2. Затем выведите значение переменной на экран. Ответ должен быть равен 378652.3611111111.

#3. Будьте внимательны со скобками, особенно с делением числителя на знаменатель.

do_math_long = (-3 + (8**2 - 12) * 4**(3**2)) / (2 * 18)
print(do_math_long)
#Подсказка

#Приоритет операций в python не отличается от приоритета, принятого в алгебре.

#Операции выполняются в следующем порядке

#Операции в скобках (a + b)

#Операции возведения в степень a**b

#Операции умножения и деления a * b

#Операции сложения и вычитания a + b - c

#Операции унарных плюсов и минусов -4

#Приоритеты всех операций вы сможете найти по ссылке Приоритет операций

#При равенстве приоритетов операции выполняются слева направо.



#При вычислении выражений с числителем и знаменателем, записанных в виде дробей будьте внимательны к тому, что весь числитель нужно разделить на весь знаменатель.

#Для этого можно отдельно вычислить числитель и отдельно знаменатель, а потом разделить числитель на знаменатель, либо поместить числитель и знаменатель в скобки.
****************************************
print('Задача 1. Координаты точки')

#Лена пишет программу для построения графиков функций, чтобы можно было анализировать статистику посещений её сайта. Перед тем как построить график функции, Лена сначала расставляет на нём точки. У каждой точки есть координаты: X и Y. Лене также нужно найти сумму этих координат, чтобы убедиться в их правильном расположении.

#Реализуйте программу, которую мы разбирали в уроке: она запрашивает у пользователя два числа и выводит их сумму на экран.
#Используйте функцию int() для преобразования входящих данных из текста в число. Для этого внутри скобок функции int вставьте команду input. Результат должен быть таким:

first_num = int(input("Введите первое число: "))
second_num = int(input("Введите второе число: "))

sum = first_num + second_num

print('Сумма :', sum)
print('')


print('Задача 2. Отрезок')

#Доверчивой Лене необходимо построить отрезок, соединяющий две точки на графике, и найти его длину по довольно необычной формуле, которую она нашла в интернете. Для нахождения длины отрезка нужны координаты как первой, так и второй точки.

#Продолжая программу прошлой задачи, добавьте ввод третьего и четвёртого числа, вычислите значение выражения и выведите результат на экран.

#Выражение:

a_2 = int(input("Введите первое число: "))
b_2 = int(input("Введите второе число: "))
c_2 = int(input("Введите третье число: "))
d_2 = int(input("Введите четвёртое число: "))

#Результат:

graph = 2 * (c_2 + 5 + (a_2 * b_2 / (4 * b_2))) * (d_2 - 2 * (a_2**3 / 30)) - 10

print('Результат: ', graph)
print('')


print('Задача 3. Исправление ошибки')

#Секретарь заполняла данные по категории сотрудников для расчёта множителя к зарплате и, не проверив правильность записи, случайно нажала «Подтвердить», после чего данные со значениями заблокировались. Однако осталась возможность редактировать формулу.

#Дана программа:

a = '2'
b = '5'
c = '3'
a = int(a)
b = int(b)
c = int(c)
num = 6**a + (7 - b) * c
print(num)
#Скопируйте её в редактор и исправьте в ней четвёртую строку, используя только функцию int().

#Запустите и проверьте работу программы. Результат должен быть равен 42.

****************************************
print('Задача 1. Яблоки')

#Транспортная компания ООО «ФруктыТрансСервис» занимается логистикой и грузоперевозками фруктов. Программисту Владимиру дали задачу написать программное обеспечение, которое позволит понять, сколько фруктов можно загрузить и сколько останется на складе.

#Напишите программу, которая решает задачу из урока: у транспортной компании есть 41 тонна яблок, которые нужно разместить по ящикам. Каждый ящик вмещает в себя три тонны. Необходимо выяснить, сколько ящиков мы сможем заполнить и сколько яблок останется. Оба ответа нужно вывести на экран.

apples = 41
crate = 3
full_crates = apples // crate
rem_apples = apples % crate
print("Количество полных ящиков:", full_crates)
print("Оставшиеся яблоки в тоннах:", rem_apples)
print('')


print('Задача 2. Последняя цифра')

#Избирательный участок включает в свою базу данных номера квартир и домов и, чтобы не хранить два числа отдельно, оба номера записывает одним числом вместе, где последняя цифра — это номер дома, а всё, что перед ней, — номер квартиры.

#Реализуйте программу, которая запрашивает число у пользователя, а затем выводит на экран номер дома и номер квартиры. Пример:


full_num = int(input("Введите число: "))
house_num = full_num % 10
apart_num = full_num // 10
print('Номер дома:',house_num, 'Номер квартиры:',apart_num)
****************************************
print('Задача 1. Язык математики')

# В первый же день на сайте отвалилась формула по расчёту рекламной метрики, и только Вася может её поправить. 
# Часть программы с вводными данными представлена ниже, отдельно записана формула на математическом языке.

# Дана программа:

a = 8
b = 10
c = 12
d = 18

# Продолжите программу: переведите выражение с математического языка на язык Python, запишите его в переменную res и выведите результат.

#
# Выражение: 

# (-3 + a**2) * b - 2**3
#      c- 2 * d
res = ((-3 + a**2) * b - 2**3) / (c - 2 * d)
print('Результат: ', res)

print('Задача 2. Финансовый отчёт')

# Васе пришло очередное задание — автоматизация финансовой отчётности. 
# Звучит сложно, а на деле нужно просто написать код, который будет считать нужные для отчёта вычисления автоматически. 
# Вычисления, которые нужно реализовать в программе: сумму дохода первых двух кварталов поделить на сумму последних двух кварталов, 
# чтобы понять динамику роста или падения дохода.

# Алгоритм действий в программе:
# 1) Запросить у пользователя четыре числа.
# 2) Отдельно сложить два первых и два вторых.
# 3) Разделить первую сумму на вторую.
# 4) Вывести результат на экран.

first_quater = int(input('Введите доход за первый квартал: '))
second_quater = int(input('Введите доход за второй квартал: '))
third_quater = int(input('Введите доход за третий квартал: '))
fourth_quater = int(input('Введите доход за четвёртый квартал: '))

first_two_incomes = first_quater + second_quater
last_two_incomes = third_quater + fourth_quater

income_dynamics = first_two_incomes / last_two_incomes

print('Динамика дохода: ', income_dynamics)



print('Задача 3. Следующее и предыдущее числа')

# В олимпиаде по программированию участвовали 1000 человек,
# и программа автоматически распределила их по количеству баллов.
# Иногда количество баллов у участников одинаковое,
# и тогда комиссии нужно посмотреть фамилии одного из таких участников,
# а также его соседей, это реализует специальная часть алгоритма.
#
# Напишите программу,
# которая получает от пользователя число и выводит на экран два ответа — следующее и предыдущее число.
# Результат: 

# Введите число: 5
# После числа 5 идет число 6
# До числа 5 идет число 4

ask_num = int(input('Введите число: '))
before_num = ask_num - 1
after_num = ask_num + 1

print('Введено число:', ask_num, '\n', 'После числа', ask_num, 'идёт число', after_num, '\n', 'До числа', ask_num, 'идёт число', before_num)


print('Задача 4. Площадь треугольника')

# Напишите программу,
# которая запрашивает у пользователя длины двух катетов
# в прямоугольном треугольнике и выводит его площадь.

# Формула: 
# S = ab/2

first_katet = float(input('Введите длину первого катета: '))
second_katet = float(input('Введите длину второго катета: '))

s = first_katet * second_katet / 2

print('Площадь треугольника:', s)


print('Задача 5. Часы')

# Напишите программу, 
# которая получает на вход число n — количество минут, — затем считает,
# 1) сколько это будет в часах 
# 2) сколько минут останется
# и выводит на экран эти два результата.
# (В вычислениях вам помогут операции // и %)


n = int(input('Введите количество минут: '))

hours = n // 60
remaining_minutes = n % 60

print('Это ' + str(hours) + ' часов и ' + str(remaining_minutes) + ' минут')


print('Задача 6. Проверяем бухгалтера')

# Реализуйте программу,
# которая запрашивает два числа у пользователя.
# После этого у каждого числа возьмите две последние цифры.
# Получившиеся два числа сложите и выведите на экран.

# Пример: 
# Введите первое число: 456
# Введите второе число: 123
# Сумма: 79


first_num = int(input('Введите первое число: '))
second_num = int(input('Введите второе число: '))

last_two_first = first_num % 100
last_two_second = second_num % 100

result = last_two_first + last_two_second

print('Сумма:', result)


print('Задача 7. Режем число на части')

# Реализуйте программу,
# которая получает на вход четырёхзначное число
# и выводит на экран каждую его цифру отдельно
# (в одну строчку либо каждая цифра в новой строчке).
# Само число при этом изменять нельзя, то есть нужно обойтись без переприсваивания.
# Однако можно использовать сколько угодно переменных

number = int(input('Введите четырёхзначное число: '))

# Извлекаем каждую цифру
thousands = number // 1000
hundreds = (number // 100) % 10
tens = (number // 10) % 10
units = number % 10

# Выводим каждую цифру на новой строке
print(thousands)
print(hundreds)
print(tens)
print(units)


print('Задача 8. Поменять местами: не всё так просто! (необязательная, повышенной сложности)')

# Вы уже умеете менять местами строковые переменные и знаете, 
# что в переменных кроме строк можно хранить и числа. 
# Напишите программу, которая меняла бы значения двух переменных местами, 
# но без использования третьей переменной и синтаксического сахара, который мы разбирали, а именно: 
# без конструкции a, b = b, a. В переменные будут вводиться только числа.

a = int(input('Введите первое число: '))
b = int(input('Введите второе число: '))
print(a, b)

a = a + b
b = a - b
a = a - b

print(a, b)

# Не изменяйте уже написанный код (input-ы и print-ы). Между принтами можно вставить столько строк кода, сколько вам нужно для решения.
****************************************
#Задача 1. Сбой

#На предприятии произошло ЧП: что-то случилось с программным обеспечением и производство встало. Когда стали разбираться, нашли битый кусок программы:

a = 6

b = 2

c = 0

if b < a:

 c = a * b

print(c)

#По задумке, здесь проверялись переменные а и b и в конце должен был выводиться ответ 12.

#Скопируйте программу в редактор, исправьте ошибки и вставьте необходимые значения вместо знаков вопроса. Проверьте работу программы.




#Задача 2. Курс от Skillbox
#Повторим задачу, разобранную в видео, и дополним её одной строкой.

#Пользователь хочет купить курс и вводит состояние своего банковского счёта для проверки.

#Курс стоит 75 000 рублей. Если на счёте хватает денег (больше или равно), то со счёта списываются 75 000 рублей, после чего программа выводит сообщение об успешной покупке «Курс успешно приобретён!».

#В конце обязательно выводится сообщение «Хорошего дня!», вне зависимости от результата проверки.

#Пример 1:

#Введите состояние счёта: 90000

#Курс успешно приобретён!

#Хорошего дня!



#Введите состояние счёта: 20000

#Хорошего дня!
per_wallet = int(input('Введите количество средств: '))

course_price = 75000

if per_wallet >= 75000:
 per_wallet -= course_price
 print('Курс приобретён')
print('Хорошего дня!') 


# Задача 3. Угадай число
# Отец пообещал сыну отпустить его гулять, если тот с первого раза угадает число от одного до десяти, которое он загадал.
# В противном случае сыну придётся весь день делать уроки.

# Напишите программу из видео, которая запрашивает число у пользователя (то есть у сына),
# затем сравнивает его с другим числом (которое загадал отец) и, если они равны, выводит сообщение «Угадал».
# В конце необходимо вывести фразу «Конец игры».

son_num = int(input('Какое число я загадал, сын? Введи его:  '))

father_num = 5

if son_num == father_num:
 print('Угадал!')

if son_num != father_num:
 print('Не угадал')

print('Конец игры')
# Пример 1:
# Какое число я загадал? 5
# Угадал!
# Конец игры

# Пример 2:
# Какое число я загадал? 6
# Конец игры

# Попробуйте решить задачу сначала с помощью одного знака сравнения (==),
# а затем с помощью другого (!=). Во втором случае сообщение измените на «Не угадал».
****************************************
# Задача 1. Курс от Skillbox — 2
# Напишите программу для примера, разобранного в видео.

# Пользователь покупает курс стоимостью 75 000 рублей.
# Если денег на счёте достаточно, нужно списать деньги и вывести сообщение «Курс успешно приобретён».
# Если нет, вывести «Не хватает денег на счёте».

# Не забудьте пожелать «Хорошего дня!» в любом случае. Мы же вежливые продавцы.

# Пример 1:
# Сколько денег на счёте? 5000
# Не хватает денег на счёте.
# Хорошего дня!

# Пример 2:
# Сколько денег на счёте? 100000
# Курс успешно приобретён!
# Хорошего дня!

per_wallet = int(input('Введите количество средств: '))

course_price = 75000

if per_wallet >= 75000:
 per_wallet -= course_price
 print('Курс успешно приобретён')
else:
 print('Не хватает денег на счёте')
 
print('Хорошего дня!') 
print('')
# Задача 2. Разминка для мозгов
# Напишите программу, которая проверяет то, как вы умеете складывать два числа в уме.
# Программа получает на вход два числа и предполагаемую сумму
# и должна выводить два разных сообщения — на верный и неверный ответ пользователя.

# В последнем случае надо показывать правильный результат.

# Пример 1:
# Введите первое число: 3
# Введите второе число: 10
# Сумма этих чисел: 13
# Ответ верный!

enter_num = int(input('Введите первое число: '))
enter_num_2 = int(input('Введите второе число: '))
enter_sum = int(input('Введите сумму этих чисел: '))


result_num = enter_num + enter_num_2

if enter_sum == result_num:
 print('Сумма этих чисел:', result_num, '\n' , 'Ответ верный!')

else:
 print(' Ответ неверный!','\n','Правильный результат:', result_num)
  
print('')
# Пример 2:
# Введите первое число: 10
# Введите второе число: 20
# Сумма этих чисел: 55
# Ответ неверный!
# Правильный результат: 30



# Задача 3. Угадай число — 2
# На удивление, отец и сын частенько стали играть в игру «Угадай число»,
# и поэтому папа захотел немного усовершенствовать программу, чтобы на экран всегда выводилось нужное сообщение.

# Напишите программу,
# которая запрашивает число у пользователя, сравнивает его с другим числом и выводит соответствующее сообщение:
# «Угадал!» — если они равны,
# «Не угадал!» — если не равны. В конце выводите фразу «Конец игры».

# Пример 1:
# Какое число я загадал? 5
# Угадал!
# Конец игры

# Пример 2:
# Какое число я загадал? 6
# Не угадал!
# Конец игры

# Попробуйте решить задачу сначала с помощью одного знака сравнения (==), а затем с помощью другого (!=).


# 1 вариант со знаком "=="
son_num = int(input('Какое число я загадал, сын? Введи его:  '))

father_num = 5

if son_num == father_num:
 print('Угадал!')
else:
 print('Не угадал!')

# 2 вариант со знаком "!="

if son_num != father_num:
 print('Не угадал')
else:
 print('Угадал!')


print('Конец игры')
****************************************
#Задача «Максимальное число»
#Пользователь вводит три числа.

#Напишите программу, которая выводит на экран максимальное из этих трёх чисел (все числа разные). Используйте дополнительные переменные, если нужно.

#Перейдите в сервис Replit и попробуйте решить задачу самостоятельно. Чтобы увидеть подсказку, нажмите на кнопку ниже

first_num = int(input('Enter first number: '))
second_num = int(input('Enter second number: '))
third_num = int(input('Enter third number: '))

if first_num > second_num:
  bigger_of_first_two = first_num
else:
  bigger_of_first_two = second_num

if bigger_of_first_two > third_num:
  print('Biggest number is ', bigger_of_first_two)
else:
  print('Biggest number is ', third_num)
****************************************
#Задача 1. Координаты

#Мы тестируем 2D-игру, где нужно управлять подводной лодкой. У лодки есть координаты в пространстве — X (икс) и Y (игрек).

#X — это движение вперёд-назад, а Y — вверх-вниз. Соответственно, во время движения лодки меняются и её координаты.

#Во время тестирования игры нам необходимо сравнивать эти координаты и выводить на экран нужное сообщение, в том числе если они равны.

#Вводятся две координаты — X и Y. С помощью трёх последовательных проверок сравните обе координаты и выведите соответствующее сообщение.

#Пример 1:

#Введите икс: 5

#Введите игрек: 6

#X меньше Y
#Пример 2:

#Введите икс: 3

#Введите игрек: 3

#X равен Yv

x = int(input('Enter X: '))
y = int(input('Enter Y: '))

if x < y:
    print('x lesser than y')
if x > y:
    print('x bigger than y') 
else: 
    print('thay are equal')
#Задача 2. Скидки!

#Напишите программу для примера, разобранного в видео. Пользователь покупает курс стоимостью 75 000 рублей. Если денег на счету достаточно, то нужно:

#Списать со счёта деньги.
#Проверить баланс счёта. Если там меньше 5000 рублей, то зачислить на счёт 1000 рублей и вывести сообщение «Сделана скидка».
#Вывести сообщение «Курс успешно приобретён!».
#Иначе (если денег на счету не хватает) вывести «Не хватает денег на счету». Также в конце вывести остаток счёта и сообщение «Хорошего дня!».

#Пример:

#Сколько денег на счету? 78500

#Курс успешно приобретён

#Сделана скидка

#Остаток на счету: 4500

#Хорошего дня!

bank_money = int(input('Enter bank account: '))

course = 75000

if bank_money > course:
    bank_money -= course
    print('You bought course')
    if bank_money < 5000:
        bank_money += 1000
        print('Discount activated,', 'Money left:', bank_money)
else:
    print("You don't have enough money")

    print('Have a good day!')


#Задача 3. Маша пошла за сыром

#Мама дала Маше денег и отправила её в магазин за сыром. А ещё сказала: «Если останутся деньги, то можешь купить себе мороженое. 
# Если денег на сыр не хватит, значит, их маловато — следовательно, и мороженого не будет».

#Сделайте программу, которая получает на вход количество денег. Сыр стоит 60 рублей, мороженое — 20 рублей. 
#Если денег на сыр хватает (больше либо равно), то:

#Выводите сообщение «На сыр денег хватило» и вычитайте стоимость сыра из кошелька.
#Если оставшихся денег хватает на мороженое, то выводите «И на мороженое тоже!». Иначе выводите «Денег маловато».
#Если денег не хватило даже на сыр, то выводите «Денег не хватило даже на сыр!».

money = int(input('Enter money amount: '))

cheese = 60
ice_cream = 20

if money >= cheese:
    money -= money - cheese
    print('You have enough money to buy cheese!')
    if money >= ice_cream:
        money -= money - ice_cream
        print('And for ice_cream too!')
    else:
        print('Not enought money for ice cream...')
else:
    print("You don't have enough money even for cheese...")
****************************************
#Задача 1. Координаты-2

#Вернёмся к задаче про подводную лодку и её координаты. 
# Теперь мы знаем, что вместо трёх отдельных проверок можно использовать оператор elif — «иначе-если». 
# То есть если одна координата больше другой, то будет одно сообщение, иначе если одна меньше другой, то…

#Напишите программу, которая сравнивает координаты X (икс) и Y (игрек) и выводит соответствующий результат. 
# Для этого используйте оператор elif.

#Пример:

#Введите икс: 1

#Введите игрек: 5

#X меньше Y
#Пример 2:

#Введите икс: 5

#Введите игрек: 5

#X равен Y

x = int(input('Enter X: '))
y = int(input('Enter Y: '))

if x < y:
    print('x lesser than y')
elif x > y:
    print('x bigger than y') 
else: 
    print('thay are equal')

#Задача 2. Прогрессивный налог

#В некоторых странах действует так называемая прогрессивная шкала налогообложения: чем больше ты зарабатываешь, тем больший налог платишь.

#Нужно написать программу, которая будет рассчитывать сумму налога исходя из прибыли. Если прибыль до 10 000 — 
# ставка налога равна 13%, начиная с 10 000 и до 50 000 — 20%. А начиная с 50 000 — 30%. Т
# акже нужно добавить «проверку на дурака»: если ввели число меньше нуля, то вывести сообщение «Ошибка: доход не может быть отрицательным».

income = int(input('Enter your income: '))

if income < 10000:
    tax_income = income * 13 / 100
elif income > 50000:
    tax_income = income * 30 / 100
else: 
    tax_income = income * 20 / 100

print('Your tax is:', int(tax_income))

#Задача 3. Фальшивомонетчики

#Пете дали три монетки и сказали, что если он сможет на весах без гирь определить, какая из них фальшивая (более лёгкая), 
# то сможет забрать их все. А Петя в одной из книжек прочитал, что для этого достаточно одного взвешивания: 
# если две монеты весят одинаково, то фальшивая третья, а иначе фальшивая та, которая легче на весах.

#Напишите программу, которая принимает на вход вес трёх монет (две одинаковые, третья меньше) и определяет, какая из них легче.

#Пример:

#Введите вес 1й монетки: 2

#Введите вес 2й монетки: 2

#Введите вес 3й монетки: 1

#Третья легче

first_coin = int(input("Enter weight of First coin: "))
second_coin = int(input("Enter weight of Second coin: "))
third_coin = int(input("Enter weight of Third coin: "))

if first_coin == second_coin:
  print('Third coin is fake')
elif second_coin == third_coin:
    print('First coin is fake')
else:
    print('Second coin is fake')
****************************************
#Задача 1. Покупка велосипеда

#Напишите программу, которую мы разбирали в рамках теории. Нашему ребёнку нужен новый велосипед. 
# Правда, никто из нас в них не разбирается.
#  Нужно, чтобы велосипед не был устаревшим и скоростей на нём было побольше, а сколько он стоит — пока неважно. 
# Чтобы не искать велосипед на сайте вручную, мы хотим написать программу, которая будет проверять 
# каждый велосипед на нужный нам год выпуска и количество скоростей.

#Используя один из логических операторов (and, or), напишите программу из видео,
#  которая запрашивает год выпуска велосипеда и количество скоростей и выводит на экран сообщение о том, подходит этот велик или нет.

#Условия, которые надо проверить:

#год выпуска — не старше 2018-го;
#количество скоростей — не менее 24.

bycycle_year = int(input('Enter Bycycle year: '))
bycycle_speed = int(input('Enter bycycle speed: '))

if bycycle_year <= 2018 and bycycle_speed >= 24:
    print('Nice!')
else:
    print('Not nice!')



#Задача 2. Как поступить?

#Илья хочет поступить в лучший вуз страны, а для этого нужно не только хорошо сдать экзамены (набрать больше 280 баллов), но и иметь золотую медаль.

#Напишите программу, которая запрашивает у пользователя два числа: результат экзаменов и наличие золотой медали 
#(0 — нет медали, 1 — медаль есть), а затем проверяет, поступил ли Илья в вуз.

#Выведите соответствующее сообщение:

#«Поздравляем! Ты поступил!» — если поступил.
#«К сожалению, ты не прошёл в наш университет» — если не поступил.
#Пример 1:

#Сколько баллов набрал? 290

#Есть медаль? 1

#Пример 2:

#Сколько баллов набрал? 269

#Есть медаль? 1

#К сожалению, ты не прошёл в наш университет.

gold_medal = input("Do you have a golden medal?: ").strip().lower()
score = int(input("Enter your score: "))

positive_responses = {"yes", "yeah", "yup"}


if gold_medal in positive_responses and score > 280:
    print("Congratulations! You have been admitted!")
elif gold_medal not in positive_responses and gold_medal != "no":
    print("Invalid input for the golden medal question.")
else:
    print("Unfortunately, you did not get into our university.")

#Задача 3. Бактерии живут комфортно

#Биолог Арсений изучает микробы и их поведение при разных температурных нагрузках. 
# Он помещает их в специальную среду, где температура скачет в промежутке от нуля до 100 градусов. 
# Если же температура в среде выходит за рамки промежутка, то выводится предупреждение.

#Напишите программу, которая запрашивает у пользователя температуру и, если она меньше нуля или больше 100, выводит сообщение об опасности. 
# Иначе выводится сообщение «Температура в пределах нормы».

temp = int(input('Enter temperature: '))

if temp < 0 or temp > 100:
    print("Danger!")
else:
    print('Temperature is ok')
****************************************
#Почтовое отделение открывается в 08:00 и закрывается в 22:00. С 14:00 до 15:00 все сотрудники уходят на обед, 
#а в 10:00 и 18:00 приезжают машины с посылками, и все сотрудники в течение двух часов заняты их разгрузкой. 
#Во время обеда и разгрузки машин посылки никто не выдаёт.

#Напишите программу, которая получает на вход время в часах — число от 0 до 23 — и пишет, 
#можно ли в этот час получить посылку. Используйте только один условный оператор if-else, без elif и прочих. Решите задачу двумя способами:

#При выполнении условия выводится сообщение: «Можно получить посылку».
#При выполнении условия выводится сообщение: «Посылку получить нельзя».
#Важное замечание: обратите внимание на количество условий и постарайтесь их сократить. 
#Не используйте перечисление конкретных часов вида a == 1 and a == 2 и так далее.

#Перейдите в сервис Replit и попробуйте решить задачу самостоятельно. Чтобы увидеть подсказку, нажмите на кнопку ниже.

package_time = int(input('Введите время: '))

if not (package_time < 8 or package_time >= 22 or 14 <= package_time < 15 or 10 <= package_time < 12 or 18 <= package_time < 20):
    print('Можно получить посылку')
else:
    print('Посылку получить нельзя')   



package_time = int(input('Enter time: '))

if package_time < 8 or package_time >= 22 or 14 <= package_time < 15 or 10 <= package_time < 12 or 18 <= package_time < 20:
    print('Посылку получить нельзя')
else:
    print('Можно получить посылку')
****************************************
#Задача 1. Циклы — это сложно?

#Даша начала проходить циклы. Она написала программу, которая просто должна считать сумму чисел до тех пор, пока мы не ввели 0, 
# но что-то пошло не так.

total = 0
number = int(input('Введите число: '))
while number >= 0:
    total += number
    number = int(input('Введите число: '))
print(total)

#Скопируйте программу в редактор, исправьте её и убедитесь в правильности работы программы.

#Задача 2. Закономерности

#Арина считает, что всё в нашей жизни закономерно. И она в очередной раз убедилась в этом, когда узнала своё домашнее задание по математике.

#Напишите программу, которая выводит на экран вот такую последовательность чисел (каждое число в новой строчке):

#7 14 21 28 35 42 49 56 63 70 77 84 91 98
#Найдите закономерность и выведите значения в терминал в цикле.

first_num = 7
while first_num <= 98:
    print(first_num)
    first_num += 7
    
****************************************
#Задача 1. Бегать — это полезно

#Представим, что у нас далёкое будущее и мы можем заниматься спортом на планетах со странными перепадами температур. 
# Спортсмен бегает по стадиону до тех пор, пока температура на улице больше 15 градусов. Он пробегает 20 метров, 
# затем температура падает на два градуса, и, если уже в этот момент она стала меньше либо равна 15 градусам, спорт сразу заканчивается. 
# Если же всё в порядке, то он проходит пешком ещё 10 метров. Затем всё это повторяется.

#Напишите программу, которая спрашивает у пользователя, сколько на улице градусов, и, исходя из погоды, 
# считает количество пройденных по стадиону метров и выводит ответ на экран. 

temperature = int(input("Temperature: "))
meters = 0

while temperature > 15:
    meters += 20
    temperature -= 2
    if temperature <= 15:  # If the temperature becomes <= 15, we stop
        break
    meters += 10

print("Total meters covered:", meters)

#Задача 2. Расшифровка кода

#Нам нужно расшифровать определённый код в виде одного большого числа. 
# Для этого нужно посчитать сумму цифр справа налево. Если мы встречаем в числе цифру 5, 
# то выводим сообщение «Обнаружен разрыв» и заканчиваем считать сумму. В конце программы на экран выводится сумма тех цифр, которые мы взяли.

code = input("Введите большое число: ")


sum_of_digits = 0


for digit in reversed(code):
    if digit == '5':
        print("Обнаружен разрыв")
        break
    sum_of_digits += int(digit)


print("Сумма цифр:", sum_of_digits)

#Задача 3. Начальная школа

#Авторы учебника по математике для второклассников очень любят всё усложнять. 
#Например, отрицательные числа изучают только в пятом классе, а они всё норовят дать задачки на них во втором классе. 
#Нам нужна программа, которая будет проверять, что в учебнике для второклашек не будет отрицательных чисел.

#Напишите программу, которая считывает числа до тех пор, пока не встретит отрицательное число.
#При появлении отрицательного числа программа завершается и показывает количество введенных чисел. 
#Подумайте, обязательно ли здесь использовать оператор break.

count = 0

while True:
    number = int(input("Введите число: "))
    if number < 0:
        break  # Завершаем цикл, если введено отрицательное число
    count += 1

print("Количество введенных чисел:", count)



#адача 4. Ставки приняты, ставок больше нет

#Костя опять за старое! Только теперь он играет в кубики более надёжно, то есть на какую-то фиксированную сумму. 
# И при этом пока что постоянно выигрывает! Однако по правилам это не мешает ему проиграть сразу всё.

#Напишите программу, которая запрашивает у пользователя начальное количество денег и, пока оно меньше 10 000, запрашивает число,
#  которое выпало на кубике (от 1 до 6). Если на кубике выпало 3, то выводится сообщение «Вы проиграли всё!», и деньги обнуляются. 
# Если выпало другое число, к сумме прибавляется 500.



starting_money = int(input("Enter starting money: "))

while starting_money <= 10000:
    enter_cube_num = int(input("Enter cube number: "))
    if enter_cube_num == 3:
        print("You've lost everything!")
        starting_money = 0 
        break
    starting_money += 500
    print('Cube number is:', enter_cube_num)
    print('You won 500 rubles!')

print("Game over.")
print("Remaining money:", starting_money, "rubles")

    


#Пример 1:

#Введите стартовую сумму: 5000
#Сколько выпало на кубике? 4
#Выиграли 500 рублей!
#Сколько выпало на кубике? 5
#Выиграли 500 рублей!
#Сколько выпало на кубике? 3
#Вы проиграли всё!
#Игра закончена.
#Итого осталось: 0 рублей
#Пример 2:

#Введите стартовую сумму: 9700
#Сколько выпало на кубике? 4
#Выиграли 500 рублей!
#Игра закончена.
#Итого осталось: 10200 рублей
****************************************
#Что нужно сделать
#Задача 1. Неправильный таймер

#Петя писал таймер для телефона, но у него что-то пошло не так.

count = 10
while count <= 10:
    if count == 0:
        print('Время вышло!')
        break
    else:
     count -= 1
     print(count)

        
#Скопируйте программу в редактор, исправьте ошибки и убедитесь, что на экран выводятся числа с 10 до 0 и сообщение «Время вышло!».

#Задача 2. Тестируем приложение

#Напишите программу, которая имитирует работу с приложением: программа спрашивает у пользователя «Продолжаем работать?
#  1/0: » до тех пор, пока пользователь не введёт 0, — после этого выводится сообщение: «Приложение закрывается…». 
# В конце программы также выводится сообщение: «Работа завершена». Для создания бесконечного цикла используйте while True. 


continue_working = int(input('Continue working 1/0: '))
while True:
  active =  int(input('Countinue: 1/0? '))
  if active == 0:
     print('Programm closing')
     break
print('Working done')




#Задача 3. Вирус

#Дима написал программу-вирус специально для того, чтобы проучить своего друга-должника, который никак не хочет возвращать скейтборд.
#  Программа не даёт работать за компьютером и постоянно выводит на экран сообщение “Компьютер заблокирован. 
# Вернёшь скейт - скажу код разблокировки!”. Как только вводится правильный код: вирус удаляется. 
# Напишите такую же программу, которую написал Дима. Код не может начинаться с цифры 0.

#Пример:

#Компьютер заблокирован. Вернёшь скейт - скажу код разблокировки!
#Введите код: 1005
#Компьютер заблокирован. Вернёшь скейт - скажу код разблокировки!
#Введите код: 7777
#Компьютер заблокирован. Вернёшь скейт - скажу код разблокировки!
#Введите код: 550
#Код верный, завершаю работу...

unblock_code = int(input("Введите код разблокировки: "))

while True:
    if unblock_code != 552:
        print("Компьютер заблокирован. Вернёшь скейт - скажу код разблокировки!")
        unblock_code = int(input("Введите код разблокировки: "))
    else:
        print("Код верный, завершаю работу...")
        break  
****************************************
#Задача 1. Надоедливый заказчик

#Нашему заказчику нужно, чтобы фраза «Я — программист!» выводилась на экран столько раз, сколько он сам этого захочет.

#Напишите программу, которая запрашивает число — количество строчек с фразой «Я — программист!» — и столько же раз выводит на экран эту фразу.
#  Для решения задачи используйте переменную-счётчик,
#  которая увеличивается на единицу до тех пор, пока не будет выведено нужное количество строчек.



count = int(input("How many times do i need to type 'I'm a programmer?': "))
counter = 0
while counter < count:
    print("I'm a programmer")
    counter += 1
print('Loop is done')

#Задача 2. Напоминалка

#У Евгения много работы, а ещё он очень забывчивый. Иногда он забывает о какой-нибудь важной встрече, 
# и ему приходится выслушивать критику от начальства. Напишите для него программу-напоминалку. 
# В самом начале программа спрашивает, сколько раз ему напомнить, а затем нужное количество раз выводит: «Вы хотели не забыть о чём-то».

counter_Eug = 0
reminder = int(input('How many times do i need to remind you?: '))

while counter_Eug < reminder:
    print('You wanted to be reminded of something')
    counter_Eug += 1

#Задача 3. Рыбалка

#Наши прекрасные родственники удачно сходили на рыбалку. 
# Настолько, что ходили мешком перетаскивать рыбу с берега в машину целых n раз. 
# Каждый мешок они взвешивали на электронных весах (все мешки весили по-разному). 
# Напишите программу для весов, которая считает суммарный вес мешков и выводит его на экран.

sack_count = int(input('How many sacks?: '))

total_weight = 0  # Переменная для хранения суммарного веса мешков
counter = 0  # Счётчик для отслеживания количества обработанных мешков

while counter < sack_count:
    sack_weight = float(input(f'Enter the weight of sack {counter + 1}: '))
    total_weight += sack_weight  # Добавляем вес мешка к общей сумме
    counter += 1  # Увеличиваем счётчик на 1

# Выводим суммарный вес
print(f'The total weight of all sacks is: {total_weight} kg')

****************************************
print('Задача 1. Кубы чисел')

# В один из вечеров к Васе домой пришёл племянник и пожаловался на сложности с уроками математики: у него никак не получалось разобраться со степенями чисел. Вася решил помочь племяннику и написать программу, которая позволит наглядно увидеть возведение чисел в третью степень.

# Напишите программу, которая возводит в третью степень каждое число от 1 до N и выводит результат на экран.

# Пример
# Введите число: 3
# 1 ** 3 = 1
# 2 ** 3 = 8
# 3 ** 3 = 27

to_qube = int(input('Введите число: '))
counter = 1

while counter <= to_qube:
    result = counter ** 3
    print(f'{counter} ** 3 = {result}')
    counter += 1


print('Задача 2. Коллекторы')

# Напишите робота для коллекторов.
# В самом начале он спрашивает имя должника и сумму долга,
# а затем начинает требовать у него погашения до тех пор, 
# пока он не введёт нужную сумму (равную сумме долга или больше).
# После погашения долга сообщите об этом пользователю и поблагодарите его.
 
# Пример:
# Василий, ваша задолженность составляет 100 рублей.
# Сколько рублей вы внесёте прямо сейчас, чтобы её погасить? 50
 
# Маловато, Василий. Давайте ещё раз.
# Сколько рублей вы внесёте прямо сейчас, чтобы её погасить? 90
# Маловато, Василий. Давайте ещё раз.
 
# Сколько рублей вы внесёте прямо сейчас, чтобы её погасить? 110
# Отлично, Василий! Вы погасили долг. Спасибо!

debt_name = input('Введите имя должника: ')
debt_num = int(input('Введите сумму долга: '))
money_to_debt = int(input('Введите сумму, которую вы готовы внести: '))

print(debt_name, 'Ваша задолженность составляет', debt_num)
print("Сколько рублей вы внесёте прямо сейчас, чтобы её погасить?", money_to_debt)

while money_to_debt < debt_num:
    print('Маловато,', debt_name, 'Давайте ещё раз.')
    money_to_debt = int(input('Введите сумму, которую вы готовы внести: '))

print('Отлично, ' + debt_name + '!' + ' Вы погасили долг. Спасибо!')


print('Задача 3. Слишком большие числа')

# У неудачливого бухгалтера всё опять идёт наперекосяк: ему приносят такие большие счета, что числа не помещаются на бумаге. 

# Напишите программу, которая считала бы для него, сколько цифр во вводимом числе. Обратите внимание, что число 0 имеет одну цифру.

# Пример:
# Введите число: 567
# Ответ: 3

# Введите число: 1203
# Ответ: 4

number = int(input('Введите число: '))
number = abs(number)

if number == 0:
    num_of_digits = 1
else:
    num_of_digits = 0
    while number > 0:
        number //= 10  
        num_of_digits += 1  

print('Ответ:', num_of_digits)

print('Задача 4. Поставьте оценку!')

# Вася выложил своё новое приложение на платформу для начинающих разработчиков,
# на ней пользователи могут ставить оценку приложению от −100 до 100.
# Ему захотелось сравнить количество положительных и отрицательных отзывов,
# для этого он заранее отфильтровал все отзывы так,
# чтобы в конце были те, которые равны нулю.
 
# Напишите программу,
# которая находит количество положительных
# и количество отрицательных чисел в последовательности.
# Последовательность заканчивается на числе 0.
 
# Пример:
# Введите число: −4
# Введите число: −90
# Введите число: 6
# Введите число: 0
# Кол-во положительных чисел: 1
# Кол-во отрицательных чисел: 2

positive_count = 0
negative_count = 0

while True:
    enter_num = int(input('Введите число: '))

  
    if enter_num == 0:
        break

    
    if enter_num > 0:
        positive_count += 1
    elif enter_num < 0:
        negative_count += 1


print('Кол-во положительных чисел:', positive_count)
print('Кол-во отрицательных чисел:', negative_count)


print('Задача 5. Обычный день на работе')

# Максим программирует целый день на работе и вечером идёт домой.
# Каждый час начальство кидает ему несколько задач,
# которые нужно решить до следующего рабочего часа.
# И вдобавок каждый час Максиму звонит супруга.
# Он знает, что если он возьмёт трубку, то жена попросит зайти вечером в магазин.

# Напишите программу,
# в которой считается, сколько задач выполнил Максим за день (8 часов).
# Если он хоть раз взял трубку,
# то в конце дополнительно выводите сообщение: «Нужно зайти в магазин».

# Пример:
# Начался 8-часовой рабочий день
# 1 час
# Сколько задач решит Максим? 1
# Звонит жена. Взять трубку? (1-да, 0-нет) 0

# 2 час
# Сколько задач решит Максим? 2
# Звонит жена. Взять трубку? (1-да, 0-нет) 0

# 3 час
# Сколько задач решит Максим? 3
# Звонит жена. Взять трубку? (1-да, 0-нет) 0

# 4 час
# Сколько задач решит Максим? 4
# Звонит жена. Взять трубку? (1-да, 0-нет) 1

# 5 час
# Сколько задач решит Максим? 5
# Звонит жена. Взять трубку? (1-да, 0-нет) 0

# 6 час
# Сколько задач решит Максим? 1
# Звонит жена. Взять трубку? (1-да, 0-нет) 0

# 7 час
# Сколько задач решит Максим? 2
# Звонит жена. Взять трубку? (1-да, 0-нет) 1

# 8 час
# Сколько задач решит Максим? 3
# Звонит жена. Взять трубку? (1-да, 0-нет) 0

# Рабочий день закончился. Всего выполнено задач: 21
# Нужно зайти в магазин


print('Начался 8-часовой рабочий день')

task_counter = 0
took_call = False  
hour = 1
while hour <= 8:
    print(f'{hour} час')

    tasks = int(input('Сколько задач решит Максим? '))
    task_counter += tasks

    wife_call = int(input('Жена звонит, взять трубку? (1 - да, 0 - нет) '))

    if wife_call == 1:
        took_call = True

    hour += 1  


print('Рабочий день закончился. Всего выполнено задач:', task_counter)

if took_call:
    print('Нужно зайти в магазин')

print('Задача 6. Вклады')

# Вклад в банке составляет X рублей.
# Ежегодно он увеличивается на P процентов,
# после чего дробная часть копеек отбрасывается.

# Определите, через сколько лет вклад составит не менее Y рублей.

# Напишите программу,
# которая по данным числам X, Y, P определяет,
# сколько лет пройдёт, прежде чем сумма достигнет значения Y.

X = int(input('Введите сумму вклада: '))
Y = int(input('Введите целевую сумму: '))
P = int(input('Введите процент увеличения в год: '))


current_amount = X
years = 0


while current_amount < Y:
 current_amount += (current_amount * P) // 100
 years += 1

print(f'Через {years} лет вклад составит не менее {Y} рублей.')


print('Задача 7. Игра «Угадай число»')

# В одной из практических работ мы делали задачу, где папа-программист написал для сына программу, которая просит его угадать число. Недостаток программы был в том, что бедному сыну приходилось её каждый раз перезапускать, чтобы угадывать число. Теперь, когда мы знаем гораздо больше, пришло время исправить этот недостаток и заодно немного улучшить саму игру.

# Напишите программу-игру, которая запрашивает у пользователя число до тех пор, пока он его не отгадает. Выводите сообщения в соответствии с примером.

# Пример (загадали число 7)
# Введите число: 3
# Число меньше, чем нужно. Попробуйте ещё раз!
# Введите число: 10
# Число больше, чем нужно. Попробуйте ещё раз!
# Введите число: 8
# Число больше, чем нужно. Попробуйте ещё раз!
# Введите число: 7
# Вы угадали! Число попыток: 4

num = 7
attempts = 0

while True:
    guess_num = int(input('Угадайте число: '))
    attempts += 1 

    if guess_num < num:
        print('Число меньше, чем нужно. Попробуйте ещё раз!')
    elif guess_num > num:
        print('Число больше, чем нужно. Попробуйте ещё раз!')
    else:
        print(f'Вы угадали! Число попыток: {attempts}')
    break  



print('Задача 8. Игра «Компьютер угадывает число»')

# Поменяйте мальчика и компьютер из прошлой задачи местами.
# Теперь мальчик загадывает число между 1 и 100 (включительно).
# Компьютер может спросить у мальчика:
# «Твое число равно, меньше или больше, чем число N?»,
# где N — число, которое хочет проверить компьютер.
# Мальчик отвечает одним из трёх чисел:
# 1 — равно,
# 2 — больше,
# 3 — меньше.
 
# Напишите программу, 
# которая с помощью цепочки таких вопросов и ответов мальчика угадывает число.
 
# Дополнительно: сделайте так, чтобы можно было гарантированно угадать число за семь попыток.

# Подсказка: При желании найдите описание алгоритма бинарного поиска и попробуйте применить в этой задаче.
#Разбор подобного решения будет в следующем модуле.


low = 1
high = 100

attempts = 0

while True:
    guess = (low + high) // 2
    attempts += 1


    print(f'Твое число равно, меньше или больше, чем число {guess}?')
    print('1 — равно, 2 — больше, 3 — меньше')

    response = int(input('Ваш ответ: '))

    if response == 1:
        print(f'Я угадал! Твое число {guess}. Количество попыток: {attempts}')
        break
    elif response == 2:
        low = guess + 1  
    elif response == 3:
        high = guess - 1  
    else:
        print('Неверный ввод, попробуй еще раз.')

****************************************
#Задание 1. Дом для семьи
#Максим написал программу, которая должна определять, подходит ли земельный участок для его семьи или нет. 
#Живут они втроем, вот и условие будет таким же: если количество квадратных метров делится на 3, то участок подходит.

for  meters in 100,90,95,87,102:
 if meters % 3 == 1:
   print(meters, 'Не подходит')
 else:
   print(meters, 'Подходит')

#Скопируйте программу в редактор и исправьте её. Убедитесь, что она работает правильно и решает задачу Максима.



#Задание 2. Таблица степеней
#Аркадию для выступления с докладом нужно выучить таблицу степеней для определённых чисел. 
#Правда, память у него работает довольно необычно, и ему проще учить их в нужном ему порядке.

#Напишите программу, которая выводит вторую, третью и четвёртую степень для каждого числа в отдельной строке (первая строка - степени для числа 3,
#  вторая строчка - степени для числа 7 и т.д.). Числа: 3,7,5,6,4.

#Результат:

#9 27 81
#49 343 2401
#25 125 625
#36 216 1296
#16 64 256

counter = 0

for number in 3,7,5,6,4:
  result_2 = number ** 2
  result_3 = number ** 3
  result_4 = number ** 4
  print(result_2, result_3, result_4)
  counter += 1

#Задача 3. Лотерея 2
#Напишите программу для немного усложнённой версии задачи про выигрышные билеты. 
#Есть заранее известные номера билетов: 345, 19, 87, 1020 и 421 (можете брать свои номера, не стесняйтесь). 
#Теперь, билет считается выигрышным, если номер билета - трёхзначное число и оно делится на 5. 
#Выведете в консоль сообщение для каждого выигрышного билета и количество победителей.

winner = 0

for ticket in 345, 19, 87, 1020, 421, 665, 221, 129:
  if ticket % 5 == 0 and 100 <= ticket <= 999:
    print(f"Билет номер {ticket} выигрышный") 
  winner += 1

****************************************
#Задача 1. Квадраты чисел
#Напишите программу, которая выводит квадраты чисел от 0 до 10. Для этого используйте цикл for и функцию range.

for numbers in range(11):
    result = numbers ** 2
    print(result)
    

#Задача 2. Кукушка
#Напишите программу, которая имитировала бы часы с кукушкой. В начале работы она спрашивает, который час, 
# а затем нужное количество раз пишет “Ку-ку!”.

co_hour = int(input('Который час? '))
for coco in range(co_hour):
    print('Ку-Ку!')
   

#Задача 3. Любовь с первой цифры (цикл for)
#Перепишите программу из прошлого модуля, используя цикл for.

#Паша очень любит математику. Настолько сильно, что у него по всей комнате висят всякие таблицы умножения, сложения, какие-то графики, формулы.
#  И теперь он захотел распечатать таблицу степеней двойки, у них как раз началась новая тема по информатике.

#Используя цикл for, выведите на экран для числа 2 его степени от 0 до 20.

base = 2
for exponent in range(21):
    result = base ** exponent
    print(f"{base}^{exponent} = {result}")
****************************************
#Задача 1. Квадраты превратились в кубы
#Напишите программу, которая выводит кубы чисел (число в третьей степени), лежащих в диапазоне от 1 до 10.

#Результат:

1
8
27
64
125
216
343
512
729
1000

for number in range(1, 11):
    cube = number ** 3
    print(cube)

#Задача 2. Сумма чисел
#Напишите программу, где пользователь вводит любые два целых положительных числа. А программа суммирует все числа в диапазоне от первого до второго. 
# Гарантируется, что первое введённое число всегда меньше второго.

#Пример:

#Введите первое число: 5
#Введите второе число: 10
#Сумма чисел от 5 до 10 равна 45

first_num = int(input('Введите первое число: '))
second_num = int(input('Введите второе число: '))

total_sum = 0

for num in range(first_num, second_num + 1):
    total_sum += num

print(f'Сумма чисел от {first_num} до {second_num} равна {total_sum}')

#Задача 3. Поел — можно и поспать, поспал — можно и поесть
#Напишите программу, разобранную в уроке.

#У Саши интересный режим сна: он может проснуться когда угодно, хоть ночью, но засыпает всегда до того, как наступит полночь, обычно в 23 часа.
#  А ещё он очень любит поесть. Он ест каждый час и если съедает больше 2000 калорий, то он просто падает спать. 
# Напишите программу, которая поможет Саше понять, всё ли с ним хорошо. Для этого нужно посчитать, 
# сколько он всего съест калорий и сколько часов будет бодрым.

wake_hour = int(input('Когда встанешь?'))
awake_hour = 0
calories = 0

for hour in range (wake_hour, 23):
    hour_eat = int(input('Который час?'))
    hour_calories = int(input('Сколько калорий потреблено?'))
    calories += hour_calories 
    if calories >= 2000:
     print(f'Наелся и спит')
     break
    awake_hour += 1
print(f'Калорий потреблено {calories}')
print(f'Прободорствовал {awake_hour} часов')

****************************************
#Задача 1. Должники
#Что нужно сделать
#В базе банка хранятся данные и должников, и законопослушных граждан. 
#Каждому человеку система присваивает свой номер. У нас есть случайная выборка из десяти номеров. 
#Правда, иногда база глючит и выдаёт номер с отрицательным значением.
#А ещё по статистике, которую собрал наш «МирПрогБанк», каждый второй пользователь брал кредит и не выплатил его вовремя, 
#то есть является должником.

#Напишите программу, которая при вводе десяти чисел определяет, сколько из них являются одновременно чётными и положительными.

positive_even_count = 0  # Счётчик для положительных чётных чисел

for _ in range(10):  # Цикл выполняется 10 раз
    citizen = int(input('Введите номер гражданина: '))
    
    if citizen % 2 == 0 and citizen > 0:  # Проверяем, что число чётное и положительное
        positive_even_count += 1  # Увеличиваем счётчик, если условие выполняется

print('Количество положительных чётных чисел:', positive_even_count)

#Что оценивается
#Задание считается успешно выполненным, если:

#результат вывода соответствует условию;
#input содержит корректное приглашение для ввода;
#переменные имеют значащие имена, не только a, b, c, d;
#задача решена с помощью конструкции for.

#Задача 2. Посчитай чужую зарплату...
#Что нужно сделать

#Бухгалтер устала постоянно считать вручную среднегодовую зарплату сотрудников компании и, чтобы облегчить себе жизнь, обратилась к программисту.

#Напишите программу, которая принимает от пользователя зарплату сотрудника за каждый из 12 месяцев и выводит на экран среднюю зарплату за год.

money = 0

for _ in range (1, 13):
   money_month = int(input('Введите зарплату за месяц: '))
   money += money_month
   
avg_money = money / 12
print(f'Количество денег, в среднем {avg_money}')

#Что оценивается
#Задание считается успешно выполненным, если:

#результат вывода соответствует условию;
#input содержит корректное приглашение для ввода;
#вывод содержит описание результата (не выведено одно число без описания);
#переменные имеют значащие имена, не только a, b, c, d;
#задача решена с помощью конструкции for.

#Задача 3. Факториал
#Что нужно сделать
#Мы всё ближе и ближе подбираемся к серьёзной математике. 
# Одна из классических задач — задача на нахождение факториала числа. И в будущем мы с ней ещё встретимся.

#Дано натуральное число n. Напишите программу, которая находит n! (n-факториал).

#Запись n! означает следующее:

#n! = 1 * 2 * 3 * 4 * 5 * … * n

#Пример:

#Введите число: 5

#Факториал числа 5 равен 120

fac_num = int(input('Введите число: '))
new_num = 0
for _ in (1, fac_num):
    new_num *= fac_num

print(f'Факториал числа {fac_num} равен {new_num}')                           



#Что оценивается
#Задание считается успешно выполненным, если:

#результат вывода соответствует условию;
#input содержит корректное приглашение для ввода;
#формат вывода соответствует примеру;
#вывод содержит описание, не только результат в виде числа;
#для решения используется цикл for, а не встроенные функции или рекурсия;
#переменные имеют значащие имена, не только a, b, c, d.

#Задача 4. Успеваемость в классе
#Что нужно сделать
#В классе N человек. Каждый из них получил за урок по информатике оценку: 3, 4 или 5, двоек сегодня не было. 
# Напишите программу, которая получает список оценок — N чисел — и выводит на экран сообщение о том, 
# кого сегодня больше: отличников, хорошистов или троечников.

#Замечание: можно предположить, что количество отличников, хорошистов, троечников различно.
five_grade = 0
four_grade = 0
three_grade = 0

class_people = int(input('Введите количество учеников в классе: '))

for _ in range(class_people):
    grade = int(input('Введите оценку ученика: '))

    if grade == 5:
        five_grade += 1
    elif grade == 4:
        four_grade += 1
    elif grade == 3:
        three_grade += 1
    else:
        print('Вы ввели неверное число')


if five_grade > four_grade and five_grade > three_grade:
    print('Сегодня больше отличников')
elif four_grade > five_grade and four_grade > three_grade:
    print('Сегодня больше хорошистов')
elif three_grade > five_grade and three_grade > four_grade:
    print('Сегодня больше троечников')
else:
    print('Сегодня одинаковое количество разных оценок') 

#Задача 5. Отрезок
#Что нужно сделать
#Напишите программу, которая считывает с клавиатуры два числа:
#  a и b, — считает и выводит в консоль среднее арифметическое всех чисел из отрезка [a; b], кратных числу 3.

a = int(input('Введите число A: '))
b = int(input('Введите число B: '))
sum_of_numbers = 0  # Переменная для суммы чисел, кратных 3
count = 0  # Переменная для подсчёта количества таких чисел

for num in range(a, b + 1):  # Включаем b в диапазон
    if num % 3 == 0:  # Проверяем кратность числа 3
        sum_of_numbers += num
        count += 1

if count > 0:  # Проверка, чтобы избежать деления на 0
    avg = sum_of_numbers / count
    print(f'Среднее арифметическое чисел, кратных 3, на отрезке [{a}; {b}] равно {avg}')
else:
    print(f'На отрезке [{a}; {b}] нет чисел, кратных 3')

#Задача 6. Замечательные числа
#Что нужно сделать
#Напишите программу, которая находит и выводит все двузначные числа, равные утроенному произведению своих цифр. 
# К таким относятся, например, 15 и 24.

#Что оценивается
#Задание считается успешно выполненным, если:

#результат вывода соответствует условию;
#допускается вывод без описания, достаточно вывести числа;
#переменные имеют значащие имена, не только a, b, c, d.

number_equal = 0





#Задача 7. Пропавшая карточка
#Что нужно сделать
#Для настольной игры используются карточки с номерами от 1 до N. Одна карточка потерялась. Напишите программу, которая поможет найти потерянную карточку, если номера оставшихся известны. Найдите её, зная номера оставшихся карточек.

#Введите число карточек — N.

#Затем введите N − 1 номера оставшихся карточек. Они могут быть введены в любом порядке.

#Пример:

#Введите количество карточек: 5
#Введите номер оставшейся карточки: 1
#Введите номер оставшейся карточки: 4
#Введите номер оставшейся карточки: 5
#Введите номер оставшейся карточки: 3
#Номер пропавшей карточки: 2

amount_of_cards = int(input('Введите число карточек: '))

total_sum = amount_of_cards * (amount_of_cards + 1) // 2

remain_sum = 0

for _ in range(amount_of_cards - 1):
    number = int(input('Введите номер оставшейся карточки'))
    remain_sum += number
    
missing_card = total_sum - remain_sum

print(f'Номер утерянной карты {missing_card}')
****************************************
#Задача 1. Таблица кубов
#Паше для проекта по математике нужна таблица кубов (третья степень числа) только чётных чисел от 1 до N. 
#Напишите программу, которая выведет ему эту таблицу на экран.
#Не используйте условные операторы, выведите формулу, как мы сделали это в уроке.

N = int(input('Введите число: '))

for i in range(2, N + 1, 2):
    cube = i ** 3  # Куб чётного числа
    print(f'{i}^3 = {cube}')

#Задача 2. Деление клетки
#Реализуйте программу, разобранную в уроке.

#В одной лаборатории наблюдают за одноклеточной амёбой. 
#Мы знаем, что каждые три часа она делится на 2 клетки. 
#Нам нужно для этой лаборатории написать программу, которая будет выводить сколько прошло часов и сколько получилось клеток. 
#Также нас попросили писать на каждом этапе деления сколько осталось часов до завершения наблюдения, 
# чтобы ученым было проще формулировать выводы на определённом этапе наблюдения.

total_hours = int(input("Количество часов: "))
cell_count = 1
for hour in range(1, total_hours // 3 + 1):
    cell_count *= 2
    print("Прошло часов:", hour * 3)
    print("Количество клеток:", cell_count)
    print("Осталось часов:", total_hours - hour * 3)
print("Наблюдение завершено!")

# Задача 3. Квадраты нечётных чисел
# Вводится число N. Напишите программу, которая выводит квадраты нечетных чисел от 1 до N.
# Нельзя использовать условные операторы. Можно использовать цикл while, но постарайтесь всё-таки решить с помощью конструкции for in range.
# Не нужно искать решение в интернете, попробуйте подумать сами, в следующем видео мы обязательно разберём эту задачу.

n = int(input("До какого числа выводить квадраты: "))
for i in range(1, n // 2 + n % 2 + 1):
    odd_number = i * 2 - 1
    print("Число:", odd_number, "Квадрат числа:", odd_number ** 2)
****************************************
#Задача 1. Степень нечётного числа
#Выведите третью степень каждого нечётного числа в диапазоне от единицы до указанного пользователем числа включительно. 
# Для этого используйте шаг внутри функции range.


number_for_cube = int(input('Введите число: '))

for number in range(1, number_for_cube + 1, 2):
    print(f'{number} в кубе = {number ** 3}')

#Задача 2. Театр
#Ваню заставили пойти в театр на балет. Ему стало там настолько скучно, что он придумал себе очень странное развлечение:
#считать сумму номеров каждого пятого стула в рядах.

#Напишите программу для вычисления суммы каждого пятого числа, лежащего в диапазоне от единицы до N. Использовать условный оператор нельзя.

#Пример:

#Введите число: 21
#Номер стула: 1
#Номер стула: 6
#Номер стула: 11
#Сумма: 55

number_for_chair = int(input('Введите число: '))
sum_of_chair = 0

for number in range(1, number_for_chair + 1, 5):
    print(f'Номер стула: {number}')
    sum_of_chair += number

print(f'Сумма: {sum_of_chair}')

#Задача 3. Диета
#Саша просыпается когда угодно, но в 23 часа уже точно идёт спать. 
#Питается Саша следующим образом: каждые 3 часа он выпивает литр воды и съедает N калорий. 
#Пить и есть он, кстати, начинает сразу как только проснётся. 
#Напишите программу, которая считает сколько он выпьет литров воды и сколько калорий он съест перед тем как пойдёт спать.

hour_wake = int(input('Введите время просыпания'))
water = 0
calories_sum = 0

for hour in range (hour_wake, 23, 3):
     water += 1
     print(f'Пошёл есть в {hour} часов')
     calories = int(input('Сколько калорий потреблено?: '))
     calories_sum += calories

print(f'Выпито литров {water}')
print(f'Съедено еды {calories_sum}')
****************************************
#Задача 1. Прятки
#Наверное, все мы в детстве играли в прятки. И конечно же всегда был “голя” - тот, кто всех ищет.
#Напишите программу, которая получает на вход количество секунд N и выводит все числа от N до 1 в порядке убывания. 
# В конце выведите сообщение “Я иду искать!”

second_for_capture = int(input('Введите количество секунд: '))

for secs in range(second_for_capture, 0, -1):
    print(secs)

print('Я иду искать!')

#Задача 2. Армия
#У офицера сегодня очень плохое настроение: он выстроил всех солдат в шеренгу и, начиная с конца, 
# начал спрашивать у каждого четвёртого солдата сколько правил прописано в воинском уставе. 
# Количество правил с каждым разом меняется. Если солдат ответил неверно, то применяется закон под названием “упал-отжался”. 
# Количество отжиманий считается как 10 умножить на порядковый номер солдата в шеренге. Напишите программу, 
# которая посчитает сколько в сумме получится таких отжиманий.

#Усложнение: напишите программу так, чтобы офицер начинал спрашивать не с последнего солдата в шеренге, 
#а с четвертого с конца. Если солдат в шеренге слишком мало, офицер не спрашивает никого

soldier_count = int(input('Введите количество солдат: '))
rules_count = int(input('Введите количество правил в уставе: '))

sum_of_physics = 0

if soldier_count >= 4:
    for guilty_soldier in range(soldier_count - 3, 0, -4):
        print('Какое количество правил в уставе?:')
      
        physics = guilty_soldier * 10
        print(f'Отожмёшься {physics}, солдат номер {guilty_soldier}')
        sum_of_physics += physics

print(f'Общее количество отжиманий: {sum_of_physics}')

#Задача 3. Прятки 2
#Пока все прятались, “голя” решил схитрить и считать секунды быстрее, чем нужно.

#Напишите программу, которая выводит только чётные числа в порядке убывания от N до 1 включительно, используя цикл for. 
#Нельзя использовать условный оператор.

second_for_capture_third = int(input('Введите количество секунд: '))

for secs_third in range(second_for_capture_third - (second_for_capture_third % 2), 0, -2):
    print(secs_third)

print('Я иду искать!')
****************************************
print('Задача 1. Космическая еда')

# Ваш космический корабль потерпел крушение на пустынной планете. Еда здесь не растёт, но вы спасли из обломков 100-килограммовый мешок гречки. Из прошлого опыта вы знаете, что если будете экономно питаться, то у вас будет уходить по четыре килограмма гречки в месяц.

# Чтобы прикинуть гречневый бюджет, вы решили написать программу, которая выведет информацию о том, сколько килограммов гречки у вас должно быть в запасе через месяц, два и так далее, пока она не закончится. Используйте цикл for.

initial_grain_weight = 100 
monthly_consumption = 4     

for month in range(1, initial_grain_weight // monthly_consumption + 2):
    remaining_grain_weight = initial_grain_weight - monthly_consumption * (month - 1)
    if remaining_grain_weight < 0:
        remaining_grain_weight = 0
    print(f'Через {month} месяц(а) останется {remaining_grain_weight} кг гречки.')

print('Расчёты завершены.')


print('Задача 2. Долги')

# «МирПрогБанк» наконец-то разделил законопослушных граждан и должников и поместил их в разные базы. Но банк не торопится сильно давить на неплательщиков. Операторам банка дали задание позвонить каждому пятому должнику из списка (нумерация начинается с нуля) и уточнить, какую сумму каждый из них задолжал банку.

# Напишите программу, которая получает данные о количестве должников, а затем спрашивает у каждого пятого (начиная с нуля) его долг. В конце выводится общая сумма долгов.

# Пример 1
# Введите количество должников: 13
# Должник с номером 0
# Сколько должны? 1000
# Должник с номером 5
# Сколько должны? 5000
# Должник с номером 10
# Сколько должны? 2000
# Общая сумма долга: 8000

# Пример 2
# Введите количество должников: 10
# Должник с номером 0
# Сколько должны? 1000
# Должник с номером 5
# Сколько должны? 5000
# Общая сумма долга: 6000


number_of_debtors = int(input('Введите количество должников: '))

total_debt = 0

for debtor_number in range(0, number_of_debtors, 5):
    print(f'Должник с номером {debtor_number}')
    debt_amount = int(input('Сколько должны? '))
    total_debt += debt_amount

print(f'Общая сумма долга: {total_debt}')


print('Задача 3. Таймер для микроволновых печей')

# Мы разрабатываем микропрограмму — таймер обратного отсчета для микроволновых печей. Некоторым пользователям не нравится пищащий звук.
# Есть задача убрать звук по готовности и заменить его сообщением на LED-экране. В нашем случае будем выводить в консоль сообщение с обратным отсчетом в секундах от “reverse_timer” до момента готовности, то есть «0» секунд, и спрашивать пользователя, готов ли он забрать еду.

# Пользователь в любой момент может прервать режим разогрева, введя «1» (то есть ответить «Да, еда готова»), тогда программа выводит на экран сообщение «Ваша еда готова, можете забрать» и показывает, на какой секунде был прерван таймер.
# Если пользователь отвечает «0», что равноценно «Нет», то таймер уменьшается. Когда он достигнет «0» секунд, выводим сообщение «Ваша еда готова, осторожно горячo!»

# В данном задании используем цикл for.
# “reverse_timer” – переменная счетчик, значение которой запрашиваем у пользователя через функцию ввода input.

# 1) Задайте время до обнуления таймера.
# 2) Используйте цикл for.
# 3) На каждой итерации задавайте персонажу вопрос, хочет ли он сейчас остановить разогрев или нет.

print('Таймер обратного отсчета')

reverse_timer = int(input('Введите время таймера в секундах: '))

for remaining_time in range(reverse_timer, -1, -1):
    print(f'Осталось {remaining_time} секунд')
    user_input = input('Готовы забрать еду? (0 - нет, 1 - да): ')
    if user_input == '1':
        print(f'Ваша еда готова, можете забрать. Таймер был прерван на {remaining_time} секундe.')
        break
else:
    print('Ваша еда готова, осторожно горячo!')


print('Задача 4. Отрезок')

# Напишите программу, которая считывает с клавиатуры три числа a, b и c, считает и выводит на консоль среднее арифметическое всех чисел из отрезка [a; b], кратных числу c.

a = int(input('Введите значение a: '))
b = int(input('Введите значение b: '))
c = int(input('Введите значение c: '))

sum_of_multiples = 0
count_of_multiples = 0

for number in range(a, b + 1):
    if number % c == 0:
        sum_of_multiples += number
        count_of_multiples += 1

if count_of_multiples > 0:
    average = sum_of_multiples / count_of_multiples
else:
    average = 0

print(f'Среднее арифметическое чисел, кратных {c}, в отрезке [{a}; {b}] равно {average}')

print('Задача 5. Функция')

# Перед изучением функций из программирования Саша решил оживить свои знания о функциях математики. Помогите Саше написать программу, которая будет считать значение функции в каждой точке отрезка с нужным шагом, начиная с конца).
# Напишите программу, которая получает на вход начало и конец отрезка, а также шаг (отрицательный), а затем высчитывает функцию y в каждой точке отрезка и выводит ответ на экран с нужным шагом, начиная с конца.

# Сама функция выглядит так:
# y = x**3 + 2*x**2 - 4*x + 1

# Пример:
# 
# Введите начало отрезка: -2
# Введите конец отрезка: 2
# Введите шаг: -1
# В точке 2 функция равна 9
# В точке 1 функция равна 0
# В точке 0 функция равна 1
# В точке -1 функция равна 6
# В точке -2 функция равна 9

# Учтите, что пользователь может ввести некорректные диапазоны и вам нужно их скорректировать так, 
# чтобы вывод был при любых вводных.

start = int(input('Введите начало отрезка: '))
end = int(input('Введите конец отрезка: '))
step = int(input('Введите шаг: '))

if step >= 0:
    step = -step

if start < end:
    start, end = end, start

for x in range(start, end - 1, step):
    y = x**3 + 2*x**2 - 4*x + 1
    print(f'В точке {x} функция равна {y}')


print('Задача 6. Стипендия')

# Ежемесячная стипендия студента составляет educational_grant рублей, а расходы на проживание превышают стипендию и составляют expenses рублей в месяц.
# Рост цен ежемесячно увеличивает расходы на 3%, кроме первого месяца. Обратите внимание, что каждый месяц цены увеличиваются на 3% относительного прошлого месяца.

# Составьте программу расчёта суммы денег, которую необходимо получить у родителей один раз в начале обучения, чтобы можно было прожить учебный год (десять месяцев), используя только эти деньги и стипендию.

# Пример:

# Введите стипендию: 10000
# Введите расходы на проживание: 12000

# 1. месяц траты 12000 не хватает 2000
# 2. месяц траты 12360.0 не хватает 4360.0
# 3. месяц траты 12730.8 не хватает 7090.8
# 4. месяц траты 13112.7 не хватает 10203.52
# 5. месяц траты 13506.1 не хватает 13709.63
# 6. месяц траты 13911.2 не хватает 17620.92
# 7. месяц траты 14328.6не хватает 21949.55
# 8. месяц траты 14758.4 не хватает 26708.03
# 9. месяц траты 15201.2 не хватает 31909.27
# 10. месяц траты 15657.2 не хватает 37566.55

# Нужно попросить у родителей 37566.55 рублей

educational_grant = float(input('Введите стипендию: '))
expenses = float(input('Введите расходы на проживание: '))

total_needed = 0
monthly_expenses = expenses
cumulative_deficit = 0

for month in range(1, 11):
  deficit = monthly_expenses - educational_grant
  cumulative_deficit += max(deficit, 0)

  print(
    f'{month}. месяц траты {monthly_expenses:.1f} не хватает {cumulative_deficit:.1f}'
  )

  monthly_expenses *= 1.03

print(f'\nНужно попросить у родителей {cumulative_deficit:.2f} рублей')


print('Задача 7. Сумма ряда')

# Дано натуральное число N. Напишите программу для вычисления суммы N элементов последовательности по формуле 
# (-1)**n * 1/(2**n), где n — это порядковый номер элемента (расчёт начинается с нуля).

# Примеры расчётов

# При N = 4 элементы выражения будут равны:
# n = 0 
# elem = (−1) ** 0 * (½) ** 0 = 1
# n = 1
# elem = (−1) ** 1 * (½) ** 1 = (−½)
# n = 2
# elem = (−1) ** 2 * (½) ** 2 = ¼
# n = 3
# elem = (−1) ** 3 * (½) ** 3 = (−⅛)
# Сумма равна:
# s=1- 12+14-18 = 5/8 = 0,625

# При N = 6 элементы выражения будут равны:
# n = 0 
# elem = (−1) ** 0 * (½) ** 0 = 1
# n = 1
# elem = (−1) ** 1 * (½) ** 1 = (−½)
# n = 2
# elem = (−1) ** 2 * (½) ** 2 = ¼
# n = 3
# elem = (−1) ** 3 * (½) ** 3 = (−⅛)
# n = 4
# elem = (−1) ** 4 * (½) ** 4 = (1/16)
# n = 5
# elem = (−1) ** 5 * (½) ** 5 = (−1/32)
# Сумма равна:
# s = 1 − ½ + ¼ − ⅛ + 1/16 − 1/32 = 21/32 = 0,65625

# P. S. Не стоит выполнять расчёты каждого элемента вручную, используйте цикл.

N = int(input("Введите значение N: "))

sum_sequence = 0
sum_expression = ""
fraction_parts = []

for n in range(N):
    numerator = (-1) ** n
    denominator = 2 ** n
    element = numerator / denominator
    sum_sequence += element

    if n == 0:
        fraction_parts.append(f"{numerator}/{denominator}")
    else:
        if numerator > 0:
            fraction_parts.append(f"+ {numerator}/{denominator}")
        else:
            fraction_parts.append(f"- {abs(numerator)}/{denominator}")

    print(f'n = {n}')
    print(f'elem = (-1) ** {n} * (½) ** {n} = {numerator}/{denominator}')

sum_expression = " ".join(fraction_parts).replace(" + -", " - ")

final_numerator = 0
final_denominator = 1
current_denominator = 1

for i in range(N):
    current_numerator = (-1) ** i
    current_denominator = 2 ** i
    final_numerator = final_numerator * current_denominator + current_numerator * final_denominator
    final_denominator *= current_denominator

while final_numerator % 2 == 0 and final_denominator % 2 == 0:
    final_numerator //= 2
    final_denominator //= 2

if final_denominator == 1:
    formatted_sum = f"{final_numerator}"
else:
    formatted_sum = f"{final_numerator}/{final_denominator}"

print('Сумма равна:')
print(f's={sum_expression} = {formatted_sum} ={sum_sequence:.6f}')


print('Задача 8. Кинотеатр')

# X мальчиков и Y девочек пошли в кинотеатр
# и купили билеты на подряд идущие места в одном ряду.
#
# Напишите программу,
# которая выдаст, как нужно сесть мальчикам и девочкам,
# чтобы рядом с каждым мальчиком сидела хотя бы одна девочка,
# а рядом с каждой девочкой — хотя бы один мальчик.
#
# На вход подаются два числа - кол-во мальчиков X и кол-во девочек Y.
# В ответе выведите какую-нибудь строку,
# в которой будет ровно X символов “B” (обозначающих мальчиков)
# и Y символов “G” (обозначающих девочек), удовлетворяющую условию задачи.
# Пробелы между символами выводить не нужно.
# Если рассадить мальчиков и девочек согласно условию задачи невозможно,
# выведите строку “Нет решения”.
#
#
# Пример 1:
#
# Введите кол-во мальчиков: 5
# Введите кол-во девочек: 5
# Ответ: BGBGBGBGBG
#
# Пример 2:
#
# Введите кол-во мальчиков: 5
# Введите кол-во девочек: 3
# Ответ: BGBBGBBG
#
# Пример 3:
#
# Введите кол-во мальчиков: 100
# Введите кол-во девочек: 1
# Ответ: Нет решения

boys = int(input('Введите количество мальчиков: '))
girls = int(input('Введите количество девочек: '))

if abs(boys - girls) > 2:
    print("Нет решения")
else:
    result = ""

    if boys >= girls:
        major_char = 'B'
        minor_char = 'G'
        major_count = boys
        minor_count = girls
    else:
        major_char = 'G'
        minor_char = 'B'
        major_count = girls
        minor_count = boys

    for _ in range(max(boys, girls)):
        if major_count > 0:
            result += major_char
            major_count -= 1
        if minor_count > 0:
            result += minor_char
            minor_count -= 1

        if major_count > minor_count and major_count > 0:
            result += major_char
            major_count -= 1

    print(result)

****************************************
row_count = int(input('Введите количество рядов: '))
seats_count = int(input('Введите количество сидений: '))
meter_between = int(input('Введите количество свободных метров между рядами: '))

for seats in range (row_count):
  print('=' * seats_count, '*' * meter_between, '=' * seats_count)
****************************************
#Задача 1. Урок литературы
#Выполните задание, разобранное в уроке.

#К уроку литературы нужно было прочитать “Евгения Онегина”. 
# Учитель задаёт вопрос пяти случайным детям. Она задаёт вопрос “Кто написал произведение?” и если ученик не угадывает,
#  то учитель ставит двойку и спрашивает следующего. Если хоть кто-то угадает, то вопросы больше не задаются. 
# Напишите программу, которая посчитает количество двоечников из этих пяти.

bad_grade_count = 0
for __ in range (5):
    book_aut = input('Кто написал Евгения Онегина? ')

    if (book_aut == 'Пушкин') or (book_aut == 'пушкин'):
     print('Садись, пять!')
     break
    else:
       print('Неверно, два!')
       bad_grade_count += 1
print(f'{bad_grade_count}')

#Задача 2. Начальник
#Напишите программу для робота-начальника. Он спрашивает у пользователя, выполнил ли он задание, которое выдавал вчера, 
# и продолжает это делать до тех пор, пока тот не ответит ему “Да, конечно, сделал”.


answer_question = ('Да, конечно, сделал')

while True:
   user_input = input('Выполнил задание? ')
   if user_input == answer_question:
     break

   
#Задача 3. Дразнилка
#Напишите программу-дразнилку “Купи слона”. Она спрашивает у пользователя, как его зовут, 
# затем отвечает “%username%, купи слона”. Дальше, что бы он ни говорил, она передразнивает: Все говорят “...”, а ты купи слона!

#Пример:

#Как тебя зовут? Дима

#Дима, купи слона!

#Хорошо, давай куплю

#Все говорят Хорошо, давай куплю, а ты купи слона!

user_name = input('Как тебя зовут?')

while True:
   print(f'{user_name}, купи слона!')
   continue_input = ('')
   print(f'Все говорят {continue_input}, а ты купи слона!')
****************************************
#Задача 1. Python!
#Напишите программу, которая выводит в отдельную строчку каждый символ фразы “Python!”.

phrase = 'Python!'
for symbol in phrase:
    print(symbol * 3)

#Задача 2. Вирус
#Ваня экспериментирует с различного рода компьютерными вирусами, которые портят жизнь людям. 
#На просторах Интернета он нашёл код довольно необычного вируса, который “поворачивает” весь текст в документе и повторяет каждый символ 3 раза.
#Пользователь вводит текст. Напишите программу, которая выводит каждый символ текста в отдельной строке и три раза.

#ример:

#Введите текст: Привет!

#ППП

#ррр

#иии

#ввв

#еее

#ттт

#!!!

virus_int = input('Введите слово: ')

for symbol_virus in virus_int:
    print(symbol_virus * 3)


#Задача 3.
#Мы входим в команду разработки нового текстового редактора и нам поручили разработать для него подсчёт нужного символа в тексте, 
#а именно - буквы Ы. Причём отдельно с верхним регистром и отдельно с нижним.

#Напишите программу, которая считает количество больших и количество маленьких букв Ы в тексте и выводит ответ на экран.

#Пример:

#Введите текст: Прыг скок

#Больших букв Ы: 0

#Маленьких букв Ы: 1

phrase_BI = input('Введите фразу: ')
bi_count = 0
BI_count = 0
letter_small = 'ы'
letter_big = 'Ы'
for big_and_small in phrase_BI:
    if big_and_small == letter_small:
        bi_count += 1
    if big_and_small == letter_big:
        BI_count += 1
print(f'Маленьких букв ы: {bi_count}')
print(f'Больших букв Ы: {BI_count}')

****************************************
#Задача 1. Доска
#Используя новые знания о циклах и операторе end, напишите программу, которая выводит на экрану вот такую «доску»:

print("-" * 10)  # Верхняя граница доски

for i in range(8):  # Для строк между границами
    print("|", end="")  # Левая граница
    print("0" * 8, end="")  # Внутри доски
    print("|")  # Правая граница

print("-" * 10)  # Нижняя граница доски

#Задача 2. Локальная сеть
#У Никиты дома есть много компьютеров, которые он хочет подключить к одной локальной сети. 
# Для этого ему нужно сгенерировать айпи адрес для каждого компьютера. Айпи адрес записывается как 4 числа, которые отделяются точкой.
#  Не долго думая, для генерации Никита решил использовать арифметическую прогрессию, причём первые 3 числа в адресе - это члены прогрессии, 
# а последнее число - это её сумма.

#Напишите программу, где пользователь вводит:

#Первый член прогрессии.
#Разность (шаг, с которым будут увеличиваться числа).
#И в результате получает IP-адрес.

IP_number = int(input('Введите число: '))
IP_step = int(input('Введите число: '))
sum = 0

for step in range(3):
     print(f'{IP_number}', end=".")
     sum += IP_number
     IP_number += IP_step
print(f"{sum}")



#Задача 3. Табло
#Петя пишет компьютерную спортивную игру, где каждый “гол” это десять очков. Он хочет сделать красивое табло с градацией этих очков.

#Пользователь вводит число N (N >= 0). Реализуйте программу, которая выводит в одну строчку каждое десятое число, разделяя их символами “-=-”. 
# Эти же символы стоят перед первым числом и после последнего.

#Пример:

#Введите число: 50

#-=- 0 -=- 10 -=- 20 -=- 30 -=- 40 -=- 50 -=-


N = int(input('Введите число: '))

print('-=-', end='')
for symbol in range(0, N + 1, 10):
    print(f'{symbol}', end=' -=- ')
****************************************
print('Задача 1. Я стал новым пиратом!')

# Старому капитану нужно пополнить команду, но на корабль попадут только достойные! Он отобрал десять человек. 
# Те, кто крикнет слово «Карамба», попадут на борт.

# Что нужно сделать

# Пользователь вводит десять слов. Напишите программу, которая определяет, сколько из них совпадают со словом «Карамба».

capt_word = 'Карамба'
count_right = 0

for __ in range(11):
    crew_word = input('Крикните клич: ')
    if crew_word == capt_word:
        count_right += 1
print(f'Попало на кораль человек: {count_right}')
    


print('Задача 2. Кривой мессенджер')

# Существует мессенджер, в котором иногда возникают неполадки при передаче сообщений: в них попадает лишний символ — звёздочка.
#  Пользователям это надоело, поэтому они стали уходить в другие сервисы. Но один из них заинтересовался, 
# на каких позициях обычно появляется звёздочка. Чтобы выяснить это, пользователю необходимо подготовить строки, 
# в которых символ «*» встречается ровно один раз. 

# Что нужно сделать:

# Напишите программу, которая определяет порядковый номер звёздочки в строке.

# Пример:

# Введите текст: «Пр*ивет как дела».
# Символ «*» стоит на позиции 3.

text = input('Введите текст: ')
symbol_place = 0
for symbol in text:
    symbol_place += 1
    if symbol == '*':
     break
print(f'Символ "*" стоит на позиции {symbol_place}')


print('Задача 3. Театр')

# В городе планируют построить театр под открытым небом, но для начала нужно оценить, сколько сделать рядов, 
# сидений в них и каким должно быть расстояние между рядами.

# Что нужно сделать

# Напишите программу, которая получает на вход количество рядов, сидений и свободных метров между рядами, 
# а затем выводит примерный макет театра на экран.


# Сцена
# Введите кол-во рядов: 5
# Введите кол-во сидений ряду: 7
# Введите кол-во метров между рядами: 3
#
# ======= *** =======
# ======= *** =======
# ======= *** =======
# ======= *** =======
# ======= *** =======

row_count = int(input('Введите количество рядов: '))
seats_count = int(input('Введите количество сидений: '))
meter_between = int(input('Введите количество свободных метров между рядами: '))

between = '*' * meter_between

for seats in range (row_count):
    print('=' * seats_count, between, '=' * seats_count)

print('Задача 4. Марсоход 2')

# К роботу Валли отправили «коллегу» Билли. Это его первая высадка на Марс, поэтому его тестируют в прямоугольном помещении размером 15 × 20 м.
#  Марсоход высаживается в центре комнаты (в точке 8, 10), затем управление им передаётся оператору, то есть пользователю вашей программы. 

# Программа спрашивает, в какую сторону оператор хочет направить робота: север (клавиша W), юг (клавиша S), запад (клавиша A) или восток (клавиша D)
# Оператор делает выбор, марсоход перемещается в эту сторону на один метр, а программа сообщает новую позицию робота. Если марсоход упёрся в стену, он не должен пытаться переместиться в сторону стены — в этом случае его позиция не меняется. 

# Что нужно сделать
# Создайте программу для управления роботом Билли.

# Пример:
# 
# [Программа]: Марсоход находится на позиции 6, 19, введите команду:
# [Оператор]: A
# [Программа]: Марсоход находится на позиции 5, 19, введите команду:
# [Оператор]: W
# [Программа]: Марсоход находится на позиции 5, 20, введите команду:
# [Оператор]: W
# [Программа]: Марсоход находится на позиции 5, 20, введите команду:

north_direction = 'W'
south_direction = 'S'
west_direction = 'A'
east_direction = 'D'
position_on_horizontal = 8
position_on_vertical = 10

while True:
    command = input(f'Марсоход находится на позиции {position_on_horizontal}, {position_on_vertical}, введите команду: ') 
    if command == 'выход':
        break  
    if command == north_direction and position_on_vertical < 20:
        position_on_vertical += 1
    elif command == south_direction and position_on_vertical > 0:
        position_on_vertical -= 1
    elif command == west_direction and position_on_horizontal > 0:
        position_on_horizontal -= 1
    elif command == east_direction and position_on_horizontal < 15:
        position_on_horizontal += 1
   

print('Задача 5. Великий и могучий')

# Паоло изучает русский язык: занимается по учебникам, читает книги, слушает музыку. Ему особенно понравилась книга «Преступление и наказание». 
# Паоло решил найти самое длинное слово в этой книге, чтобы сравнить его с аналогом на своём языке.

# Что нужно сделать

# Напишите программу, которая получает на вход текст и находит длину самого длинного слова в нём. Слова в тексте разделяются одним пробелом.

# Пример:

# Введите текст: Меня зовут Пётр.
# Самое длинное слово, букв: 5.

# Введите текст: Меня зовут Василий
# Самое длинное слово, 7 букв

text_length = input('Введите текст: ')
max_length = 0  # Максимальная длина слова
count = 0  # Длина текущего слова

# Добавляем разделители для проверки
separators = ' ,.!?'

for symbol in text_length:
    if symbol in separators:  # Если символ - разделитель
        if count > max_length:  # Проверяем, больше ли текущая длина максимальной
            max_length = count
        count = 0  # Сбрасываем длину текущего слова
    else:
        count += 1  # Увеличиваем длину текущего слова

# Проверяем длину последнего слова, если оно не заканчивается на разделитель
if count > max_length:
    max_length = count

print(f'Самое длинное слово из {max_length} букв.')


print('Задача 6. Коровы')

# Для коров есть 10 стойл. В каждом из них условия для животных разные, поэтому и молока они дают по-разному. 
# В первом стойле производят 2 литра в день, во втором — 4, в третьем — 6, далее — 8, 10, 12, 14, 16, 18 и 20. 
# При этом коровы находятся не во всех стойлах. Свободные и занятые обозначаются строкой из букв a и b, где a — свободное стойло, b — занятое.

# Что нужно сделать

# Напишите программу для подсчёта получаемого молока в коровнике. Важно учитывать следующее взаимодействие: 
# пользователь вводит строку из десяти символов a и b. Необходимо определить, сколько в итоге будет произведено молока за день.


string = input('Введите строку из 10 символов a или b: ')
count = 0
milk_per_day = 0

for symbol in string:
    count += 1
    if symbol == 'b':
        milk_per_day += count * 2 
print(f'Молока произведено: {milk_per_day}')

print('Задача 7. Метод бутерброда')

# В секретном агентстве Super-Secret-no решили использовать «метод бутерброда» для шифрования переписки своих сотрудников. 
# Сначала буквы слова нумеруются в таком порядке: первая буква получает номер 1, последняя буква — номер 2, вторая — номер 3, 
# предпоследняя — номер 4, потом третья… и так для всех букв (см. рисунок). Затем все буквы записываются в шифр в порядке своих номеров.

# Например, слово «sandwich» зашифруется в «shacnidw».
# К сожалению, программист «Super-Secret-no», написал только программу шифрования и уволился.
# И теперь агенты не могут понять, что же они написали друг другу. Помогите им.

# Пример:
# Введите зашифрованное сообщение: shacnidw
# Расшифрованное сообщение: sandwich
#          1   3   5   7   8   6   4   2
# Слово: | s | a | n | d | w | i | c | h |
# Шифр:  | s | h | a | c | n | i | d | w |

word = input('Введите зашифрованое слово: ')
sum_1, sum_2 = ' ', ' '
count = 0
for letter in word:
 count += 1
 if (count % 2 == 1):
  sum_1 += letter
 else:
  sum_2 = letter + sum_2
print('Расшифрованое слово:', sum_1 + sum_2)

print('Задача 8. Древний палиндром')

# Контекст:
# Вы молодой археолог, который исследует древний свиток с таинственным посланием.
# Согласно легенде, если вы сможете прочитать палиндром из этого послания, то раскроете его секреты.
# Однако свиток весьма постарел, и некоторые буквы стерлись.
# Вам нужно разработать программу, которая поможет определить, является ли фрагмент послания, введенный пользователем, палиндромом.
# Если ваша программа сможет справиться с заданием, то вы сможете приблизиться к разгадке древней тайны.
#
# Задача: 
# Напишите программу, которая поможет определить, является ли введенная строка палиндромом.
# Если введенная строка является палиндромом, выведите сообщение "Да, это палиндром!".
# В противном случае выведите сообщение "Нет, это не палиндром!".
#
# Советы:
# -- Для выполнения задачи используйте цикл for и итерацию по символам строки.
# -- Возможно вам понадобиться развернуть строку, чтобы это сделать вам достаточно уметь проходить по строке циклом и использовать конкатенацию. 
# -- Чтобы сложить символы строки в обратном порядке - подумайте над переменой мест слагаемых. 
# Будут ли результаты одинаковы если мы все символы будем добавлять в конец строки (строка = строка + символ) 
# и если мы будем их добавлять в начало строки (строка = символ + строка)?

string = input('Введите предполагаемый палиндром: ')
reversed_string = ''  # Для перевёрнутой строки

# Переворачиваем строку вручную с помощью цикла
for symbol in string:
    reversed_string = symbol + reversed_string

# Сравниваем исходную строку с перевёрнутой
if string == reversed_string:
    print('Да, это палиндром!')
else:
    print('Нет, это не палиндром!')






****************************************
# Пользователь вводит число N.
# Напишите программу, которая выводит такую “лесенку” из чисел:

# Введите число: 5
# 1
# 2 2
# 3 3 3
# 4 4 4 4
# 5 5 5 5 5

n = int(input('Введите число: '))

for rows in range (n + 1):
    for col in range (n + 1):
        pyramid = rows * col
        print(pyramid)
    print()
****************************************
print('Задача 1. Тестовое задание')

# Степан пришёл устраиваться на работу, где ему дали тестовое задание:
# проанализировать такую таблицу,
# понять как она строится и написать программу для вывода её на экран.

# 0 2 4 6  8  10
# 1 3 5 7  9  11
# 2 4 6 8  10 12
# 3 5 7 9  11 13
# 4 6 8 10 12 14
# 5 7 9 11 13 15
# 
# Помогите Степану реализовать такую программу.
# Подсказка: номера столбцов. А ещё не забудьте про литерал \t для табуляции

for row in range(6):
    for col in range(6):  
        print(row + col * 2, end='\t')  
    print()  

print('Задача 2. Лестница')

# Пользователь вводит число N.
# Напишите программу, которая выводит такую “лесенку” из чисел:

# Введите число: 5
# 1
# 2 2
# 3 3 3
# 4 4 4 4
# 5 5 5 5 5

n = int(input("Введите число: "))

for i in range(1, n + 1):  
    for j in range(i):  
        print(i, end=' ')  
    print()  

print('Задача 3. Рамка')

# Напишите программу,
# которая рисует с помощью символьной графики прямоугольную рамку.
# Для вертикальных линий используйте символ вертикального штриха “|”,
# а для горизонтальных - дефис “-”. Пусть пользователь вводит ширину и высоту рамки.

#  _ _ _ _ _ _ _ _ _
# |                 |
# |                 |
# |                 |
# |                 |
# |                 |
# |                 |
# |_ _ _ _ _ _ _ _ _|

a = int(input('Введите высоту рамки: '))
b = int(input('Введите ширину арки: '))

for row in range(a + 1):
    for col in range(b + 1):
        if col == 0 or col == b:
            print('|', end=' ')
        elif row == 0 or row == a:
            print('-', end=' ')
        else:
            print(' ', end=' ')
    print()

print('Задача 4. Простые числа')

# Напишите программу, которая считает количество простых чисел в заданной последовательности и выводит ответ на экран.

# Простое число делится только на себя и на единицу. Последовательность задаётся при помощи вызова ввода (input) на каждой итерации цикла. 
# Одна итерация — одно число.

# Пример:
# Введите количество чисел: 6.
# Введите число: 4.
# Введите число: 7.
# Введите число: 20.
# Введите число: 3.
# Введите число: 11.
# Введите число: 37.

# Количество простых чисел в последовательности: 4.

# Запрашиваем количество чисел
seqNum = int(input('Сколько будет чисел: '))

# Инициализируем счетчик простых чисел
primeCount = 0

# Цикл для ввода каждого числа
for num in range(1, seqNum + 1):
    print('Введите', str(num) + '-e число:', end=' ')
    number = int(input())
    
    # Проверка на 0 и 1
    if number > 1:
        # Проверка на делимость
        is_prime = True  # Предполагаем, что число простое
        for divider in range(2, number):
            if number % divider == 0:
                is_prime = False  # Если нашли делитель, число не простое
                break
        if is_prime:
            primeCount += 1  # Увеличиваем счетчик простых чисел

# Выводим результат
print('Простых чисел в последовательности:', primeCount)

print('Задача 5. Наибольшая сумма цифр')

# Вводится N чисел. 
# Среди натуральных чисел, которые были введены, 
# найдите наибольшее по сумме цифр. Выведите на экран это число и сумму его цифр.

# Ввод количества чисел
n = int(input('Введите количество чисел: '))
max_sum = 0  # Переменная для хранения максимальной суммы цифр
max_number = 0  # Переменная для хранения числа с максимальной суммой цифр

# Ввод чисел
for _ in range(n):
    number = int(input('Введите число: '))
    
    sum_digits = 0  # Сумма цифр текущего числа
    
    # Цикл для подсчета суммы цифр
    temp_number = number
    while temp_number > 0:
        sum_digits += temp_number % 10  # Добавляем последнюю цифру к сумме
        temp_number //= 10  # Убираем последнюю цифру
    
    # Проверка, является ли текущая сумма цифр максимальной
    if sum_digits > max_sum:
        max_sum = sum_digits  # Обновляем максимальную сумму
        max_number = number  # Обновляем число с максимальной суммой

# Вывод результата
print(f'Число с наибольшей суммой цифр: {max_number}')
print(f'Сумма его цифр: {max_sum}')


print('Задача 6. Пирамидка')


# Напишите программу,
# которая выводит на экран равнобедренный треугольник (пирамидку),
# заполненный символами хэштега "#". Пусть высота пирамиды вводится пользователем.


   #
  ###
 #####
#######

# Ввод высоты пирамиды
height = int(input("Введите высоту пирамиды: "))

# Цикл для создания пирамиды
for i in range(height):
    # Вывод пробелов для выравнивания
    print(' ' * (height - i - 1), end='')
    # Вывод символов #
    print('#' * (2 * i + 1))

print('Задача 7. Пирамидка 2')


# Напишите программу,
# которая получает на вход количество уровней пирамиды и выводит их на экран,

# Пример:
# 
#             1
#          3     5
#       7     9     11
#    13    15    17    19
# 21    23    25    27    29

# Ввод количества уровней пирамиды
levels = int(input("Введите количество уровней пирамиды: "))

# Переменная для хранения текущего нечетного числа
current_odd_number = 1

# Цикл для создания уровней пирамиды
for i in range(levels):
    # Вывод пробелов для выравнивания
    print(' ' * (levels - i - 1) * 2, end='')  # Умножаем на 2 для большего отступа
    
    # Внутренний цикл для вывода нечетных чисел
    for j in range(i + 1):
        # Форматируем вывод, чтобы числа были выровнены
        print(f"{current_odd_number:2}", end='  ')  # Выводим число с шириной 2
        current_odd_number += 2  # Переход к следующему нечетному числу
    
    # Переход на новую строку
    print()


print('Задача 8. Яма ')

# Представьте, что вы разрабатываете компьютерную игру с текстовой графикой. Вам поручили создать генератор ландшафта. Напишите программу, которая получает на вход число N и выводит на экран числа в виде ямы:

# Напишите программу,
# которая получает на вход число N и выводит на экран числа в виде “ямы”:

# Введите число: 5
#
# 5........5
# 54......45
# 543....345
# 5432..2345
# 5432112345

n = int(input('Введите число: '))
print()
q = n - 1
while q >= 0:
    for i in range(-n, n + 1):
        if abs(i) > q:
            print(abs(i), end='')
        elif i == 0:
            print(end='')
        else:
            print('.', end='')
    q -= 1
    print()
****************************************
levels = int(input("Введите количество уровней пирамиды: "))

current_odd_number = 1

for level in range(levels):
  print(' ' * (levels - level - 1) * 2, end='')
  for draw_num in range(level + 1):
    print(f"{current_odd_number:2}", end='  ')
    current_odd_number += 2
  print()

****************************************
#Задача 1. Матрица
#Напишите программу, которая выводит квадратную матрицу размера N на N. 
# В каждой нечётной строке матрицы идут числа от 1 до N, а в каждой чётной — просто числа, равные номеру этой строки.

N = int(input('Введите число: '))

for i in range(1, N + 1):  # Строки от 1 до N
    if i % 2 != 0:  # Нечетная строка
        for j in range(1, N + 1):  # Числа от 1 до N
            print(j, end=' ')
    else:  # Четная строка
        for j in range(1, N + 1):  # Все числа равны номеру строки
            print(i, end=' ')
    print()  # Переход на новую строку


#Задача 2. Чёрный ящик
#Преподаватель показал студентам несколько результатов программы и сказал: «Кто догадается, 
# что делает программа и как она это делает, получит зачёт автоматом». Студент Миша намерен получить этот зачёт.
#  Он заметил, что в результатах программы есть определённая закономерность. Вот некоторые результаты:

    n = int(input("Введите число: "))
for i in range(1, n + 1):
    for j in range(1, n + 1):
        if j % 3 == 0:
            print(j, end='\t')
        else:
            print(i, end='\t')
    print()


#Задача 3. Координатные оси
#Напишите программу, которая рисует координатные оси на поле 20×50. Результат должен получиться таким:


#Что нужно поменять в коде, что в середине был не дефис, а вертикальная палочка?

x_lim = 50
y_lim = 20

for y in range(y_lim):
    for x in range(x_lim):
        if y == y_lim // 2:
            print('-', end='')
        elif x == x_lim // 2:
            print('|', end='')
        else:
            print(' ', end='')
    print()
****************************************
#Задача 1. Врата
#Напишите программу, которая выводит в консоль «врата», состоящие из тире, вертикальных линий и пробелов. 
# Поле состоит из 20 строк и 30 столбцов (но не стесняйтесь пробовать и другие размеры).

x_lim = 30
y_lim = 20

for y in range(y_lim):
    for x in range(x_lim):
        if y == 0:
            print('-', end='')
        elif x == 0 or x == x_lim - 1:
            print('|', end='')
        else:
            print(' ', end='')
    print()


#Задача 2. Дорога
#Мы делаем текстовую игру — гонку, и нам нужно вывести на экран что-то вроде трассы, где будут соревноваться наши машины. 
# Напишите программу, которая выводит такую дорогу на экран (поле 20×50).


#Что нужно сделать, чтобы обочины рисовались поверх горизонтальной линии?

x_lim = 50
y_lim = 20

delta = 3  # число 3 выбрано "на глаз", в зависимости от него дорога будет шире/уже

for y in range(y_lim):
    for x in range(x_lim):
        if y == y_lim // 2:
            print('-', end='')
        elif x == x_lim // 2:
            print('|', end='')
        elif x == x_lim // 2 - (delta + y):
            print('/', end='')
        elif x == x_lim // 2 + (delta + y):
            print('\\', end='')  # \ - символ который используется для экранирования, поэтому его пришлось дублировать
        else:
            print(' ', end='')
    print()

#Задача 3. Диагональная матрица
#Напишите программу, которая получает на вход размер квадратной матрицы и 
# выводит на экран по такому принципу диагональ из единиц с левого нижнего угла до верхнего правого, ниже диагонали — двойки, выше — нули.

n = int(input("Введите размер матрицы: "))

for y in range(n):
    for x in range(n):
        buf_x = (n - 1) - y  # вспомогательное число, которое будет уменьшаться от n-1 до 0
        if buf_x > x:
            print(0, end='\t')
        elif buf_x == x:
            print(1, end='\t')
        else:
            print(2, end='\t')
    print()
****************************************

#Задача 1. Электронная очередь
#Нам дали заказ написать программу для электронной очереди. 
# У каждого человека в очереди есть номер: нулевой, первый, второй, третий и так далее. 
# Каждый час очередь уменьшается на одного человека, то есть уходит сначала нулевой номер, затем первый, второй и так далее. 
# Наша программа получает на вход одно число — количество людей в очереди — и выводит на экран историю обслуживания очереди: 
# какие номера в какой час оставались.

people = int(input('Введите количество людей: '))
for hour in range (people + 1):
    print('Идёт час', hour)
    for minus in range(hour, people + 1):
        print('Номер в очереди', minus)
    print()

#Задача 2. Цифры больше пяти
#Пользователь вводит последовательность из N чисел. 
# Напишите программу, которая подсчитывает общее количество цифр больше пяти во всей последовательности.

n = int(input("Количество чисел в последовательности: "))
cipher_count = 0
for _ in range(n):
    new_number = int(input("Введите число: "))
    while new_number:
        if new_number % 10 > 5:
            cipher_count += 1
        new_number //= 10

print(cipher_count)

#Задача 3. Лестница чисел
#Пользователь вводит число N. Напишите программу, которая по этому числу выводит вот такую лестницу из чисел:

n = int(input("Введите число: "))
for start in range(n + 1):
    for number in range(start, n + 1):
        print(number, end='\t')
    print()
****************************************
# Задача 1. Конвертация
# Что нужно сделать
# При оплате покупок картой за рубежом банки делают конвертацию через промежуточную валюту. 
# Например, если оплачивать отечественной картой товар в евро, то сначала эта сумма конвертируется в доллары, а потом — в рубли.

# Напишите программу, которая получает на вход стоимость покупки в евро, а затем выводит ответ в рублях. 
# Представим, что мы живём в альтернативной реальности, где 1 евро = 1.25 доллара, а 1 доллар = 60.87 руб.

# Вводим стоимость покупки в евро
euro = float(input("Введите стоимость покупки в евро: "))

# Конвертируем евро в доллары
dollars = euro * 1.25

# Конвертируем доллары в рубли
rubles = dollars * 60.87

# Выводим результат
print(f"Стоимость покупки в рублях: {rubles:.2f} руб.")


# Задача 2. Грубая математика
# Что нужно сделать
# В одном центре математического анализа работал практикант, который писал программы для расчёта функций. Однажды он очень устал и неправильно понял техническое задание, поэтому функции стали грубо рассчитываться. 

# Его программа работает следующим образом: вводится последовательность из N вещественных чисел, при этом положительные числа округляются вверх, а отрицательные — вниз. 

# Напишите программу, которая выводит натуральный логарифм от числа, если оно положительное, и экспоненту в степени числа, если оно отрицательное.

# Пример:

# Введите кол-во чисел: 3

# Введите число: 1.3

# x = 2 log(x) = 0.6931471805599453

# Введите число: -2.1

# x = -3 exp(x) = 0.049787068367863944

# Введите число: -5.9

# x = -6 exp(x) = 0.0024787521766663585



# Задача 3. Аналог Steam
# Что нужно сделать
# Вы пишете программу-инсталлятор для компьютерной игры. Пока инсталлятор скачивает обновление, 
# для пользователя необходимо отображать количество скачанных процентов, чтобы он понимал, успеет ли заварить чай, 
# прежде чем завершится процесс. Каждое обновление игры требует разного количества мегабайт, 
# при этом у разных игроков разная скорость интернет-соединения.

# Напишите программу, принимающую на вход размер файла обновления в мегабайтах и скорость интернет-соединения в мегабайтах в секунду.
#  Для каждой секунды программа должна рассчитывать и выводить на экран процент скачанного объёма до тех пор, 
# пока скачивание не завершится. В конце программа должна показать, сколько секунд заняло скачивание обновления. 
# Обеспечьте контроль ввода.

# Пример:

# Укажите размер файла для скачивания: 123

# Какова скорость вашего соединения: 27

# Прошло 1 сек. Скачано 27 из 123 Мб (22%)

# Прошло 2 сек. Скачано 54 из 123 Мб (44%)

# Прошло 3 сек. Скачано 81 из 123 Мб (66%)

# Прошло 4 сек. Скачано 108 из 123 Мб (88%)

# Прошло 5 сек. Скачано 123 из 123 Мб (100%)

import math

# Ввод данных от пользователя
file_size = float(input("Укажите размер файла для скачивания (Мб): "))
download_speed = float(input("Какова скорость вашего соединения (Мб/с): "))

# Инициализация переменных
downloaded = 0.0
seconds = 0

# Симуляция процесса скачивания
while downloaded < file_size:
    seconds += 1
    downloaded += download_speed
    
    # Ограничиваем скаченный объём, чтобы не превысить размер файла
    if downloaded > file_size:
        downloaded = file_size

    # Рассчёт процента скачанного файла
    percent = (downloaded / file_size) * 100

    # Вывод информации о процессе скачивания
    print(f"Прошло {seconds} сек. Скачано {math.ceil(downloaded)} из {file_size} Мб ({math.ceil(percent)}%)")

# Вывод общего времени скачивания
print(f"Скачивание завершено за {seconds} секунд.")


# Задача 4. Первая цифра
# Что нужно сделать
# Дано положительное действительное число X. Выведите его первую цифру после десятичной точки. 
# При решении этой задачи нельзя пользоваться условной инструкцией, циклом или строками.



# Пример:

# Введите число: 123.456

# Первая цифра после десятичной точки: 4
# Ввод числа от пользователя
x = float(input("Введите число: "))

# Отделяем дробную часть числа
fractional_part = x % 1  # это даст нам только дробную часть числа

# Умножаем дробную часть на 10 и берём целую часть
first_digit = int(fractional_part * 10)

# Вывод результата
print("Первая цифра после десятичной точки:", first_digit)

# Задача 5. Вот это объёмы!
# Что нужно сделать
# Для курсовой работы по физике Андрею нужно сравнить объёмы двух планет: 
# Земли и теоретически возможной для нашей вселенной планеты. Андрей хорошо разбирается в формулах,
#  но плохо считает. Объём Земли ему известен — это 1.08321 * 10 ** 12 км3.

# Объём теоретически возможной планеты ему нужно посчитать. У него есть формула:

# ‌   
# ‌

# В ней V — это объём, π — число пи, а R — радиус планеты.

# Напишите программу, которая получает на вход радиус случайной планеты и выводит на экран,
#  во сколько раз планета Земля меньше или больше теоретически возможной планеты по объёму. 
# Ответ округлите до трёх знаков после запятой.

# Пример 1:

# Введите радиус случайной планеты: 3389.5

# Объём планеты Земля больше в 6.641 раз

# Пример 2:

# Введите радиус теоретически возможной планеты: 7000

# Объём планеты Земля меньше в (1/0.754) = 1.326 раз


import math

# Объём Земли
volume_earth = 1.08321 * 10**12

# Ввод радиуса теоретически возможной планеты
radius_planet = float(input("Введите радиус теоретически возможной планеты (в километрах): "))

# Вычисляем объём теоретической планеты по формуле
volume_planet = (4/3) * math.pi * radius_planet ** 3

# Сравниваем объёмы
if volume_earth > volume_planet:
    ratio = volume_earth / volume_planet
    print(f"Объём планеты Земля больше в {round(ratio, 3)} раз")
else:
    ratio = volume_planet / volume_earth
    print(f"Объём планеты Земля меньше в {round(ratio, 3)} раз")

# Задача 6. Ход конём
# Что нужно сделать
# В рамках разработки шахматного ИИ стоит новая задача: по заданным вещественным координатам коня и точки программа должна определить,
#  может ли конь ходить в эту точку. Используйте как можно меньше конструкций if и логических операторов. Обеспечьте контроль ввода.

# Пример:

# Введите местоположение коня:

# 0.071

# 0.118

# Введите местоположение точки на доске:

# 0.213

# 0.068

# Конь в клетке (0, 1). Точка в клетке (2, 0).

# Да, конь может ходить в эту точку.

# Функция для получения координат клетки на доске (округляем вещественные числа)
def get_board_position(coord):
    return int(coord * 10)

# Ввод местоположения коня
knight_x = float(input("Введите местоположение коня по оси X: "))
knight_y = float(input("Введите местоположение коня по оси Y: "))

# Ввод местоположения целевой точки
target_x = float(input("Введите местоположение точки по оси X: "))
target_y = float(input("Введите местоположение точки по оси Y: "))

# Переводим координаты в шахматные клетки
knight_pos_x = get_board_position(knight_x)
knight_pos_y = get_board_position(knight_y)

target_pos_x = get_board_position(target_x)
target_pos_y = get_board_position(target_y)

# Вывод координат клетки
print(f"Конь в клетке ({knight_pos_x}, {knight_pos_y}). Точка в клетке ({target_pos_x}, {target_pos_y}).")

# Разница по осям
dx = abs(target_pos_x - knight_pos_x)
dy = abs(target_pos_y - knight_pos_y)

# Проверка хода коня: одна из разниц должна быть 2, другая — 1
can_knight_move = (dx == 2 and dy == 1) or (dx == 1 and dy == 2)

# Вывод результата
if can_knight_move:
    print("Да, конь может ходить в эту точку.")
else:
    print("Нет, конь не может ходить в эту точку.")

# Задача 7. За что?
# Что нужно сделать
# Вы встретились со старым другом, который тоже изучает программирование, но в другом учебном заведении. 
# За чашкой кофе он пожаловался, что их сумасбродный препод дал задание написать программу, 
# которая из двух введённых чисел определяет наибольшее, не используя при этом условные операторы,
#  циклы и встроенные функции вроде max/min/sorted. Радуясь, что на вашем курсе такого не требуют, 
# вы всё-таки решаете помочь другу. Напишите для него программу.

# Пример:

# Введите первое число: 10

# Введите второе число: 5

# Наибольшее число: 10

# Ввод двух чисел от пользователя
x = float(input("Введите первое число: "))
y = float(input("Введите второе число: "))

# Вычисление наибольшего числа без условных операторов
max_number = (x + y + abs(x - y)) / 2

# Вывод результата
print("Наибольшее число:", max_number)

****************************************
# Функция для вывода шахматной доски с точкой в нужной клетке
def draw_board(x_square, y_square):
    for row in range(8):
        for col in range(8):
            # Проверяем, находится ли фигура в этой клетке
            if row == y_square and col == x_square:
                print(' P ', end='')  # Фигура
            else:
                # Черная и белая клетка
                if (row + col) % 2 == 0:
                    print('###', end='')  # Белая клетка
                else:
                    print('   ', end='')  # Черная клетка
        print()  # Перенос на новую строку после каждой линии


# Ввод координат
x = float(input('Расположение по горизонтали (метры): '))
y = float(input('Расположение по вертикали (метры): '))

# Проверка границ доски
if not (0 <= x < 0.8 and 0 <= y < 0.8):
    print('Ошибка: фигура вне границ доски!')
else:
    # Перевод координат в целочисленные значения клеток
    x_square = int(x * 10)  # Для горизонтали
    y_square = int(y * 10)  # Для вертикали

    print(f'Фигура находится в клетке ({x_square}, {y_square})')
    
    # Рисуем доску с отмеченной позицией фигуры
    draw_board(x_square, y_square)

****************************************
#Задача 1. Ставки на спорт
#Нас наняла букмекерская контора, где проводятся ставки на конный спорт. 
#Напишите программу расчёта потенциального выигрыша игрока. 
#Для этого вводится его ставка в рублях и коэффициент (вещественное число),
#а выводится их произведение в качестве потенциального выигрыша.

#Пример:

#Сколько ставим? 1234
#Какой коэффициент? 1.716
#Потенциальный выигрыш: 2117.544

#Усложнение задачи: сделайте так, чтобы после точки выводилось не больше двух цифр.

bet = int(input('Сколько ставим? '))
coff = float(input('Какой коэффицент? '))

win = round(bet * coff, 2)

print(f'Выигрышь: {win}')

#Задача 2. День рождения
#В честь дня рождения сына отец не придумал ничего лучше, кроме как подарить денег. Зато он придумал хоть и странную, 
#но интересную формулу, по которой высчитывается сколько он подарит: возраст сына умножается на 1.5 и на его температуру тела.
#Остаётся только позавидовать такой фантазии.

#Напишите программу, которая запрашивает у пользователя возраст (целое число) и температуру тела (вещественное число) 
#и в результате выводит сколько отец подарит сыну денег на день рождения.

age = int(input('Введите возраст: '))
temp = float(input('Введите температуру тела:'))

money = age * 1.5 * temp
print(f'Денег получено: {money}')

#Задача 3. Индекс массы тела
#Алексей работает диетологом в частной клинике, каждый день он принимает пациентов разных возрастов и с разными показателями роста 
#(в метрах) и веса (в кг). Для каждого человека ему нужно считать индекс массы тела - это вес поделить на рост в квадрате.
#По государственным стандартам индекс округляется до двух знаков после точки. Затем по этому индексу определяется, 
#всё ли в порядке у человека с массой тела: если до 18.5, то недобор; до 25 - всё нормально, до 30 уже идёт избыток, 
#а после 30 - ожирение. Напишите такую программу для Алексея.

#Задача 3. Индекс массы тела
#Алексей работает диетологом в частной клинике, каждый день он принимает пациентов разных возрастов и с разными показателями роста 
#(в метрах) и веса (в кг). Для каждого человека ему нужно считать индекс массы тела - это вес поделить на рост в квадрате.
#По государственным стандартам индекс округляется до двух знаков после точки. Затем по этому индексу определяется, 
#всё ли в порядке у человека с массой тела: если до 18.5, то недобор; до 25 - всё нормально, до 30 уже идёт избыток, 
#а после 30 - ожирение. Напишите такую программу для Алексея.

height = float(input("Введите рост в метрах: "))
weight = float(input('Введите вес в килограммах: '))

btm = round(weight / (height ** 2),2)
print(f'Разница равна {btm}')

if btm <= 18.5:
    print('Недобор')
elif btm > 18.5 and btm <= 25:
    print('Всё ок')
elif btm > 25 and btm <= 30:
    print('Избыток')
else:
    print('Ожирение')
****************************************

# #Задача 1. Космические рейнджеры
# #В далеком (а может и не очень) будущем на некоторой планете можно купить космический корабль за пол-кредита (CR). 
# #Один CR это 2200 чатлов. Причем чатлы неделимы и являются всегда целым числом. Напишите простую программу-конвертор валют. 
# #В программу вводится количество чатлов, а она сообщает сколько это CR и сколько кораблей можно купить на эту сумму.

# #Пример 1:

# #Сколько чатлов? 3150
# Это 1.4318181818181819 CR
# Можно купить кораблей: 2

# Пример 2:
# Сколько чатлов? 4400
# Это 2.0 CR
# Можно купить кораблей: 4


chatls = float(input('Сколько чатлов? '))
CR = float(chatls) / 2200
print(f'Это {CR} CR')
ships = CR / 0.5
print('Можно купить кораблей:', int(ships))                                                            



# Задача 2. Компьютерное зрение
# Вы участвуете в разработке робота, который играет в шахматы на реальной, физической шахматной доске размером 0.8 х 0.8 метра. 
# Робот смотрит камерой на доску и видит расположение фигур в вещественных числах с очень высокой точностью.

# Напишите программу, в которую вводятся вещественные координаты шахматной фигуры, 
# а программа определяет в какой клетке доски находится эта фигура. 
# Каждая клетка доски имеет размер 10х10 см и целочисленные координаты, состоящие из двух чисел. 
# Например левая верхняя клетка имеет целые координаты (0, 0), справа от неё клетка (1, 0) а снизу (0, 1). 
# Также обеспечьте контроль ввода: нельзя выходить за границы доски.

# Пример:

# Введите местоположение фигуры
# По горизонтали: 0.731
# По вертикали: 0.149

# Фигура находится в клетке (7, 1)

# Введите местоположение фигуры
# По горизонтали: 0.833
# По вертикали: -0.132

# Клетки с такой координатой не существует

# Функция для вывода шахматной доски с точкой в нужной клетке
def draw_board(x_square, y_square):
    for row in range(8):
        for col in range(8):
            # Проверяем, находится ли фигура в этой клетке
            if row == y_square and col == x_square:
                print(' P ', end='')  # Фигура
            else:
                # Черная и белая клетка
                if (row + col) % 2 == 0:
                    print('###', end='')  # Белая клетка
                else:
                    print('   ', end='')  # Черная клетка
        print()  # Перенос на новую строку после каждой линии


# Ввод координат
x = float(input('Расположение по горизонтали (метры): '))
y = float(input('Расположение по вертикали (метры): '))

# Проверка границ доски
if not (0 <= x < 0.8 and 0 <= y < 0.8):
    print('Ошибка: фигура вне границ доски!')
else:
    # Перевод координат в целочисленные значения клеток
    x_square = int(x * 10)  # Для горизонтали
    y_square = int(y * 10)  # Для вертикали

    print(f'Фигура находится в клетке ({x_square}, {y_square})')
    
    # Рисуем доску с отмеченной позицией фигуры
    draw_board(x_square, y_square)


# Задача 3. Точность и аккуратность
# Робот из задачи “Компьютерное зрение” правильно определяет на какой клетке стоят фигуры. Но вот беда, 
# часто по вине соперника-человека фигуры стоят на доске не ровно по центру клетки, а со смещением.
# Если во время игры такое смещение станет слишком велико, то станет непонятно в какой клетке стояла фигура. 
# Чтобы избежать этой ситуации нужно чтобы робот поправлял фигуры на доске, выставляя их по центру клетки. 
# Модифицируйте программу “Компьютерное зрение” так, чтобы она выдавала не только номера клетки, 
# в которой находится фигура но и две вещественных поправки: на сколько нужно подвинуть фигуру по горизонтали и вертикали 
# для того чтобы она оказалась по центру своей клетки.

# Пример:

# Введите местоположение фигуры
# По горизонтали: 0.731
# По вертикали: 0.167
# Фигура находится в клетке (7, 1)
# Поправьте положение фигуры на (0.019, -0.017)

# Функция для вывода шахматной доски с точкой в нужной клетке
def draw_board(x_square, y_square):
    for row in range(8):
        for col in range(8):
            # Проверяем, находится ли фигура в этой клетке
            if row == y_square and col == x_square:
                print(' P ', end='')  # Фигура
            else:
                # Черная и белая клетка
                if (row + col) % 2 == 0:
                    print('###', end='')  # Белая клетка
                else:
                    print('   ', end='')  # Черная клетка
        print()  # Перенос на новую строку после каждой линии


# Ввод координат
x_coord = float(input("По горизонтали (метры): "))
y_coord = float(input("По вертикали (метры): "))

# Проверка границ доски
if 0 <= x_coord < 0.8 and 0 <= y_coord < 0.8:
    # Перевод координат в целочисленные значения клеток
    x_number = int(x_coord * 10)  # Для горизонтали
    y_number = int(y_coord * 10)  # Для вертикали

    # Вывод номера клетки
    print("Фигура находится в клетке (", x_number, ",", y_number, ")")
    
    # Центр клетки
    center_x = x_number / 10 + 0.05
    center_y = y_number / 10 + 0.05
    
    # Вычисление поправки
    delta_x = round(center_x - x_coord, 3)
    delta_y = round(center_y - y_coord, 3)
    
    # Вывод поправки
    print("Поправьте положение фигуры на (", delta_x, ",", delta_y, ")")

    # Рисуем доску с отмеченной позицией фигуры
    draw_board(x_number, y_number)
else:
    print("Клетки с такой координатой не существует")

****************************************
# Задача 1. Герон
# Существует, так называемая, формула Герона, позволяющая вычислить площадь треугольника, зная длины его сторон.

# S= √ (p * (p - a)*(p - b)*(p - c)) ,где

# S - площадь;
# p - полупериметр треугольника (a+b+c)/2;
# a,b,c - длины сторон треугольника.

# Напишите программу, которая принимает на вход длины сторон треугольника и выводит его площадь

import math

# Вводим длины сторон треугольника
a = float(input("Введите длину стороны a: "))
b = float(input("Введите длину стороны b: "))
c = float(input("Введите длину стороны c: "))

# Полупериметр
p = (a + b + c) / 2

# Формула Герона для площади
S = math.sqrt(p * (p - a) * (p - b) * (p - c))

# Вывод результата
print(f"Площадь треугольника: {S}")



# Задача 2. Игра
# Вам предстоит создать 2D-игру (вид сверху, игрок двигается в двух плоскостях).

# Начнём с управления персонажем: получаем от игрока пройденное расстояние и угол, 
# по которому двигался персонаж. Зная эту информацию, нужно изменить текущие координаты (0, 0) на новые (х, у).
#  Чтобы это сделать, требуется узнать, какое расстояние персонаж преодолеет по горизонтали (по оси Х, x = расстояние × косинус угла)
#  и по вертикали (по оси У, y = расстояние × синус угла).

# Напишите программу, которая получает на вход расстояние и угол поворота. Выведите координаты нового местоположения персонажа.

import math

# Вводим расстояние и угол
distance = float(input("Введите пройденное расстояние: "))
angle = float(input("Введите угол поворота (в градусах): "))

# Переводим угол из градусов в радианы, потому что math.sin и math.cos работают с радианами
angle_radians = math.radians(angle)

# Вычисляем координаты
x = distance * math.cos(angle_radians)
y = distance * math.sin(angle_radians)

# Выводим результат
print(f"Новые координаты персонажа: x = {x}, y = {y}")


# Задача 3. Мега-калькулятор
# Кеша учится в третьем классе, и уже умеет программировать на питоне. Как и многие его одноклассники, 
# он очень любит сразу применять все полученные знания на практике. Вчера Кеша узнал про модуль math и его основные возможности,
#  поэтому решил написать мега-калькулятор, который бы применял сразу все функции к введенному пользователем числу. 
# Чтобы ничего не забыть, он пользуется шпаргалкой, которую прикрепили к уроку

# Напишите программу, которая получает от пользователя вещественное число,
#  по очереди применяет к нему функции модуля Math и выводит результат:

# округляет вниз
# округляет вверх
# берет модуль числа
# извлекает квадратный корень
# возводит экспоненту в степень, равную числу
# считает натуральный логарифм числа
# считает логарифм числа по основанию 2
# считает логарифм числа по основанию 10
# считает синус и косинус числа
# И так как Кеша самый умный в классе, он решил попробовать посчитать факториал числа. Для этого ему пришлось придумать и реализовать контроль ввода: факториал вычисляется, только если введенное число было натуральным.

import math

# Ввод числа
num = float(input("Введите вещественное число: "))

# Применяем все функции из модуля math
print(f"Округление вниз: {math.floor(num)}")
print(f"Округление вверх: {math.ceil(num)}")
print(f"Модуль числа: {abs(num)}")

# Для квадратного корня проверяем, что число не отрицательное
if num >= 0:
    print(f"Квадратный корень: {math.sqrt(num)}")
else:
    print("Квадратный корень: нельзя извлечь из отрицательного числа")

print(f"Экспонента в степени числа: {math.exp(num)}")

# Логарифмы и контроль на положительное число
if num > 0:
    print(f"Натуральный логарифм: {math.log(num)}")
    print(f"Логарифм по основанию 2: {math.log2(num)}")
    print(f"Логарифм по основанию 10: {math.log10(num)}")
else:
    print("Логарифмы не могут быть вычислены для неположительных чисел")

# Синус и косинус
print(f"Синус числа: {math.sin(num)}")
print(f"Косинус числа: {math.cos(num)}")

# Факториал только для натуральных чисел
if num >= 0 and num.is_integer():
    print(f"Факториал: {math.factorial(int(num))}")
else:
    print("Факториал может быть вычислен только для натуральных чисел")

****************************************
print('Задача 1. Сумма чисел')

# Напишите функцию summa_n,
# которая принимает одно целое положительное число N
# и выводит сумму всех чисел от 1 до N включительно.
#
# Пример работы программы:
# Введите число: 5
#
# Я знаю, что сумма чисел от 1 до 5 равна 15


def calculate_and_output_sum_numbers(numbers):
  summ = 0
  for number in range(1, numbers + 1):
    summ += number
  print("Я знаю, что сумма чисел от 1 до", numbers, "равна", summ)


user_number = int(input("Введите число "))
calculate_and_output_sum_numbers(user_number)


print('Задача 2. Функция в функции')

# Евгений проходит специальный тест по программированию.
# У него всё шло хорошо, пока он не наткнулся на тему “Функции”.
#
# Задание звучит так:
# Основная ветка программы, не считая заголовков функций, состоит из одной строки кода.
#
# Это вызов функции test().
# В ней запрашивается на ввод целое число.
# Если оно положительное, то вызывается функция positive(),
# тело которой содержит команду вывода на экран слова "Положительное".
#
# Если число отрицательное, то вызывается функция negative(),
# ее тело содержит выражение вывода на экран слова "Отрицательное".
#
# Помогите Евгению и реализуйте такую программ


def positive_digit():
  print('Положительное')


def negative_digit():
  print('Отрицательное')


def classify_number(number):
  if number > 0:
    positive_digit()
  elif number < 0:
    negative_digit()
  else:
    print('Ноль')


user_input = int(input('Введите число: '))
classify_number(user_input)



print('Задача 3. Апгрейд калькулятора')

# Степан использует калькулятор для расчёта суммы и разности чисел, но на работе ему требуются не только обычные арифметические действия.
# Он ничего не хочет делать вручную, поэтому решил немного расширить функционал калькулятора.

# Напишите программу, запрашивающую у пользователя число и действие, которое нужно сделать с числом: вывести сумму его цифр, максимальную или минимальную цифру.

#Каждое действие оформите в виде отдельной функции, а основную программу зациклите.

# Запрошенные числа должны передаваться в функции суммы, максимума и минимума при помощи аргументов.


def calculate_sum(num):
  """Считает сумму цифр числа"""
  return sum(int(digit) for digit in str(num))


def find_max_digit(num):
  """Находит максимальную цифру в числе"""
  return max(int(digit) for digit in str(num))


def find_min_digit(num):
  """Находит минимальную цифру в числе"""
  return min(int(digit) for digit in str(num))


while True:
  user_input = input('Введите число (или "exit" для выхода): ')

  if user_input.lower() == 'exit':
    print('Выход из программы.')
    break

  if not user_input.isdigit():
    print('Пожалуйста, введите целое положительное число.')
    continue

  number_input = int(user_input)

  action_choice = input(
    'Выберите действие 1 - сумма цифр, 2 - максимальная цифра, 3 - минимальная цифра: '
  )

  if action_choice == '1':
    result = calculate_sum(number_input)
    print(f'Сумма цифр числа {number_input} = {result}')
  elif action_choice == '2':
    result = find_max_digit(number_input)
    print(f'Максимальная цифра в числе {number_input} = {result}')
  elif action_choice == '3':
    result = find_min_digit(number_input)
    print(f'Минимальная цифра в числе {number_input} = {result}')
  else:
    print('Некорректный выбор действия. Пожалуйста, выберите 1, 2 или 3.')


print('Задача 4. Число наоборот')

# Вводится последовательность чисел,
# которая оканчивается нулём.
#
# Реализуйте функцию,
# которая принимает в качестве аргумента каждое число,
# переворачивает его и выводит на экран.

# Пример:
# Введите число: 1234
# Число наоборот: 4321
#
# Введите число: 1000
# Число наоборот: 0001
#
# Введите число: 0
# Программа завершена!
#
# Дополнительно: добейтесь такого вывода чисел, если в его начале идут нули.
#
# Введите число: 1230
# Число наоборот: 321
#
# Кстати, нули, которые мы убрали, называются ведущими.


def reverse_number_recursive(number, reversed_number=0):
  if number == 0:
    return reversed_number
  return reverse_number_recursive(number // 10,
                                  reversed_number * 10 + number % 10)


while True:
  value = int(input('Введите число (0 для выхода): '))

  if value == 0:
    print('Программа завершена!')
    break

  reversed_number = reverse_number_recursive(value)
  print(f'Число наоборот: {reversed_number}')



print('Задача 5. Текстовый редактор')

# Мы продолжаем разрабатывать новый текстовый редактор,
# и в этот раз нам поручили написать для него код,
# который считает количество любой буквы
# и любой цифры в тексте (а не только буквы Ы как раньше).
#
# Напишите функцию count_letters,
# которая принимает на вход текст и подсчитывает,
# какое в нём количество цифр K и букв N.
#
# Функция должна вывести на экран информацию
# о найденных буквах и цифрах в определенном формате.
#
# Пример:
# Введите текст: 100 лет в обед
# Какую цифру ищем? 0
# Какую букву ищём? л
#
# Количество цифр 0: 2
# Количество букв л: 1


def count_symbols(text, letter, digit):
  count_letter = 0
  count_digit = 0

  for char in text:
    if char == letter:
      count_letter += 1
    if char == digit:
      count_digit += 1

  print(f'Количество букв "{letter}": {count_letter}')
  print(f'Количество цифр "{digit}": {count_digit}')


user_text = input('Введите текст: ')
letter_find = input('Какую букву ищем? ')
digit_find = input('Какую цифру ищем? ')


count_symbols(user_text, letter_find, digit_find)



print('Задача 6. НОД')

#Напишите функцию, вычисляющую наибольший общий делитель двух чисел


def calculate_gcd(first_number, second_number):
  while second_number != 0:
    first_number, second_number = second_number, first_number % second_number
  return first_number


first_num = int(input('Введите первое число: '))
second_num = int(input('Введите второе число: '))

result = calculate_gcd(first_num, second_num)
print(
  f'Наибольший общий делитель ({first_num}, {second_num}) = {result}')



print('Задача 7. Недоделка')

# Вы пришли на работу в контору по разработке игр,
# целевая аудитория которых - дети и их родители.
#
# У прошлого программиста было задание
# сделать две игры в одном приложении, чтобы пользователь мог выбирать одну из них.
#
# Однако программист, на место которого вы пришл
# и, перед увольнением не успел сделать эту задачу и оставил только небольшой шаблон проекта.
#
# Используя этот шаблон,
# реализуйте игры «Камень, ножницы, бумага» и «Угадай число».
#
# Правила игры «Камень, ножницы, бумага»:
# программа запрашивает у пользователя строку
# и выводит победил он или проиграл.
#
# Камень бьёт ножницы, ножницы режут бумагу, бумага кроет камень.
#
# Правила игры “Угадай число”:
# программа запрашивает у пользователя число до тех пор, пока он его не отгадает.


def rock_paper_scissors():
    current_choice = 1

    while True:
        user_choice = input(
            'Выберите: камень, ножницы или бумага (или введите "стоп" для выхода): '
        ).capitalize()

        if user_choice == 'Стоп' or user_choice == 'Выход':
            print('Игра завершена!')
            break

        if user_choice != 'Камень' and user_choice != 'Ножницы' and user_choice != 'Бумага':
            print('Некорректный выбор, попробуйте снова.')
            continue

        if current_choice == 1:
            computer_choice = "Камень"
            current_choice = 2
        elif current_choice == 2:
            computer_choice = "Ножницы"
            current_choice = 3
        elif current_choice == 3:
            computer_choice = "Бумага"
            current_choice = 1

        print(f"Компьютер выбрал: {computer_choice}")

        if user_choice == computer_choice:
            print('Ничья!')
        elif (user_choice == 'Камень' and computer_choice == 'Ножницы') or \
             (user_choice == 'Ножницы' and computer_choice == 'Бумага') or \
             (user_choice == 'Бумага' and computer_choice == 'Камень'):
            print('Ты выиграл!')
        else:
            print('Ты проиграл!')


def guess_the_number():
    computer_number = 123

    while True:
        try:
            user_guess = int(
                input('Угадайте число! (или введите 0 для выхода): '))
        except ValueError:
            print('Пожалуйста, введите число.')
            continue

        if user_guess == 0:
            print('Игра завершена!')
            break
        elif user_guess == computer_number:
            print('Вы выиграли!')
            break
        else:
            print('Неправильно, попробуйте ещё раз.')


def main_menu():
    while True:
        try:
            user_choice = int(
                input(
                    'Выберите игру: 1 - Камень, ножницы, бумага.\n2 - Угадай число.\n3 - Выйти.\n'
                ))
        except ValueError:
            print('Пожалуйста, выберите 1, 2 или 3.')
            continue

        if user_choice == 1:
            rock_paper_scissors()
        elif user_choice == 2:
            guess_the_number()
        elif user_choice == 3:
            print('Выход из игры.')
            break
        else:
            print('Некорректный выбор, попробуйте снова.')


main_menu()

****************************************
def reverse_number_recursive(number, reversed_number=0):
  if number == 0:
    return reversed_number
  return reverse_number_recursive(number // 10, reversed_number * 10 + number % 10)


while True:
  value = int(input('Введите число (0 для выхода): '))

  if value == 0:
    print('Программа завершена!')
    break

  reversed_number = reverse_number_recursive(value)
  print(f'Число наоборот: {reversed_number}')

****************************************

# Задача 1. Робот
# В одном отеле для эксперимента на вход хотят поставить робота, который будет спрашивать у прохожих, 
# не желают ли они зайти. При ответе «Да» робот должен приветствовать человека и пустить в отель. 
# Для робота написали вот такую программу с использованием функции:
count = 0

def greeting():
    print('Привет!')
    print('Добро пожаловать!')

while True:
    response = input('Зайдёте? Да/Нет: ')
    
    if response == 'Да':
        greeting()
        count += 1
    elif response == 'Нет':
        print('Следующий.\n')
        count += 1
    else:
        print('Пожалуйста, ответьте "Да" или "Нет".')
    
    if count == 10:
        print("Робот устал. Сеанс завершён.")
        break
# Однако программист очень торопился и допустил несколько ошибок.

# Скопируйте программу в реплит, найдите и исправьте ошибки. Убедитесь, что программа работает корректно.

 

# Пример результата:

# Зайдёте? Да/Нет: Да

# Привет!

# Добро пожаловать!

# Следующий.


# Зайдёте? Да/Нет: Да

# Привет!

# Добро пожаловать!

# Следующий.


# Зайдёте? Да/Нет: Нет

# Следующий.


# Зайдёте? Да/Нет: ...



# Задача 2. Провизия
# Одна государственная компания поставляет еду на разные труднодоступные базы (полярные, горные и так далее) в разных уголках страны. 
# В компании для удобства расчёта количества еды была реализована такая программа:


def food_count():
    a = int(input())
    b = int(input())
    print("Всего", a+b, "шт.")

print("Сколько мешков рыбы и мяса?")

food_count()

print("Сколько буханок белого и чёрного хлеба?")

food_count()

print("Сколько вёдер воды и молока?")

food_count()

# Скопируйте программу в реплит и модифицируйте её: напишите функцию, которая заменит повторяющийся код внутри основной программы.



# Задача 3. Почта
# Василий пришёл получать посылку на почту. Разумеется, в почтовом извещении ему нужно было написать свои фамилию,
# имя и адрес проживания, чтобы кто-нибудь не получил посылку за него, например члены его семьи (а им бы хотелось!).

# Напишите функцию для вывода фамилии, имени и адреса для конкретного члена семьи. Выведите информацию о нём три раза (без цикла).

def post_identity():
    print('\nФамилия: Иванов')
    print('\nИмя: Василий')
    print('\nУлица: Пушкина')
    print('\nДом: Колотушкина')


post_identity()
post_identity()
post_identity()

# Пример результата:

# Фамилия: Иванов

# Имя: Василий

# Улица: Пушкина

# Дом: 32


# Фамилия: Иванов

# Имя: Василий

# Улица: Пушкина

# Дом: 32


# Фамилия: Иванов

# Имя: Василий

# Улица: Пушкина

# Дом: 32
****************************************
# Задача 1. Вода
# Одна бутылка воды «КлирВотер» от производителя «ВодЗавод» в разных магазинах стоит по-разному.

# Напишите программу, которая три раза вызывает функцию about_water, 
# передаёт в неё один аргумент — цену на воду и выводит на экран название воды, производителя и цену.

water_price = int(input('Введите цену на воду'))

def about_water(water_price):
    print('\nНазвание: КлирВотер')
    print('\nПроизводитель: ВодаЗавод')
    print(f'\nЦена: {water_price}')


about_water(water_price)

def about_water(price):
    print('\nНазвание: КлирВотер')
    print('Производитель: ВодЗавод')
    print(f'Цена: {price}')

# Ввод разных цен на воду
price1 = int(input('Введите цену на воду 1: '))
price2 = int(input('Введите цену на воду 2: '))
price3 = int(input('Введите цену на воду 3: '))

# Три вызова функции с разными ценами
about_water(price1)
about_water(price2)
about_water(price3)
# Пример:

# Название: КлирВотер

# Производитель: ВодЗавод

# Цена: 25


# Название: КлирВотер

# Производитель: ВодЗавод

# Цена: 30


# Название: КлирВотер

# Производитель: ВодЗавод

# Цена: 40



# Задача 2. Вот это объёмы 2
# Андрей продолжает писать курсовую работу по физике, и теперь ему нужно находить не только объём планеты, но и её площадь. 
# Для этого он использует две такие формулы:


# Формула для площади сферы:

# ‌
# ‌


# Формула для объёма шара:

# ‌
# ‌

# Так как в самом курсовом проекте эти формулы пригодятся ещё не раз, Андрей решил поступить рационально и просто написать функцию для каждой формулы.

# Напишите программу, которая на вход получает от пользователя радиус планеты (вещественное число) 
# и вызывает функции sphere_area и sphereVolume. Реализуйте эти функции: первая считает и выводит на экран площадь сферы, 
# вторая — объём шара.

R = float(input('Введите радиус планеты: '))

def S(R):
    N = (4 * 3.15) * (R ** 2)

def N (R):
    V = (4 / 3 * 3.15) * (R ** 3)

N(R)

S(R)


# Задача 3. Простые числа
# Пользователь вводит число N — количество чисел в последовательности. Напишите функцию  is_prime, которая проверяет, 
# является ли число простым и выводит ответ в консоль.



def is_prime(number):
    if number < 2:
        return False
    for i in range(2, int(number ** 0.5) + 1):  # Проверяем делители до корня числа
        if number % i == 0:
            return False
    return True

N = int(input('Введите количество чисел в последовательности: '))

for _ in range(N):
    num = int(input('Введите число: '))
    if is_prime(num):
        print(f'Число {num} простое.')
    else:
        print(f'Число {num} не является простым.')

****************************************
# Задача 1. Среднее арифметическое
# Программа получает от пользователя два числа — a и b. Реализуйте функцию, которая принимает на вход числа a и b, 
# считает и выводит в консоль среднее арифметическое всех чисел из отрезка [a; b]. Обеспечьте контроль ввода: не забывайте, 
# что а всегда должно быть меньше, чем b.

a = int(input('Введите число : '))
b = int(input('Введите число : '))
n = 0
count = 0

for i in range (a, b + 1):
 n += i
 count += 1

avg = n / count
print(f'Среднее {avg}')
# Пример:

# Введите левую границу: 3

# Введите правую границу: 8

# Среднее: 5.5


# Усложнение: сделайте это без использования циклов.



# Задача 2. Почта 2
# На почте немного поменялись правила: теперь в почтовом извещении нужно указывать фамилию, имя, страну проживания, город, улицу, 
# номер дома и номер квартиры.

# Реализуйте функцию, которая получает все эти данные и выводит на экран. 
# В программе вызовите функцию три раза с разными значениями аргументов.


# Подсказка: семь аргументов.

def print_all_info_hard(surname, name, country, city, street, house, flat):
    print(f"Фамилия: {surname}\n"
          f"Имя: {name}\n"
          f"Страна проживания: {country}\n"
          f"Город: {city}\n"
          f"Улица: {street}\n"
          f"Номер дома: {house}\n"
          f"Номер квартиры: {flat}")


user_surname = input("Введите фамилию: ")
user_name = input("Введите имя: ")
user_street = input("Введите улицу: ")
user_house = input("Введите номер дома: ")

for _ in range(3):
    user_surname = input("Введите фамилию: ")
    user_name = input("Введите имя: ")
    user_country = input("Введите страну проживания: ")
    user_city = input("Введите город: ")
    user_street = input("Введите улицу: ")
    user_house = input("Введите номер дома: ")
    user_flat = input("Введите номер квартиры: ")

    print_all_info_hard(user_surname, user_name, user_country, user_city, user_street, user_house, user_flat)


# Задача 3. GPS-навигатор 2.0
# Нам поручили усовершенствовать GPS-навигатор, добавив в него новую фишку. 
# Теперь пользователь может не только смотреть расстояние от себя до объекта, 
# но и задавать в навигаторе две произвольные точки, после чего на экран ему выводится расстояние между ними.
#  Для этого пользователь вводит четыре действительных числа x1, y1, x2, y2 — это как раз координаты этих двух точек.

# Напишите программу, где у пользователя спрашивается, чего он хочет — найти расстояние от себя до точки или найти 
# расстояние между двумя произвольными точками, после чего запрашиваются необходимые координаты точек и выводится ответ на экран.

def func(x1, x2, y1, y2):
   if want == 1:
     x3 = x1 - x2
     y3 = y1 - y2
     print(f'Расстояние между точками: {x3}{y3}')
   elif want == 2:
      x_user = input('Введите точку нахождения себя, по оси X: ')
      y_user = input('Введите точку нахождения себя по оси Y: ')
      x4 = x1 - x_user 
      y4 = y1 - y_user
      print(f'Расстояние до точки: {x4}, {y4}')

want = input('Выберите вариант, чего вы хотите,  1/2: ')
x1 = int(input('Введите координаты: '))
x2 = int(input('Введите координаты: '))
y1 = int(input('Введите координаты: '))
y2 = int(input('Введите координаты: '))

func(x1, x2, y1, y2)
****************************************
print('Задача 1. Урок информатики 2')


# В прошлый раз учитель написал программу,
# которая выводит числа в формате плавающей точки, однако он вспомнил,
# что не учёл одну важную штуку: числа-то могут идти от нуля.
# 
# Задано положительное число x (x > 0).
# Ваша задача преобразовать его в формат плавающей точки,
# то есть x = a * 10 ** b, где 1 ≤ а < 10
# 
# Обратите внимание, что x теперь больше нуля, а не больше единицы.
# Обеспечьте контроль ввода.
# 
# Пример 1:
# 
# Введите число: 92345
# 
# Формат плавающей точки: x = 9.2345 * 10 ** 4
# 
# Пример 2:
# 
# Введите число: 0.0012
# Формат плавающей точки: x = 1.2 * 10 ** -3

print('Задача 1. Урок информатики 2')

# В прошлый раз учитель написал программу,
# которая выводит числа в формате плавающей точки, однако он вспомнил,
# что не учёл одну важную штуку: числа-то могут идти от нуля.
# 
# Задано положительное число x (x > 0).
# Ваша задача преобразовать его в формат плавающей точки,
# то есть x = a * 10 ** b, где 1 ≤ а < 10
# 
# Обратите внимание, что x теперь больше нуля, а не больше единицы.
# Обеспечьте контроль ввода.
# 
# Пример 1:
# 
# Введите число: 92345
# 
# Формат плавающей точки: x = 9.2345 * 10 ** 4
# 
# Пример 2:
# 
# Введите число: 0.0012
# Формат плавающей точки: x = 1.2 * 10 ** -3

def get_positive_float():
    while True:
        user_input = float(input("Введите положительное число: "))
        if user_input <= 0:
            print("Число должно быть больше нуля. Попробуйте снова.")
            continue
        break


    mantissa = user_input
    exponent = 0
    if user_input < 1:
        while mantissa < 1:
            mantissa *= 10
            exponent -= 1
    else:
        while mantissa >= 10:
            mantissa /= 10
            exponent += 1

    print(f"Формат плавающей точки: x = {mantissa} * 10 ** {exponent}")


get_positive_float()




print('Задача 2. Функция максимума')

# Юра пишет различные полезные функции для Python, чтобы остальным программистам стало проще работать. Он захотел написать функцию, 
# которая будет находить максимум из перечисленных чисел. Функция для нахождения максимума из двух чисел у него уже есть. 
# Юра задумался: может быть, её можно как-то использовать для нахождения максимума уже от трёх чисел?

# Помогите Юре написать программу, которая находит максимум из трёх чисел.
# Для этого используйте только функцию нахождения максимума из двух чисел.

# По итогу в программе должны быть реализованы две функции:
# 1) maximum_of_two — функция принимает два числа и возвращает одно (наибольшее из двух);
# 2) maximum_of_three — функция принимает три числа и возвращает одно (наибольшее из трёх); 
# при этом она должна использовать для сравнений первую функцию maximum_of_two.


def get_maximum_of_two(first_number, second_number):
    """Возвращает максимум из двух чисел."""
    if first_number > second_number:
        return first_number
    else:
        return second_number


def get_maximum_of_three(first_number, second_number, third_number):
    """Возвращает максимум из трех чисел, используя get_maximum_of_two."""
    max_of_first_two = get_maximum_of_two(first_number, second_number)
    if max_of_first_two > third_number:
        return max_of_first_two
    else:
        return third_number


number1 = float(input("Введите первое число: "))
number2 = float(input("Введите второе число: "))
number3 = float(input("Введите третье число: "))


maximum_value = get_maximum_of_three(number1, number2, number3)
print(f"Максимальное число: {maximum_value}")



print('Задача 3. Число наоборот 2')


# Пользователь вводит два числа — N и K.
# Напишите программу,
# которая заменяет каждое число на число,
# которое получается из исходного записью его цифр в обратном порядке,
# затем складывает их,
# снова переворачивает и выводит ответ на экран.

# Пример: 

# Введите первое число: 102
# Введите второе число: 123
 
 
# Первое число наоборот: 201
# Второе число наоборот: 321
 
# Сумма: 522
# Сумма наоборот: 225

def reverse_number(num):
    """Возвращает число с перевернутыми цифрами."""
    return int(str(num)[::-1])

# Ввод чисел от пользователя
number_n = int(input("Введите первое число: "))
number_k = int(input("Введите второе число: "))

# Переворот чисел
reversed_n = reverse_number(number_n)
reversed_k = reverse_number(number_k)

# Сложение
sum_of_reversed = reversed_n + reversed_k

# Переворот суммы
reversed_sum = reverse_number(sum_of_reversed)

# Вывод результатов
print(f"Первое число наоборот: {reversed_n}")
print(f"Второе число наоборот: {reversed_k}")
print(f"Сумма: {sum_of_reversed}")
print(f"Сумма наоборот: {reversed_sum}")


print('Задача 4. Недоделка 2')

# Вы всё так же работаете в конторе по разработке игр и смотрите различные программы прошлого горе-программиста.
#  В одной из игр для детей, связанной с мультяшной работой с числами, вам нужно было написать код согласно следующим условиям:
#  программа получает на вход два числа; в первом числе должно быть не менее трёх цифр, во втором — не менее четырёх, 
# иначе программа выдаёт ошибку. Если всё нормально, то в каждом числе первая и последняя цифры меняются местами,
# а затем выводится их сумма.

# И тут вы натыкаетесь на программу, которая была написана предыдущим программистом и которая как раз решает такую задачу. 
# Однако старший программист попросил вас немного переписать этот код, чтобы он не выглядел так ужасно. 
# Да и вам самим становится, мягко говоря, не по себе от него.

# Постарайтесь разделить логику кода на три отдельные логические части (функции):
# count_numbers — получает число и возвращает количество цифр в числе;
# change_number — получает число, меняет в нём местами первую и последнюю цифры и возвращает изменённое число;
# main — функция ничего не получает на вход, внутри она запрашивает нужные данные от пользователя, 
# выполняет дополнительные проверки и вызывает функции 1 и 2 для выполнения задачи (проверки и изменения двух чисел).

# Разбейте приведённую ниже программу на функции. Повторений кода должно быть как можно меньше.
#  Также сделайте, чтобы в основной части программы был только ввод чисел, затем изменённые числа и вывод их суммы.


def count_numbers(number):
    """Возвращает количество цифр в числе."""
    count = 0
    temp = number
    while temp > 0:
        count += 1
        temp //= 10
    return count

def change_number(number):
    """Меняет местами первую и последнюю цифры числа."""
    num_str = str(number)
    # Изменяем местами первую и последнюю цифры
    if len(num_str) > 1:
        changed_num_str = num_str[-1] + num_str[1:-1] + num_str[0]
        return int(changed_num_str)
    return number  # Если число состоит из одной цифры

def main():
    """Основная функция для выполнения программы."""
    first_number = int(input("Введите первое число (не менее 3 цифр): "))
    first_digit_count = count_numbers(first_number)

    if first_digit_count < 3:
        print("В первом числе меньше трёх цифр.")
        return

    first_number = change_number(first_number)
    print('Изменённое первое число:', first_number)

    second_number = int(input("\nВведите второе число (не менее 4 цифр): "))
    second_digit_count = count_numbers(second_number)

    if second_digit_count < 4:
        print("Во втором числе меньше четырёх цифр.")
        return

    second_number = change_number(second_number)
    print('Изменённое второе число:', second_number)

    print('\nСумма чисел:', first_number + second_number)

# Запуск программы
main()



print('Задача 5. Маятник ')

# Известно, что амплитуда качающегося маятника с каждым разом затухает
# на 8,4% от амплитуды прошлого колебания. 
# Если качнуть маятник,
# то, строго говоря, он не остановится никогда, 
# просто амплитуда будет постоянно уменьшаться до тех пор, 
# пока мы не сочтём такой маятник остановившимся. 
 
# Напишите программу, 
# определяющую, сколько раз качнётся маятник, прежде чем он, по нашему мнению, остановится. 
 
# Программа получает на вход
# начальную амплитуду колебания в сантиметрах 
# и конечную амплитуду его колебаний,
# которая считается остановкой маятника. 

# Обеспечьте контроль ввода.

# Пример:

# Введите начальную амплитуду: 1
# Введите амплитуду остановки: 0.1
 
# Маятник считается остановившимся через 27 колебаний

def count_swinging_amplitudes(initial_amplitude, stopping_amplitude):
    """Определяет количество колебаний маятника до остановки."""
    swing_count = 0
    while initial_amplitude > stopping_amplitude:
        initial_amplitude *= 0.916  # Затухание на 8.4% (0.916 = 1 - 0.084)
        swing_count += 1
    return swing_count

def main():
    """Основная функция для выполнения программы."""
    try:
        initial_amplitude = float(input("Введите начальную амплитуду (см): "))
        stopping_amplitude = float(input("Введите амплитуду остановки (см): "))

        if initial_amplitude <= 0 or stopping_amplitude <= 0:
            print("Амплитуда должна быть положительным числом.")
            return

        if stopping_amplitude >= initial_amplitude:
            print("Амплитуда остановки должна быть меньше начальной амплитуды.")
            return

        swings = count_swinging_amplitudes(initial_amplitude, stopping_amplitude)
        print(f"Маятник считается остановившимся через {swings} колебаний")

    except ValueError:
        print("Ошибка ввода. Пожалуйста, введите числовые значения.")

# Запуск программы
main()


print('Задача 6. Яйца')

# В рамках программы колонизации Марса
# компания «Спейс Инжиниринг» вывела особую породу черепах,
# которые, по задумке, должны размножаться, откладывая яйца в марсианском грунте.
# Откладывать яйца слишком близко к поверхности опасно из-за радиации,
# а слишком глубоко — из-за давления грунта и недостатка кислорода.
# Вообще, факторов очень много,
# но специалисты проделали большую работу и предположили,
# что уровень опасности для черепашьих яиц рассчитывается по формуле
# D = x**3 − 3x**2 − 12x + 10,
# где x — глубина кладки в метрах,
# а D — уровень опасности в условных единицах.
# 
# Для тестирования гипотезы
# нужно взять пробу грунта на безопасной, согласно формуле, глубине.
# 
# Напишите программу,
# находящую такое значение глубины "х", при котором уровень опасности как можно более близок к нулю.
# На вход программе подаётся максимально допустимое отклонение уровня опасности от нуля,
# а программа должна рассчитать приблизительное значение "х",
# удовлетворяющее этому отклонению.
# 
# Известно, что глубина точно больше нуля и меньше четырёх метров.
# 
# Обеспечьте контроль ввода.
# 
# Пример:
# Введите максимально допустимый уровень опасности: 0.01
# 
# Приблизительная глубина безопасной кладки: 0.732421875 м


def find_danger_level(x):
    """Вычисляет уровень опасности по заданной формуле."""
    return x**3 - 3 * x**2 - 12 * x + 10

def find_safe_depth(tolerance):
    """Находит глубину, при которой уровень опасности близок к нулю."""
    low = 0.0
    high = 4.0
    best_x = None

    while low <= high:
        mid = (low + high) / 2
        danger = find_danger_level(mid)

        if abs(danger) <= tolerance:
            best_x = mid
            break  # Нашли глубину с приемлемым уровнем опасности

        # Если уровень опасности больше нуля, ищем в меньшей глубине
        if danger > 0:
            high = mid - 0.001
        else:  # Если уровень опасности меньше нуля, ищем в большей глубине
            low = mid + 0.001
            
        best_x = mid  # Сохраняем последнее значение, если не нашли точное решение

    return best_x

def main():
    """Основная функция для выполнения программы."""
    try:
        tolerance = float(input("Введите максимально допустимый уровень опасности: "))

        if tolerance <= 0:
            print("Допустимый уровень опасности должен быть положительным числом.")
            return

        safe_depth = find_safe_depth(tolerance)

        if safe_depth is not None:
            print(f"Приблизительная глубина безопасной кладки: {safe_depth:.9f} м")
        else:
            print("Не удалось найти безопасную глубину.")

    except ValueError:
        print("Ошибка ввода. Пожалуйста, введите числовое значение.")

# Запуск программы
main()


****************************************
def get_maximum_of_two(first_number, second_number):
    """Возвращает максимум из двух чисел."""
    if first_number > second_number:
        return first_number
    else:
        return second_number

def get_maximum_of_three(first_number, second_number, third_number):
    """Возвращает максимум из трех чисел, используя get_maximum_of_two."""
    max_of_first_two = get_maximum_of_two(first_number, second_number)
    if max_of_first_two > third_number:
        return max_of_first_two
    else:
        return third_number

# Ввод чисел от пользователя
number1 = float(input("Введите первое число: "))
number2 = float(input("Введите второе число: "))
number3 = float(input("Введите третье число: "))

# Нахождение максимума и вывод результата
maximum_value = get_maximum_of_three(number1, number2, number3)
print(f"Максимальное число: {maximum_value}")
****************************************
# ; Задача 1. Сумма чисел 2
# ; Пользователь вводит число N. Напишите функцию summa_n, которая принимает одно целое положительное число N 
# и находит сумму всех чисел от 1 до N включительно. Функция вызывается два раза: сначала от числа N, а затем от полученной суммы.

# ; Пример работы программы:

# ; Введите число: 5
# ; Сумма от 1 до 5 = 15
# ; Сумма от 1 до 15 = 120

def suma_n(N):
    return sum(range(1, N + 1))

N = int(input('Введите число: '))

first_num = suma_n(N)
second_num = suma_n(first_num)
print(f'От 1 до {N} сумма равна {first_num}')
print(f'От 1 до {first_num} сумма равна {second_num}')

# ; Задача 2. «Назад в будущее»
# ; Вы — один из разработчиков языка программирования Python, и вы пишете специальный математический модуль,
#  который можно было бы просто подключить внутри программы и облегчить жизнь всем программистам.

# ; Реализуйте функцию gcd, которая получает два параметра — два числа — и возвращает наибольший общий делитель этих двух чисел.

# ; Пример работы программы:

# ; Введите первое число: 6
# ; Введите второе число: 10
# ; НОД = 2

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

# Пример работы программы
if __name__ == "__main__":
    # Вводим числа
    a = int(input("Введите первое число: "))
    b = int(input("Введите второе число: "))

    # Вычисляем НОД
    result = gcd(a, b)

    # Вывод результата
    print(f"НОД = {result}")


# ; Задача 3. Приоритет задач
# ; В одном дата-центре ресурсы распределены так, что сначала обрабатываются крупные задачи, а затем уже идут небольшие.
#  Каждая из этих задач, по сути, просто огромный поток цифр. Ваша задача, как программиста этого центра, 
# написать программу, которая поможет определять, какую из задач нужно решать в первую очередь. 

# ; Вводится последовательность из N чисел. Нужно определить номер числа, у которого больше всего цифр, 
# и вывести на экран соответствующее сообщение. Если число отрицательное, то считать его за 0. 
# Для подсчёта количества цифр реализуйте функцию numeral_count.

# ; Пример работы программы:

# ; Введите кол-во задач: 4
# ; Введите число: 6
# ; Введите число: 14
# ; Введите число: 1
# ; Введите число: 13434

# ; Первая задача на обработку: 13434

def numeral_count(number):
    count = 0
    while number > 0:
        number //= 10
        count += 1
    return count


def numeral_check(n):
    max_count = 0
    max_number = 0
    for _ in range(1, n + 1):

        new_value = int(input("Введите число: "))
        if new_value < 0:
            new_value = 0

        cipher_count = numeral_count(new_value)
        if cipher_count > max_count:
            max_count = cipher_count
            max_number = new_value

    return max_number


how_many = int(input("Введите количество чисел: "))
print("Первая задача на обработку: ", numeral_check(how_many))
****************************************
#  Задача 1. Возможности компьютера
#  В одной IT-компании тестируют возможности различных языков программирования, компиляторов и, конечно же, компьютеров. 
# Компания дала вам задачу понять, какое самое маленькое возможное число можно получить путём постоянного деления числа на 2. 
# Изначально число равно единице. Также, помимо самого числа, компания просит вывести количество делений. Реализуйте такую программу.

a = 1
count = 0

# Будем продолжать делить, пока результат деления отличается от 0
while a > 0:
    a /= 2
    count += 1
    print(f"Результат деления: {a}")

print(f"Количество делений: {count}")



#  Задача 2. Тестирование
#  Команде программистов отдали на тестирование новую модель суперкомпьютера. Для начала программисты решили проверить,
#  как у компьютера обстоят дела с вычислениями вещественных чисел.
#  Разработчики компьютера предупредили, что на входе он работает только с экспоненциальной формой числа.

# # Пользователь вводит число N в экспоненциальной форме, где мантисса всегда равна числу от 1 до 9, а порядок меньше нуля. 
# Также есть переменная Х, которая изначально равна единице. Посчитайте, сколько раз нужно прибавить N к Х, 
# чтобы оно перевалило за двойку.

#  Дополнительно: обеспечьте контроль ввода.

#  Пример 1:

#  Введите число в эксп. форме: 1e-3
#  Кол-во прибавлений: 1001
#  Пример 2:

#  Введите число в эксп. форме: 5.02e-1
#  Кол-во прибавлений: 2

# Контроль ввода экспоненциального числа
while True:
    try:
        n = float(input("Введите число в экспоненциальной форме: "))
        if n < 1e-9 or n >= 1:
            print("Число должно быть в экспоненциальной форме, где мантисса от 1 до 9, а порядок меньше нуля.")
        else:
            break
    except ValueError:
        print("Неверный ввод. Попробуйте еще раз.")

# Инициализация переменной X
X = 1
count = 0

# Прибавляем N к X, пока X не станет больше 2
while X <= 2:
    X += n
    count += 1

# Вывод результата
print(f"Количество прибавлений: {count}")



#  Задача 3. Урок информатики
#  На одном из уроков информатики учитель объяснял тему «Числа с плавающей точкой», но несколько учеников никак не могли понять, 
# почему эта точка «плавает» и как вообще выглядят числа в такой форме. Для наглядности учитель написал программу,
#  которая берёт число больше десяти и выводит его в формате плавающей точки.


#  Пользователь вводит положительное число x (x > 10). Напишите функцию, которая выводит его в формате плавающей точки, 
# то есть x = a *10 ** b, где 1 ≤ a < 10.

#  Пример 1:

#  Введите число: 16
#  Формат плавающей точки: x = 1.6 * 10 ** 1
#  Пример 2:

#  Введите число: 92345
#  Формат плавающей точки: x = 9.2345 * 10 ** 4

def float_format(x):
    # Определяем порядок (количество разрядов - 1)
    b = len(str(int(x))) - 1  # len(str(int(x))) возвращает количество цифр до десятичной точки
    # Вычисляем мантиссу
    a = x / (10 ** b)
    # Выводим результат
    print(f"Формат плавающей точки: x = {a} * 10 ** {b}")

# Контроль ввода
while True:
    try:
        x = float(input("Введите число больше 10: "))
        if x <= 10:
            print("Число должно быть больше 10. Попробуйте снова.")
        else:
            break
    except ValueError:
        print("Некорректный ввод. Введите числовое значение.")

# Вызов функции
float_format(x)

****************************************
#  Задача 1. Опять налоги
#  У правительства одной из стран есть бухгалтерская программа, которая суммирует налоги её граждан, 
# компаний плюс НДС с товаров. Страна развивалась, суммарные налоги увеличивались, и бухгалтеры заметили, 
# что после добавления к общей сумме налогов некого НДС от какого-то продукта общая сумма перестала меняться… 

#  Нужно помочь бухгалтерам: напишите функцию, на вход которой подаются два числа — общая сумма налога tax и новый налог new_tax, 
# который нужно добавить к общей сумме. Функция должна проверять, изменится ли показатель степени e при сложении двух чисел.

#  Пример 1:

#  Введите бюджет страны: 1.2e-12
#  Новые поступления (налог): 1.2e1
#  Результат: Бюджет увеличится
#  Пример 2:

#  Введите бюджет страны: 1.23e12
#  Новые поступления (налог): 1.2e1
#  Результат: Бюджет не изменится

def check_tax_increase(tax, new_tax):
    # Определяем порядок исходного налога
    original_order = f"{tax:.1e}".split('e')[1]  # Получаем порядок из экспоненциальной формы
    # Определяем порядок после прибавления нового налога
    new_total = tax + new_tax
    new_order = f"{new_total:.1e}".split('e')[1]
    
    # Сравниваем порядки
    if original_order == new_order:
        print("Результат: Бюджет не изменится")
    else:
        print("Результат: Бюджет увеличится")

# Контроль ввода
while True:
    try:
        tax = float(input("Введите бюджет страны: "))
        new_tax = float(input("Новые поступления (налог): "))
        break
    except ValueError:
        print("Некорректный ввод. Пожалуйста, введите числа в экспоненциальной форме.")

# Вызов функции
check_tax_increase(tax, new_tax)


#  Задача 2. Сравнение
#  Так как в Python операции с вещественными числами могут давать неожиданные результаты 
# (в частности, 0.1 + 0.2 не будет в точности равняться 0.3), стоит задача с этим как-то справляться. 

#  Напишите функцию eqv, которая принимает три числа и затем сравнивает сумму первых двух чисел 
# с третьим с определённой степенью точности: до 15-го знака после точки. 
# Если равенство выполняется, то функция возвращает True, иначе возвращает False.

#  Пример 1:

#  Введите первое число: 1.1
#  Введите второе число: 2.2
#  Введите третье число: 3.3
#  True

#  Пример 2:

#  Введите первое число: 1e-14
#  Введите второе число: 1e-14
#  Введите третье число: 3e-14
#  False

def eqv(a, b, c):
    # Округляем сумму и третье число до 15 знаков после запятой
    return round(a + b, 15) == round(c, 15)

# Контроль ввода
while True:
    try:
        a = float(input("Введите первое число: "))
        b = float(input("Введите второе число: "))
        c = float(input("Введите третье число: "))
        break
    except ValueError:
        print("Некорректный ввод. Пожалуйста, введите числа.")

# Вызов функции и вывод результата
print(eqv(a, b, c))

****************************************
# Задача 1. Таблица степеней
# Аркадий как-то раз написал программу для вывода таблицы степеней для определённых чисел. Недавно он узнал про такую штуку, как списки,
#  и решил программу немного переписать, а заодно усовершенствовать её. По его задумке, вначале есть всего три числа: 3, 7 и 5, 
# а затем с помощью бесконечного цикла программа запрашивает новое число, закидывает его в конец текущего списка чисел и выводит вторую, 
# третью и четвёртую степень каждого числа текущего списка. Вот какая программа получилась у Аркадия:

numbers = [3, 7, 5]

while True:
    number = int(input('Новое число (введите 0 для выхода): '))
    if number == 0:
        print("Завершение программы.")
        break

    numbers.append(number)
    print('Текущий список чисел:', numbers)
    
    for i in numbers:
        print(i ** 2, i ** 3, i ** 4)
    print()
# Однако, к сожалению, эта программа у него не заработала. Помогите Аркадию исправить ошибки в коде. Убедитесь, что программа работает верно.

 

# Пример верного результата:

# Новое число: 1

# Текущий список чисел: [3, 7, 5, 1]

# 9 27 81

# 49 343 2401

# 25 125 625

# 1 1 1

 

# Новое число: 2

# Текущий список чисел: [3, 7, 5, 1, 2]

# 9 27 81

# 49 343 2401

# 25 125 625

# 1 1 1

# 4 8 16



# Задача 2. Очень простая задача


# У вас есть список numbers. Напишите программу, которая заполняет список числами от 0 до 100 и выводит его на экран.

numberis = [i for i in range(101)]
print(numberis)

# Задача 3. Контроль
# В любой компании есть список сотрудников. Руководство одной компании хочет знать, на рабочем месте ли сейчас сотрудник. 
# У каждого сотрудника есть пропуск со своим ID-номером (это положительное число), список активных пропусков сотрудников известен заранее.

# Напишите программу, которая сначала запрашивает у пользователя количество сотрудников в офисе, ID их пропусков, а затем запрашивает ID пропуска, 
# который нужно найти в этом списке. Если такой есть, то вывести «Сотрудник на месте», а иначе «Сотрудник не работает!».

 

# Пример:

# Кол-во сотрудников в офисе: 4

# ID сотрудника: 10

# ID сотрудника: 20

# ID сотрудника: 30

# ID сотрудника: 40

# Какой ID ищем? 35

# Сотрудник не работает!

emploee = int(input('Введите количество сотрудников в офисе: '))
ID_list = []
for i in range(emploee):
    ID_emploee = int(input('Введите ID сотрудника: '))
    ID_list.append(ID_emploee)

print(ID_list)

find_emploee = int(input('Введите ID сотрудника: '))
if find_emploee in ID_list:
    print('Есть такой сотрудник!')
else:
    print('Такой не работает!')
****************************************

****************************************
# Задача 1. Гугл
# Программисты постоянно гуглят ошибки и ищут уже готовый код, который можно использовать для своей программы, 
# чтобы не изобретать велосипед. Андрей поступил также и нашёл для своего проекта код, 
# который должен находить минимальное и максимальное числа в списке. Вот этот код:

nums_list = []

N = int(input('Кол-во чисел в списке: '))

for _ in range(N):
    num = int(input('Очередное число: '))
    nums_list.append(num)

# Нахождение максимума и минимума после заполнения списка
maximum = max(nums_list)
minimum = min(nums_list)

print('Максимальное число в списке:', maximum)
print('Минимальное число в списке:', minimum)

# Однако он столкнулся с проблемой. Если брать, к примеру, количество чисел 5, то на тестах -1 -2 -3 -4 -5 и 1 2 3 4 5 
# программа выводит неверный результат. 

# Доработайте программу так, чтобы она выводила верный результат. Подсказка: для отладки используйте точки останова.



# Задача 2. Кратность
# Пользователь вводит список из N чисел и число K. Напишите код, выводящий на экран сумму индексов элементов списка, которые кратны K.

 

# Пример:

# Кол-во чисел в списке: 4

# Введите 1 число: 1

# Введите 2 число: 20

# Введите 3 число: 30

# Введите 4 число: 4

 

# Введите делитель: 10

 

# Индекс числа 20: 1

# Индекс числа 30: 2

# Сумма индексов: 3



# Подсказка: для более удобного вывода и наращивания индексов вы можете использовать функцию enumerate.

list_num = int(input('Введите количество чисел в списке: '))
numbers = []

for i in range(list_num):
    num = int(input(f'Введите {i + 1} число: '))
    numbers.append(num)

delitel = int(input('Введите делитель: '))

sum_indexes = 0

for index, value in enumerate(numbers):
    if value % delitel == 0:
        print(f'Индекс числа {value}: {index}')
        sum_indexes += index

print('Сумма индексов:', sum_indexes)



# Задача 3. Собачьи бега
# В собачьих бегах участвует N собак, у каждой из них есть определённое количество очков за сезон. 
# На огромном табло выводятся очки каждой собаки. Однако при выводе был обнаружен баг: 
# собаки с наибольшим и наименьшим количеством очков поменялись местами! Нужно это исправить.

# Дан список очков из N собак. Напишите программу, которая меняет местами наибольший и наименьший элементы в списке.

N = int(input('Введите количество собак: '))
dog_list = []
for _ in range(N):
    new_dog_list = int(input('Введите количество очков собаки: '))
    dog_list.append(new_dog_list)
print(dog_list)
****************************************
# Задача 1. Текстовый редактор: возвращение
# Мы продолжаем участвовать в разработке нового текстового редактора и делать жизнь обычных пользователей чуть лучше. 
# В этот раз у нас стоит задача сделать фишку с поиском и заменой символов в выделенной строчке. 
# Например, человек что-то перечислял в тексте, но ошибся и вместо точек с запятой использовал двоеточия. Лингвисты негодуют.

# Пользователь вводит строку S. Напишите программу, которая заменяет в строке все двоеточия (:) на точки с запятой (;). 
# Также подсчитайте количество замен и выведите ответ на экран (и новую строку тоже). Для решения используйте список.

# Пример:
# Введите строку: гвозди:шурупы:гайки
# Исправленная строка: гвозди;шурупы;гайки
# Кол-во замен: 2
count = 0        
list_str = []    
str_input = input('Введите строку: ')

for symbol in str_input:
    if symbol == ':':
        list_str.append(';')  
        count += 1            
    else:
        list_str.append(symbol)  

result_str = ''.join(list_str)

print("Исправленная строка:", result_str)
print("Кол-во замен:", count)


# Задача 2. Соседи
# Дана строка S и номер позиции символа в строке. Напишите программу, 
# которая выводит соседей этого символа и сообщение о количестве таких же символов среди этих соседей: 
# их нет, есть ровно один или есть два таких же.

# Пример 1:
# Введите строку: abbc
# Номер символа: 3

# Символ слева: b
# Символ справа: c

# Есть ровно один такой же символ.

# Пример 2:
# Введите строку: abсd
# Номер символа: 3

# Символ слева: b
# Символ справа: d

# Таких же символов нет.

msg = input("Введите строку: ")
index_of_letter = int(input("Номер символа: ")) - 1  # сразу отнимаем 1, чтобы превратить номер в индекс
letters = list(msg)
count = 0
if index_of_letter > 0:
    print("Символ слева:", letters[index_of_letter - 1])
    if letters[index_of_letter - 1] == letters[index_of_letter]:
        count += 1
if index_of_letter < len(letters) - 1:
    print("Символ справа:", letters[index_of_letter + 1])
    if letters[index_of_letter + 1] == letters[index_of_letter]:
        count += 1

if count == 0:
    print("Таких же символов нет.")
elif count == 1:
    print("Есть ровно один такой же символ.")
elif count == 2:
    print("Таких символов два.")

    
# Задача 3. Улучшенная лингвистика
# Мы уже писали программу для лингвистов, которая считала количество определённых букв в тексте. 
# Теперь эту программу нужно улучшить. Есть список из трёх слов, которые вводит пользователь. 
# Затем вводится сам текст произведения строго по словам. Текст вводится до тех пор, пока не встретится слово end.
#  Напишите программу, которая посчитает, сколько раз слова пользователя встречаются в тексте.

# Пример:
# Введите 1 слово: я
# Введите 2 слово: год
# Введите 3 слово: лучший

# Слово из текста: этот
# Слово из текста: год
# Слово из текста: -
# Слово из текста: лучший
# Слово из текста: год

# Подсчёт слов в тексте
# я: 0
# год: 2
# лучший: 1


words_list = []
counts = [0, 0, 0]

for i in range(3):
    print("Введите", i + 1, "слово", end=' ')
    word = input()
    words_list.append(word)

text = input("Слово из текста: ")
while text != "end":
    for index in range(3):
        if words_list[index] == text:
            counts[index] += 1
    text = input("Слово из текста: ")

print("Подсчёт слов в тексте")
for i in range(3):
    print(words_list[i], ':', counts[i])
****************************************
# Задача 3. Лавка
# В небольшой фруктовой лавке у каждого фрукта есть название и цена. Эта информация хранится в одном большом списке, недавно в лавку 
# привезли новый fruit_name по цене price, а после этого случилось ужасное: повысили налоги. 
# А значит, повысились и цены на фрукты,
#  на целых 8%!


goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]
print(f'Текущий ассортимент: {goods}')
fruit_name = input('Which fruit? ')
price = int(input('Price? '))

goods.append([fruit_name, price])
print(f'Новый ассортимент: {goods}')
goods_increase = [[name, round(price * 1.08, 2)] for name, price in goods]
print(f'Новый асортимент с увеличенной ценой: {goods_increase}')



# Реализуйте код, который добавляет в список goods ещё один список с новым фруктом и ценой (это запрашивается у пользователя), 
# а затем увеличивает цены всех фруктов на 8%.

# Текущий ассортимент: [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]

 

# Новый фрукт: абрикосы

# Цена: 150

 

# Новый ассортимент: [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77], ["абрикосы", 150]]

 
# Новый ассортимент с увел. ценой: [['яблоки', 54.0], ['апельсины', 205.2], ['груши', 108.0], ['нектарины', 216.0], ['бананы', 83.16], ['абрикосы', 162.0]]
****************************************

# Задача 1. Зоопарк
# В маленьком зоопарке каждое животное сидит в отдельной клетке, всего этих животных четверо: лев, кенгуру, слон и обезьяна. 
# В базе данных они хранятся в виде вот такого списка:

# zoo = ['lion', 'kangaroo', 'elephant', 'monkey']

# Сегодня в зоопарк завезли медведя (bear) и посадили его между львом и кенгуру. В итоге животных стало пять.
#  А через неделю слона перевезли в другое место и в списке снова стало четверо животных.

# Реализуйте эти действия в коде программы и выведите в консоль итоговый список животных, а также покажите, в какой клетке сидят лев и обезьяна. 
# Для этого используйте методы списков.

zoo = ['lion', 'kangaroo', 'elephant', 'monkey']

zoo.insert(1, 'bear')
zoo.remove('elephant')
monkey_position = zoo.index('monkey')
lion_position = zoo.index('lion')

print(f'Зоопарк: {zoo},\nЛев сидит в клетке {lion_position + 1},\nОбезьяна сидит в клетке {monkey_position + 1}')

# Результат работы программы:

# Зоопарк: ['lion', 'bear', 'kangaroo', 'monkey']

# Лев сидит в клетке номер 1

# Обезьяна сидит в клетке номер 4


# Задача 2. Сокращения
# В одной компании наступили «тёмные времена», и сотрудников стали сокращать. Зарплаты сотрудников хранятся в списке из N этих самых зарплат. 
# Зарплаты уже уволенных сотрудников обозначаются в списке числом 0.

# Напишите программу, которая запрашивает у пользователя количество сотрудников и их зарплаты,
#  затем удаляет все элементы списка со значением 0 и выводит в консоль, сколько сотрудников осталось, а также их зарплаты.
#  Дополнительный список использовать нельзя.

N = int(input('Введите количество сотрудников: '))
employes = []
for i in range(N):
  paycheck = int(input(f'Введите зарплату {i + 1} сотрудника: '))
  employes.append(paycheck)

employes = [paycheck for paycheck in employes if paycheck != 0]
employes_count = len(employes)

min_paycheck = min(employes)
max_paycheck = max(employes)

print(f'Сотрудников осталось: {employes_count}, \nМаксимальная зарплата: {max_paycheck} \nМинимальная зарплата: {min_paycheck}')
 


# Пример:

# Кол-во сотрудников: 7

# Зарплата 1 сотрудника: 10000

# Зарплата 2 сотрудника: 25000

# Зарплата 3 сотрудника: 0

# Зарплата 4 сотрудника: 50000

# Зарплата 5 сотрудника: 60000

# Зарплата 6 сотрудника: 0

# Зарплата 7 сотрудника: 17000

 

# Осталось сотрудников: 5

# Зарплаты: [10000, 25000, 50000, 60000, 17000]

 

# Дополнительно: выведите на экран максимальную и минимальную зарплату оставшихся сотрудников. Для этого используйте функции max и min. 
# Да, те самые, которыми нельзя называть переменные. В скобках функций просто укажите список.

 

# Пример:

# Максимальная зп: 60000

# Минимальная зп: 10000



# Задача 3. Кино
# Мы поддерживаем свой киносайт и хотим сделать так, чтобы пользователи после регистрации могли создать собственный рейтинг фильмов из тех, 
# которые есть на сайте. Вот сам список фильмов (конечно же, можете брать свои):

 

# films = [

#     'Крепкий орешек', 'Назад в будущее', 'Таксист', 

#     'Леон', 'Богемская рапсодия', 'Город грехов',

#     'Мементо', 'Отступники', 'Деревня', 

#     'Проклятый остров', 'Начало', 'Матрица'

# ]

 

# Напишите программу, которая позволяет добавлять в свой рейтинг фильмы, удалять их оттуда, а также вставлять на нужное пользователю место. Обеспечьте контроль ввода и сделайте так, чтобы в список нельзя было добавить один и тот же фильм несколько раз.

 

# Пример:
# Ваш текущий топ фильмов: []
# Название фильма: Леон
# Команды: добавить, вставить, удалить
# Введите команду: добавить


# Ваш текущий топ фильмов: [‘Леон’]
# Название фильма: Леон
# Команды: добавить, вставить, удалить
# Введите команду: добавить
# Этот фильм уже есть в вашем списке.


# Ваш текущий топ фильмов: [‘Леон’]
# Название фильма: Матрица
# Команды: добавить, вставить, удалить
# Введите команду: добавить


# Ваш текущий топ фильмов: [‘Леон’, ‘Матрица’]
# Название фильма: Леон
# Команды: добавить, вставить, удалить
# Введите команду: удалить


# Ваш текущий топ фильмов: [‘Матрица’]
# Название фильма: …..

user_films = []
while True:

 print(f'Ваш текущий топ фильмов: {user_films}')
 print('добавить, вставить, удалить')
 command = input('Введите команду: ')
 film = input('Название фильма:')

 if command == 'добавить':
    if film in user_films:
        print('Этот фильм уже есть в вашем списке.')
    else:
        user_films.append(film)
        print(f'Фильм "{film}" добавлен в ваш список.')
 elif command == 'вставить':
    index = int(input('На какое место вы хотите вставить фильм? (Введите индекс): '))
    user_films.insert(index - 1, film)
 elif command == 'удалить':
    if film in user_films:
        user_films.remove(film)
        print(f'Фильм "{film}" удалён из вашего списка.')
    else:
        print(f'Фильм "{film}" не найден в вашем списке.')
 elif command == 'выход':
    print("Спасибо за использование нашего приложения. До свидания!")
    break
 else:
    print('Неверная команда, для выхода напишите: выход ')
****************************************
# Задача 1. Задачи компаний
# Одна IT-компания решила расшириться и взяла под своё крыло ещё три таких же, но поменьше. 
# Конечно же, все выполненные и невыполненные задачи этих компаний перетекли в основную компанию.

# Даны четыре списка компаний, в которых для каждой задачи написано, выполнена (1) она или нет (0):

 

# main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]

# first_company = [0, 0, 0]

# second_company = [1, 0, 0, 1, 1]

# third_company = [1, 1, 1, 0, 1]

 

# Напишите программу, которая расширяет список main элементами остальных списков, выведите итоговый список, 
# а также выведите количество невыполненных задач.

 

# Результат работы программы:

main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]

first_company = [0, 0, 0]

second_company = [1, 0, 0, 1, 1]

third_company = [1, 1, 1, 0, 1]

main.extend(first_company + second_company + third_company)
print(main.count(0))


# Общий список задач: [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1]

# Кол-во невыполненных задач: 10



# Задача 2. Вредоносное ПО
# Гера решил попрактиковаться в программировании и захотел написать небольшой скрипт, 
# который после двух сообщений отправляет ещё одно на основе первых двух.
# Пользователь вводит две строки. В каждой из них есть какое-то количество специальных символов ! и ?. 
# Напишите программу, которая считает количество этих символов отдельно в первой строке и отдельно во второй. Если в первой строке их больше,
#  чем во второй, то на экран выводится первая строчка, объединённая со второй, а иначе — вторая с первой.
#  При равном количестве символов в строках выводится «Ой».

 # Пример 1:
# Первое сообщение: Привет!
# Второе сообщение: Как дела? Что делаешь?
# Третье сообщение: Как дела? Что делаешь? Привет!

 # Пример 2:
# Первое сообщение: Хм!!
# Второе сообщение: ?
# Третье сообщение: Хм!!?

specials = ('!', '?')

first = input('Enter First String: ')
second = input('Enter Second String: ')

count1 = sum(1 for ch in first if ch in specials)
count2 = sum(1 for ch in second if ch in specials)

if count1 > count2:
    result = first + ' ' + second
elif count2 > count1:
    result = second + ' ' + first
else:
    result = 'Ой'

print(f'Third Message: {result}')

# Задача 3. Пакеты
# При работе с сервером мы кодируем сообщение и отправляем его в виде пакетов информации. Их количество равно N. 
# Допустим, каждый пакет содержит четыре числа, каждое из которых равно нулю или единице. Эти числа называются битами.
#  Иногда в кодировке сообщения встречаются ошибки, и в пакете эта ошибка обозначается числом -1. Если таких ошибок не больше одной,
#  то этот пакет мы целиком добавляем в список для декодирования, а иначе отбрасываем.

# Напишите программу, которая будет обрабатывать полученные пакеты и выведет на экран итоговое сообщение для декодирования, 
# а также количество ошибок в нём и количество необработанных пакетов.

 

# Пример:
# Кол-во пакетов: 3


# Пакет номер 1
# 1 бит: 1
# 2 бит: 0
# 3 бит: -1
# 4 бит: 1


# Пакет номер 2
# 1 бит: -1
# 2 бит: -1
# 3 бит: 1
# 4 бит: 1
# Много ошибок в пакете.


# Пакет номер 3
# 1 бит: 0
# 2 бит: 1
# 3 бит: 1
# 4 бит: 1


# Полученное сообщение: [1, 0, -1, 1, 0, 1, 1, 1]
# Кол-во ошибок в сообщении: 1
# Кол-во потерянных пакетов: 1

N = int(input('Packages: '))

message_recieved = []
broken_bit = 0
lost_package = 0


for i in range (N):
  count_error = 0
  temp_package = []
  print(f'Package number {i + 1}')

  for j in range(4):
    enter_bit = int(input(f'{j + 1} bit: '))
    temp_package.append(enter_bit)
    if enter_bit == -1:
      count_error += 1
  if count_error <= 1:
    message_recieved.extend(temp_package)
    broken_bit += count_error
  else:
    print('Too many errors in package.')
    lost_package += 1
    

print(f'Message recieved {message_recieved}')
print(f'Errors in package: {broken_bit}')
print(f'Lost packages {lost_package}')
****************************************
# Задача 1. Матрица
# Дан вот такой список со списками:

matrix = [[1, 2 ,3], [4, 5, 6], [7, 8, 9]]

# Реализуйте программу, которая выводит элементы этого списка в виде привычной нам матрицы.

for inner in matrix:
    for item in inner:
        print(item, end = ' ')
    print()

# Результат работы программы:

# 1 2 3

# 4 5 6

# 7 8 9



# Задача 2. Олимпиада
# В олимпиаде по программированию участвует N человек, в списке участников они обозначаются под номерами 1, 2, 3, 4 и так далее до N. 
# Эти участники поделены на команды по K человек.
# Напишите программу, которая принимает на вход количество участников и количество человек в каждой команде, 
# затем генерирует список таких команд и выводит его на экран. 
# Обеспечьте контроль ввода: в каждой команде должно быть ровно по K человек.

N = int(input('Кол-во участников: '))
K = int(input('Кол-во человек в команде: '))

if N % K != 0:
    print(f'{N} участников невозможно поделить на команды по {K} человек.')
else:
    participants = list(range(1, N + 1))
    teams = []

    for i in range(0, N, K):
        teams.append(participants[i:i + K])

    print(f'Общий список команд: {teams}')

# Пример 1:
# Кол-во участников: 12
# Кол-во человек в команде: 4
# Общий список команд: [[1, 2 ,3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]

# Пример 2:
# Кол-во участников: 12
# Кол-во человек в команде: 5
# 12 участников невозможно поделить на команды по 5 человек!



# Задача 3. Лавка
# В небольшой фруктовой лавке у каждого фрукта есть название и цена. Эта информация хранится в одном большом списке, вот так:
# Недавно в лавку привезли новый fruit_name по цене price, а после этого случилось ужасное: повысили налоги. 
# А значит, повысились и цены на фрукты,
#  на целых 8%!
# Реализуйте код, который добавляет в список goods ещё один список с новым фруктом и ценой (это запрашивается у пользователя), 
# а затем увеличивает цены всех фруктов на 8%.

goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]
print(f'Текущий ассортимент: {goods}')
fruit_name = input('Новый фрукт: ')
price = int(input('Цена: '))

goods.append([fruit_name, price])
print(f'Новый ассортимент: {goods}')
goods_increase = [[name, round(price * 1.08, 2)] for name, price in goods]
print(f'Новый асортимент с увеличенной ценой: {goods_increase}')

# Пример:
# Текущий ассортимент: [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]
# Новый фрукт: абрикосы
# Цена: 150
# Новый ассортимент: [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77], ["абрикосы", 150]
# Новый ассортимент с увел. ценой: [['яблоки', 54.0], ['апельсины', 205.2], ['груши', 108.0], ['нектарины', 216.0], ['бананы', 83.16], ['абрикосы', 162.0]]
****************************************
import random
# Задача 3. Отряды
# Мы продолжаем пробовать себя в качестве разработчика игр. Теперь нужно написать небольшую логику поведения некоторых отрядов, а также их урон.
#  Есть два отряда, в каждом по 10 монстров. В первом отряде у каждого монстра урон абсолютно случайный и колеблется от 50 до 80,
#  а во втором — от 30 до 60. Оба отряда вместе напали на третий, также из 10 юнитов. Юнит третьего отряда погибает,
#  если сумма урона от двух монстров больше 100.

# Напишите программу, которая генерирует случайные значения в первых двух списках в заданных диапазонах,
#  а также генерирует список, состоящий из фраз «Погиб» или «Выжил». Выведите все списки на экран.

first_squad = [random.randint(50, 80) for _ in range(10)]
second_squad = [random.randint(30, 60) for _ in range(10)]

print(f"{first_squad}\n{second_squad}")

third_squad = ["Погиб"  if first_squad[i] + second_squad[i] >= 100 else "Выжил" for i in range(10)]

print(third_squad)

# Пример:

# Урон первого отряда: [77, 75, 76, 77, 76, 73, 57, 67, 76, 52]

# Урон второго отряда: [53, 51, 31, 60, 49, 37, 31, 60, 37, 47]

# Состояние третьего отряда: ['Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Выжил', 'Погиб', 'Погиб', 'Выжил']
****************************************
# Задача 1. Кубы и квадраты
# Пользователь вводит числа A и B. Напишите программу, которая генерирует два списка: в первом лежат кубы чисел в диапазоне от А до В, 
# во втором — квадраты чисел в этом же диапазоне. Выведите списки на экран. 
# Для генерации используйте list comprehensions (как и в следующих задачах).

# Пример:
# Левая граница: 5
# Правая граница: 10
# Список кубов чисел в диапазоне от 5 до 10: [125, 216, 343, 512, 729, 1000]
# Список квадратов чисел в диапазоне от 5 до 10: [25, 36, 49, 64, 81, 100]

user_number_A = int(input('Enter number A: '))
user_number_B = int(input('Enter number B: '))

kvad = [x**2 for x in range(user_number_A, user_number_B + 1)]
qube = [x**3 for x in range(user_number_A, user_number_B + 1)]

print(f'Kvad list: {kvad}')
print(f'Qube list: {qube}')

# Задача 2. Сообщение
# Илья решил безобидно подшутить над другом и написал программу для смартфона,
#  которая при отправке сообщения удваивает каждый символ строки и заодно к каждому удвоенному добавляет ещё один дополнительный.

# Пользователь вводит строку и дополнительный символ. Напишите программу, которая генерирует два списка: 
# в первом списке каждый элемент — удвоенная буква первой строки,
#  во втором списке каждый элемент — конкатенация элемента первого списка и дополнительного символа.

 

# Пример:

# Введите строку: привет

# Введите дополнительный символ: !

 

# Список удвоенных символов: ['пп', 'рр', 'ии', 'вв', 'ее', 'тт']

# Склейка с дополнительным символом: ['пп!', 'рр!', 'ии!', 'вв!', 'ее!', 'тт!']

specials = ('!', '?')

first = input('Enter First String: ')
second = input('Enter Second String: ')

count1 = sum(1 for ch in first if ch in specials)
count2 = sum(1 for ch in second if ch in specials)

if count1 > count2:
    result = first + ' ' + second
elif count2 > count1:
    result = second + ' ' + first
else:
    result = 'Ой'

print(f'Third Message: {result}')

# Задача 3. Повышение цен
# Дан список цен на пять товаров с точностью до копейки. Так как экономика даёт о себе знать, мы спрогнозировали, 
# что через год придётся повышать цены на X процентов, а ещё через один год — ещё на Y процентов.

# Напишите программу, которая получает на вход список цен на товары 
# (вещественные числа, список генерируется также с помощью list comprehensions) и выводит в одну строку общую сумму стоимости товаров за каждый год.

prices = [float(input(f"Enter price {i+1}: ")) for i in range(5)]

first_increase = float(input('How much increase for the first year: '))
second_increase = float(input('How much increase for the second year: '))

total_sum = sum(prices)

first_sum_increase = [price * (1 + first_increase / 100) for price in prices]
first_total = sum(first_sum_increase)

second_sum_increase = [price * (1 + second_increase / 100) for price in first_sum_increase]
second_total = sum(second_sum_increase)

third_total = [total_sum, first_total, second_total]
print(third_total)


# Пример:

# Цена на товар: 1.09

# Цена на товар: 23.56

# Цена на товар: 57.84

# Цена на товар: 4.56

# Цена на товар: 6.78

# Повышение на первый год: 0

# Повышение на второй год: 10

# Сумма цен за каждый год: 93.83 93.83 103.21


****************************************
import random
#Задача 1. Список чётных чисел
# Пользователь вводит два числа: А и В. Реализуйте код, который генерирует список из чётных чисел в диапазоне от А до B.
#  Используйте list comprehensions (как и в следующих задачах).

A = int(input('Введите число A: '))
B = int(input('Введите число B: '))

even_digit = [digit for digit in range(A, B + 1) if digit % 2 == 0]
print(even_digit)

# Задача 2. Магазин
# У нас есть вот такой список цен на некоторые товары из магазина:

original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]

# В этом списке также хранятся цены на товары, которые уже давно не продаются. По какой-то причине система, вместо того чтобы их занулить,
# просто приписала к ним минус. Нам нужно это исправить.

# Напишите программу, которая генерирует новый список из первого списка, заменяя все отрицательные числа на ноль.

new_prices = [0 if price < 0 else price for price in original_prices]
print(new_prices)
# Результат:

# [1.25, 0, 10.22, 3.78, 0, 1.16]



# Задача 3. Отряды
# Мы продолжаем пробовать себя в качестве разработчика игр. Теперь нужно написать небольшую логику поведения некоторых отрядов, а также их урон.
#  Есть два отряда, в каждом по 10 монстров. В первом отряде у каждого монстра урон абсолютно случайный и колеблется от 50 до 80,
#  а во втором — от 30 до 60. Оба отряда вместе напали на третий, также из 10 юнитов. Юнит третьего отряда погибает,
#  если сумма урона от двух монстров больше 100.

# Напишите программу, которая генерирует случайные значения в первых двух списках в заданных диапазонах,
#  а также генерирует список, состоящий из фраз «Погиб» или «Выжил». Выведите все списки на экран.

first_squad = [random.randint(50, 80) for _ in range(10)]
second_squad = [random.randint(30, 60) for _ in range(10)]

print(f"{first_squad}\n{second_squad}")

third_squad = ["Погиб"  if first_squad[monster] + second_squad[monster] >= 100 else "Выжил" for monster in range(10)]

print(third_squad)


# Пример:

# Урон первого отряда: [77, 75, 76, 77, 76, 73, 57, 67, 76, 52]

# Урон второго отряда: [53, 51, 31, 60, 49, 37, 31, 60, 37, 47]

# Состояние третьего отряда: ['Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Выжил', 'Погиб', 'Погиб', 'Выжил']
****************************************
# Задача 1. Анализ цен
# Нашему другу заказали написать программу, которая анализирует цены на бирже. Она получает этот пакет данных, но делать что-либо с ним нельзя.
#  Для нормальной работы аналитической программы берётся новый список, который равен тому, что пришло. 
# Затем идёт работа с новым списком: если есть отрицательные цены, то программа их зануляет и в конце выводит на экран, 
# сколько денег мы по итогу потеряли. Получился вот такой код:

original_prices = [-12, 3, 5, -2, 1]

new_prices = original_prices.copy()

for i in range(len(original_prices)):

 if new_prices[i] < 0:

    new_prices[i] = 0

print("Мы потеряли: ",  sum(original_prices) - sum(new_prices))

 

# Однако при таких входных данных программа почему-то работает неправильно: она выводит ответ 0, когда правильный ответ 14. 
# Помогите другу исправить программу, а также сделайте так, чтобы список цен генерировался случайно (диапазон можно выбрать любой).



# Задача 2. Срезы
# Дан список чисел:

nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]
# Напишите программу, которая выводит на экран шесть ответов:

# В первой строке выведите первые пять элементов списка.
for f_f in nums[0:5]:
  print(f_f, end = ' ')
print()
# Во второй строке выведите весь список, кроме последних двух элементов.
for w_ls in nums[:-2]:
  print(w_ls, end = ' ')
print()
# В третьей строке выведите все элементы с чётными индексами.
for e_i in nums[::2]:
  print(e_i, end = ' ')
print()
# В четвёртой строке выведите все элементы с нечётными индексами.
for o_i in nums[1::1]:
  print(o_i, end = ' ')
print()
# В пятой строке выведите все элементы в обратном порядке.
for l_tf in nums[::-1]:
  print(l_tf, end = ' ')
print()
# В шестой строке выведите все элементы списка через один в обратном порядке, начиная с последнего.
for i in nums[::-2]:
    print(i, end=' ')
print()

# Для решения используйте только срезы (и без функции len).

 

# Результат:

# [48, -10, 9, 38, 17]

# [48, -10, 9, 38, 17, 50, -5, 43]

# [48, 9, 17, -5, 46]

# [-10, 38, 50, 43, 12]

# [12, 46, 43, -5, 50, 17, 38, 9, -10, 48]

# [12, 43, 50, 38, -10]



# Задача 3. Удаление части
# Дан список из N чисел, а также числа А и В (можно сгенерировать случайно, при этом А < B).
#  Напишите программу, которая удаляет элементы списка с индексами от А до В. Не используйте дополнительные переменные и методы списков.

import random

numbers = [random.randint(1, 100) for _ in range(15)]
a = random.randint(3, 6)
b = random.randint(a + 1, 10)

print("До удаления:", numbers)
print(f"A = {a}, B = {b}")

del numbers[a:b+1]

print("После удаления:", numbers)

****************************************

****************************************
# Задача 1. Заказ
# После того, как человек сделал заказ в интернет-магазине, ему на почту приходит оповещение с его именем и номером заказа.

# Напишите программу, которая получает на вход имя и код заказа, а затем выводит на экран соответствующее сообщение. 
# Для решения используйте строковый метод format.

# Пример:
# Имя: Иван
# Номер заказа: 10948


# Здравствуйте, Иван! Ваш номер заказа: 10948. Приятного дня!

user_name = input('Введите имя: ')
user_order = int(input('Введите номер заказа: '))
print('Здравствуйте, {}! Ваш номер заказа: {}. Притяного дня!'.format(user_name, user_order))

# Задача 2. Долги
# Один наш друг занял у нас определённую сумму денег и всё никак не может их вернуть. А деньги нам нужны. 
# Поэтому мы решили написать небольшой скрипт-напоминалку, 
# который, возможно, разбудит его совесть.

# Напишите программу, которая получает на вход имя и долг, а затем выводит на экран сообщение, где имя повторяется несколько раз (и долг, возможно, тоже).
#  Используйте числа в названиях ключей.

user_name_debt = input('Имя должника: ') 
user_debt = int(input('Введите долг: '))

print('{0}! {0}, привет! Как дела, {0}? Где мои {1} рублей? {0}!'.format(user_name_debt, user_debt))
# Пример:

# Введите имя: Том

# Введите долг: 100

# Том! Том, привет! Как дела, Том? Где мои 100 рублей? Том! 



# Задача 3. IP-адрес
# IP-адрес компьютера состоит из 4 чисел, разделённых точкой. Каждое число находится в диапазоне от 0 до 255 (включительно).

ip_adress = "{0}.{1}.{2}.{3}"
count = 0
numbers = []

while count < 4:
    new_number = int(input('Введите число: '))
    if new_number < 0 or new_number > 255:
        print('Неверно!')
        continue
    else:
        numbers.append(new_number)
        count += 1
print(ip_adress.format(*numbers))
# Пример правильного адреса: 192.168.1.0

# Пример неправильного адреса: 192.168.300.0

 

# Напишите программу, которая получает на вход 4 числа и выводит на экран IP-адрес. Используйте переменную ip_address в качестве шаблона.
#  Обеспечьте контроль ввода.
****************************************
# Задача 1. Улучшенная лингвистика 2
# Усовершенствуйте старую программу:

# У нас есть список из трёх слов, которые вводит пользователь. Затем вводится сам текст произведения, который вводится уже в одну строку. 
# Напишите программу, которая посчитает, сколько раз слова пользователя встречаются в тексте. 

user_words = [input('Введите слово: ') for _ in range(3)]
user_text = input('Введите текст: ')
word_count = [user_text.count (word) for word in user_words] 
print(word_count)

# Задача 2. Бабушка
# У одной бабушки, когда та переписывается с внуком, постоянно залипает кнопка пробела. В итоге между словами получаются огромные расстояния.
#  Внук не знает как это поправить в самом телефоне, поэтому обратился к вам за помощью.

# Пользователь вводит строку. Напишите программу, которая преобразовывает в этой строке все идущие подряд пробелы в один и выводит результат на экран.

grandma_text = input('Введите строку: ')
words = grandma_text.split()
if words[-1] in "!?.,:;":
    words[-2] += words[-1]
    words.pop()
grandma_text = " ".join(words)
print(grandma_text)



# Пример:

# Введите текст: У       нас         пошёл                    снег    !     

 

# Исправленный текст: У нас пошёл снег !



# Задача 3. Разделители символов
# Человек хочет сделать рассылку поздравлений для определённого списка людей. Поздравления для разных людей он хочет написать по-разному. 

 

# Напишите программу, которая запрашивает у пользователя: 

# Шаблон поздравления (туда вставляется ФИ и возраст)

# ФИ людей (в одну строку, разделяются запятой)

# Возраст каждого человека (в одну строку через пробел)

# В конце  программа выводит поздравления и всех именинников в одну строку вместе с их возрастом.

template = 'С днём рождения, {name}! С {age}-летием тебя!'
names = input('Введите имена и фмаилии через заяптую: ').split(', ')
ages = input('Введите возраст через пробел: ').split()

for name, age in zip(names, ages):
    print(template.format(name=name, age=age))
print(", ".join (f"{name} {age}" for name, age in zip(names, ages)))

# Пример:

# Введите шаблон поздравления, в шаблоне можно использовать конструкцию {name} и {age}: С днём рождения, {name}! С {age}-летием тебя!

# Список людей через запятую: Иван Иванов, Петя Петров, Лена Ленова

# Возраст людей через пробел: 20 30 18

 

# С днём рождения, Иван Иванов! С 20-летием тебя!

# С днём рождения, Петя Петров! С 30-летием тебя!

# С днём рождения, Лена Ленова! С 18-летием тебя!

 

# Именинники: Иван Иванов 20, Петя Петров 30, Лена Ленова 18
****************************************
# Задача 1. Шифр Цезаря 2
# Мы уже писали программу, которая шифрует строку с помощью шифра Цезаря. Напомним, 
# что в таком способе шифрования каждая буква заменяется на следующую по алфавиту через K позиций по кругу.

# Напишите (модифицируйте) программу, которая реализует этот алгоритм шифрования. Не используйте конкатенацию и сделайте так,
# чтобы текст был в одном регистре.

text = input("Введите текст для шифрования: ").lower()
k = int(input("Введите сдвиг: "))

result = ''.join([
    chr((ord(char) - ord('a') + k) % 26 + ord('a')) if char.isalpha() else char
    for char in text
])

print("Зашифрованный текст:", result)


# Задача 2. Путь к файлу
# Все данные сайта лежат в одном проекте. При написании кода, внутри этого проекта часто используются абсолютные пути файлов, которые необходимо проверять.

# Пользователь вводит абсолютный путь к текстовому файлу, а также проверяемые данные: диск и расширение файла. Напишите программу, 
# которая проверяет корректность этого пути.

file_path = input('Введите путь к файлу: ')
file_true_path = input('На каком диске:')
file_extension = input('Требуемое расширение файла: ')

if file_path.startswith(file_true_path.upper() + ":") and file_path.endswith(file_extension):
    print('Путь корректен!')

# Пример:

# Путь к файлу: C:/user/docs/folder/new_file.txt

# На каком диске должен лежать файл: C

# Требуемое расширение файла: .txt

# Путь корректен!



# Задача 3. Удаление части
# На вход в программу подаётся строка, состоящая из заглавных и строчных букв кириллицы. Напишите код, который проверяет, каких букв в строке больше: 
# строчных или заглавных. Если заглавных букв больше, то сделайте все буквы строки заглавными, иначе сделайте всё строчными.

# Подсказка: используйте методы islower() и/или isupper().

user_text = input('Введите строку: ')

upper_text = [letter for letter in user_text if letter.isupper()]
lower_text = [letter for letter in user_text if letter.islower()]

if len(upper_text) > len(lower_text):
    print(user_text.upper()) 
elif len(lower_text) > len(upper_text):
    print(user_text.lower())
else:
    print('Количество нижних и верхних равно')

# Введите строку: ПитоН - этО хорошО

 

# Результат: питон - это хорошо


 

# Пример 2:

# Введите строку: ПиТоН - ЭтО УДоБнО

 

# Результат: ПИТОН - ЭТО УДОБНО
****************************************
# Задача 1. Словарь квадратов чисел
# На вход программе поступает целое число num. Напишите программу создания словаря, который включает в себя ключи от 1 до num,
#  а значениями соответствующего ключа будет значение ключа в квадрате. 

num_dict = {}

user_num = int(input('Введите число: '))
for i in range (1, user_num + 1):
    num_dict[i] = i * i
print(num_dict)

# Пример:

# Введите целое число: 5 

# Результат: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}



# Задача 2. Студент
# Пользователь вводит фамилию, имя студента, город проживания, вуз, в котором он учится, и все его оценки. 
# Всё вводится в одну строку через пробел.
#  Напишите программу, которая по этой информации составит словарь и выведет его на экран. 

# Пример:

# Введите информацию о студенте через пробел (имя, фамилия, город, место учёбы, оценки): Илья Иванов Москва МГУ 5 4 4 4 5

# Результат: 

# Имя - Илья

# Фамилия - Иванов

# Город - Москва

# Место учёбы - МГУ

# Оценки - [5, 4, 4, 4, 5]

user_information = input('Введите информацию через пробел: ')

#student = {
#    "Имя": "Илья",
#    "Фамилия": "Иванов",
#    "Город": "Москва",
#    "Место учёбы": "МГУ",
#    "Оценки": [5, 4, 4, 4, 5]
#}
data = user_information.split()

student = {}
student("Имя") = data(0)
student("Фамилия") = data(1)
student("Город") = data(2)
student("Место учёбы") = data(3)

grades = []
for g in data[4:]:
  grades.append(int(g))

# Задача 3. Контакты
# Энтузиаст Степан, купив новый телефон, решил написать для него свою собственную операционную систему.
#  И, конечно же, первое, что он захотел в ней реализовать, — это телефонная книга.

# Напишите программу, которая запрашивает у пользователя имя контакта и номер телефона, добавляет их в словарь и выводит на экран текущий словарь контактов. 
# Запрос на добавление идёт бесконечно (но можно задать своё условие для завершения программы). Обеспечьте контроль ввода: если это имя уже есть в словаре, 
# то выведите соответствующее сообщение.

#  Пример:

# Текущие контакты на телефоне:

# <Пусто>

# Введите имя: Иван

# Введите номер телефона: 100200300 

# Текущие контакты на телефоне:

# Иван  100200300 

# Введите имя: Лена

# Введите номер телефона: 8005555522 

# Текущие контакты на телефоне:

# Иван  100200300

# Лена  8005555522 

# Введите имя: Иван

# Ошибка: такое имя уже существует.

# ...

contacts = {}

while True:
    if not contacts:
        print("<Пусто>")
    else:
        for name, phone in contacts.items():
            print(name, phone)

    name, phone = input("Введите имя и номер через пробел: ").split()

    if name.lower() == "выход":
        break

    if name in contacts:
        print("Ошибка: такое имя уже существует.")
    else:
        contacts[name] = phone
    

****************************************
def greet(name):
    print(f"Привет, {name}!")

result = greet("Артур")
print("Результат:", result)
****************************************
# Задача 1. Склады
# У мебельного магазина есть два склада, на которых хранятся разные категории товаров по парам «название — количество»:

small_storage = {

   'гвозди': 5000,

  'шурупы': 3040,

  'саморезы': 2000

}

big_storage = {

  'доски': 1000,

   'балки': 150,

  'рейки': 600

}

big_storage.update(small_storage)

item = input('Введите название товара: ').lower()

# Проверяем наличие и выводим результат
quantity = big_storage.get

if quantity is not None:
    print(f'Количество товара {item}: {quantity}')
else:
    print('Такого товара нет на складе')
# Магазин решил сократить аренду и скинуть все товары в большой склад (big_storage). После этого нас попросили реализовать поиск по товарам.

# Напишите программу, которая объединяет оба словаря в один (в big_storage), 
# затем запрашивает у пользователя название товара и выводит на экран его количество. Если такого товара нет, то выводит об этом ошибку. 
# Для получения значения используйте метод get.




# Задача 2. Кризис фруктов
# Мы работаем в одной небольшой торговой компании, где все данные о продажах фруктов за год сохранены в словаре в виде пар «название фрукта — доход»: 

incomes = {

     'apple': 5600.20,

     'orange': 3500.45,

     'banana': 5000.00,

     'bergamot': 3700.56,

     'durian': 5987.23,

     'grapefruit': 300.40,

     'peach': 10000.50,

     'pear': 1020.00,

     'persimmon': 310.00,

}

total_income = 0

for value in incomes.values():
    total_income += value
print(f'Общий доход за год составил {total_income} рублей')

min_fruit = min(incomes, key=incomes.get)
min_value = incomes[min_fruit]
incomes.pop(min_fruit)

print(f'Самый маленький доход у {min_fruit}, он составил {min_value}')

# В компании наступил небольшой кризис, и нам поручено провести небольшой анализ дохода.

# Напишите программу, которая находит общий доход, затем выводит фрукт с минимальным доходом и удаляет его из словаря. Выведите итоговый словарь на экран.

# Результат работы программы:

# Общий доход за год составил 35419.34 рублей

# Самый маленький доход у grapefruit. Он составляет 300.4 рублей

# Итоговый словарь: 
# {'apple': 5600.2, 'orange': 3500.45, 'banana': 5000.0, 'bergamot': 3700.56, 'durian': 5987.23, 'peach': 10000.5, 'pear': 1020.0, 'persimmon': 310.0}



# Задача 3. Гистограмма частоты
# Лингвистам нужно собрать данные о частоте букв в тексте, исходя из этих данных будет строиться гистограмма частоты букв. 

# Напишите программу, которая получает сам текст и считает, сколько раз в строке встречается каждый символ. 
# На экран нужно вывести содержимое в виде таблицы, отсортированное по алфавиту, а также максимальное значение частоты.

 

# Пример:

# Введите текст: Здесь что-то написано

#   : 2

# - : 1

# З : 1

# а : 2

# д : 1

# е : 1

# и : 1

# н : 2

# о : 3

# п : 1

# с : 2

# т : 2

# ч : 1

# ь : 1

# Максимальная частота: 3

text = input('Введите текст: ')

# Считаем частоты
frequency = {}

for char in text:
    if char in frequency:
        frequency[char] += 1
    else:
        frequency[char] = 1

# Сортировка по алфавиту
for char in sorted(frequency):
    print(f'{char} : {frequency[char]}')

# Максимальная частота
max_freq = max(frequency.values())
print(f'\nМаксимальная частота: {max_freq}')

****************************************
# Задача 1. Заказ фруктов
# В торговую компанию пришёл заказ:

order = {
    'apple': 2,

    'banana': 3,

    'pear': 1,

    'watermelon': 10,

    'chocolate': 5}

# Ключи — названия товаров, значения — необходимое количество килограммов.

# При помощи метода get и установки значения по умолчанию проверьте, есть ли товар на складе, и получите его цену. Если товара нет, 
# то по умолчанию получите 0. Подсчитайте итоговую выручку компании по имеющимся товарам.

incomes = {

  'apple': 5600.20,

  'orange': 3500.45,

  'banana': 5000.00,

  'bergamot': 3700.56,

  'durian': 5987.23,
  
  'grapefruit': 300.40,
  
  'peach': 10000.50,

  'pear': 1020.00,

  'persimmon': 310.00,

}

total_income = 0

for item, quantity in order.items():
    price = incomes.get(item, 0)
    total_income += price * quantity
    if price == 0:
        print(f'Товара "{item}" нет на складе. Пропускаем.')

print(f'\nИтоговая выручка по имеющимся товарам: {total_income} рублей')

# Ключи — названия товаров, значения — цена за один килограмм.

# Напишите программу, которая суммирует стоимость (цена × количество) всех заказанных товаров, и выведите итоговую сумму в консоль.

# Если искомого товара нет на складе, то по умолчанию получите 0. В этом поможет метод get и установка значения по умолчанию.



# Задача 2. Игроки
# Есть готовый словарь игроков, у каждого игрока есть имя, команда, в которой он играет, а также его текущий статус, в котором указано, отдыхает он, 
# тренируется или путешествует:

players_dict = {

   1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},

   2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},

   3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},

   4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},

   5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},

   6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},

   7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},

   8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}

} 


team_a_members = [
    player['name']
    for player in players_dict.values()
    if player['team'] == "A" and player['status'] == 'Rest'
]
team_b_members = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'B' and player['status'] == 'Training'
]
team_c_members = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'C' and player['status'] == 'Travel'
]
print(team_a_members)
print()
print(team_b_members)
print()
print(team_c_members)
# Напишите программу, которая выводит на экран следующие данные в разных строках:

# Все члены команды А, которые отдыхают.
# Все члены команды B, которые тренируются.
# Все члены команды C, которые путешествуют.
****************************************
# Практика
import random
# Задача 1. Пунктуация
# Напишите программу, которая считает количество знаков пунктуации в символьной строке. К знакам пунктуации относятся символы из набора ".,;:!?". 
# Набор должен храниться в виде множества.

 

# Пример:

# Введите строку: Я! Есть. Грут?! Я, Грут и Есть.

symbols = {'!', '?', '.', ';', ':', ','}
user_input = input('Введите строку: ')

count = 0

for char in user_input:
    if char in symbols:
        count += 1
print(f'Количество знаков пунктуации: {count}')

# Количество знаков пунктуации: 4



# Задача 2. Семинар
# На одном семинаре по теории множеств нужно показать наглядный пример, как эти множества работают. Для начала было сгенерировано два набора чисел: 

import random

nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]

nums_1_set = set(nums_1)
nums_2_set = set(nums_2)

print(f'1-е множество: {nums_1_set}')
print(f'2-е множество: {nums_2_set}\n')

min_value_1 = min(nums_1_set)
nums_1_set.remove(min_value_1)
random_1 = random.randint(100, 200)
nums_1_set.add(random_1)
print(f'Минимальный элемент 1-го множества: {min_value_1}')
print(f'Случайное число для 1-го множества: {random_1}\n')

min_value_2 = min(nums_2_set)
nums_2_set.remove(min_value_2)
random_2 = random.randint(100, 200)
nums_2_set.add(random_2)
print(f'Минимальный элемент 2-го множества: {min_value_2}')
print(f'Случайное число для 2-го множества: {random_2}\n')

nums_union = nums_1_set.union(nums_2_set)
print(f'Объединение множеств: {nums_union}')

nums_intersect = nums_1_set.intersection(nums_2_set)
print(f'Пересечение множеств: {nums_intersect}')


nums_difference = nums_2_set.difference(nums_1_set)
print(f'Элементы, входящие в nums_2, но не входящие в nums_1: {nums_difference}')

# Вас попросили написать программу, которая будет наглядно демонстрировать работу со множествами с помощью этих чисел.

# Напишите программу, которая преобразует списки во множества и убирает повторяющиеся элементы. 
# Затем удаляет минимальный элемент из каждого множества и добавляет туда случайное число в диапазоне от 100 до 200.
#  Затем выполните следующие действия со множествами: 

# Вывести все элементы множеств (объединение). 
# Вывести только общие элементы (пересечение).
# Вывести элементы, входящие в nums_2, но не входящие в nums_1.
 

# Пример результата:

# 1-е множество: {1, 2, 3, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 24, 26, 27, 29}

# 2-е множество: {1, 5, 7, 8, 9, 11, 12, 13, 15, 16, 19, 21, 22, 23, 24, 29, 30}

 

# Минимальный элемент 1-го множества: 1

# Минимальный элемент 2-го множества: 1

 

# Случайное число для 1-го множества: 126

# Случайное число для 2-го множества: 169

 

# Объединение множеств: {2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 169, 126}

# Пересечение множеств: {7, 8, 11, 12, 13, 15, 16, 19, 21, 22, 24, 29}

# Элементы, входящие в nums_2, но не входящие в nums_1: {5, 9, 169, 23, 30}



# Задача 3. Различные цифры
# Напишите программу, которая находит все различные цифры в символьной строке. 
# Для решения используйте множество (цифры будут различные, и поиск во множестве намного быстрее, чем в списке).

# Подсказка: можно использовать вот такое сравнение '0'<=x<='9'

user_input_num = input('Введите строку: ')
sym_set = set()
for x in user_input_num:
    if '0' <= x <= '9':
     sym_set.add(x)


print(sym_set)
# Пример:

# Введите строку: ab1n32kz2

# Различные цифры строки: 123


****************************************
# Задача 3. Универсальная программа
# Один заказчик попросил нас написать небольшой скрипт для своих криптографических нужд. При этом он заранее предупредил, 
# что скрипт должен уметь работать с любым итерируемым типом данных.

# Напишите функцию, которая возвращает список из элементов итерируемого объекта (кортежа, строки, списка, словаря), у которых индекс чётный.

 

# Пример 1:

# Допустим, есть такая строка: 'О Дивный Новый мир!'

# Результат: ['О', 'Д', 'в', 'ы', ' ', 'о', 'ы', ' ', 'и', '!']

# Пример 2:

# Допустим, есть такой список: [100, 200, 300, 'буква', 0, 2, 'а']

# Результат: [100, 300, 0, 'а']

# Примечание: для проверки типа можно использовать функцию 

# isinstance(<элемент>, <тип данных>), которая возвращает True, 
# если элемент принадлежит к этому типу данных, и возвращает False в противном случае.


def find_stuff(elem):
    if isinstance(elem, dict):
        return [value for index, (key, value) in enumerate(elem.items()) if index % 2 == 0]
    else:
        return [item for index, item in enumerate(elem) if index % 2 == 0]

    
    
user_input = input('Введите что-то: ')

print(f'Результат:  {find_stuff(user_input)}')
****************************************
# 1. Списки (list)
# Что это: изменяемая последовательность элементов.

# Основные методы: append, remove, insert, pop, index, срезы ([:]), in.

# Упражнения:
# Создай список из 5 любых чисел. Добавь в конец ещё одно число.

# Удали второй элемент. Замени последний на строку 'конец'.

# Выведи все элементы, кроме первого и последнего.

import random

rand_list = [random.randint(0, 50) for _ in range(5)]
print(rand_list)

1.
rand_list.append(random.randint(0, 50))
print(rand_list)
2.
rand_list.pop(1)
rand_list[-1::] = ['конец']
print(rand_list)
3
rand_slices = rand_list[1:4]
print(rand_slices)
3.

#  2. Кортежи (tuple)
# Что это: неизменяемая версия списка.

# Особенности: чаще используется для хранения "связанных данных", например координат или (имя, возраст).

# Упражнения:
# Создай кортеж с тремя строками.

# Распакуй кортеж в три переменные.

# Преврати кортеж в список, добавь туда новый элемент, снова преврати в кортеж.


words = ['хуй', 'пизда', 'джигурда', 'сепулька', 'ад', 'нозиум', 'Исида', 'Писида']

random_words = random.sample(words, 3)  # Берём 3 разных случайных слова

words_tup = tuple(random_words)

print(words_tup)

a, b, c = words_tup
print(a, b, c)

my_lst = list(words_tup)

my_lst.append(random.choice(words))
print(my_lst)   

new_tup = tuple(my_lst)
print(new_tup)



# 🔹 3. Словари (dict)
# Что это: коллекция пар ключ: значение.

# Основные методы: .get(), .items(), .keys(), .values(), in, доступ по dict['ключ'].

# Упражнения:
# Создай словарь с именами и возрастами.

# Добавь ещё одну пару.

# Удали одного человека.

# Получи список всех имён (ключей).

# Получи средний возраст.
1.

dic_people = {
    'Игорь': '30',
    'Маша': '40',
    'Шпигорь': '99',
    'Хуяша': '666'
}
2.
dic_people.update({'Аркадий': '120',
                    'Мадий' : '300'})
print(dic_people)
3.
del dic_people['Хуяша']
print(dic_people)
4.
find_key = dic_people.keys()
print(find_key)
5.

sum_age = 0
for age in dic_people.values():
    sum_age += int(age)

lenght_dic = len(dic_people)
med_age = sum_age / lenght_dic

print(med_age)




# 🔹 4. Множества (set)
# Что это: неупорядоченная коллекция уникальных элементов.

# Основные операции: .add(), .remove(), in, set(), объединение (|), пересечение (&), разность (-).

# Упражнения:
# Преврати список с дубликатами в множество.

# Удали один элемент.

# Проверь, есть ли 'кот' во множестве.

# Объедини два множества.

import random
unique_part = [random.randint(1, 10) for _ in range(5)]
duplicates = [random.choice(unique_part) for _ in range(3)]
combined = unique_part + duplicates

random.shuffle(combined)
combuned = set(combined)
print(combuned)

# Упражнения:
# Преврати список с дубликатами в множество.

# Удали один элемент.

# Проверь, есть ли 'кот' во множестве.

# Объедини два множества.
1.
new_st = set(combuned)
print(new_st)
2.
random_element = random.choice(list(new_st))

# Удаляем этот элемент
new_st.remove(random_element)
print(new_st)
3. 
print('cat' in new_st)
4.
unique_part_2 = [random.randint(1, 10) for _ in range(5)]
duplicates_2 = [random.choice(unique_part_2) for _ in range(3)]
combined_2 = unique_part_2 + duplicates_2
random.shuffle(combined_2)
combuned_2 = set(combined_2)
print(combuned_2)

combuned_3 = combuned_2.union(combuned)
print(combuned_3)
****************************************
import random
# Задача 1. Создание кортежей
# Заполните один кортеж десятью случайными целыми числами от 0 до 5 включительно. Также заполните второй кортеж числами от −5 до 0.
#  Объедините два кортежа, создав тем самым третий кортеж. С помощью метода кортежа определите в нём количество нулей.
#  Выведите на экран третий кортеж и количество нулей в нём.

my_tuple = tuple(random.randint(0, 5) for _ in range(10))
my_second_tuple = tuple(random.randint(-5, 0) for _ in range(10))
my_third_tuple = my_tuple + my_second_tuple

zero_count = my_third_tuple.count(0)

print('Количество нулей: ', zero_count)
print('Третий кортеж: ', my_third_tuple)

# Задача 2. Цилиндр
# Андрей однажды уже писал функции для расчёта площади сферы и объёма шара. И теперь для своей курсовой работы ему пришлось связаться с цилиндрами.

# Пользователь вводит два значения: радиус и высоту. Напишите функцию для расчёта площади боковой поверхности цилиндра и его полной площади. 
# Функция должна возвращать два эти значения. После этого в основной программе выводятся оба ответа в две строки.

# Площадь боковой поверхности (r — радиус, h — высота):

# Полная площадь (S — площадь круга, которая вычисляется по формуле ‌‌
# ‌):

def style(r, h):
    S = 2 * 3.14 * r * h
    full_s = 2 * 3.14 * r * (r + h)
    return S, full_s

r = int(input('Введите радиус: '))
h = int(input('Введите высоту: '))

side, full = style(r, h)

print(f'Площадь боковой поверхности: {side}')
print(f'Полная площадь: {full}')


# Задача 3. Неправильный код
# Дан код, в котором должно происходить следующее: изначально есть кортеж из пяти чисел. Затем вызывается функция, которая получает на вход кортеж чисел,
#  генерирует случайный индекс и случайное значение, а затем по этим индексу и значению меняет сам кортеж. Функция должна возвращать кортеж и случайное значение.

# В основном коде функция используется два раза, и на экран два раза выводится новый кортеж и случайное значение.
#  Причём второй раз выводится сумма первого случайного значения и второго.

# Однако код, который вам дали, оказался нерабочим. Исправьте его в соответствии с описанием.

 



 

def change(nums):

   index = random.randint(0, 5)

   value = random.randint(100, 1000)

   nums[index] = value

   return nums, value

 

my_nums = 1, 2, 3, 4, 5

 

new_nums, rand_val = change(my_nums)

print(new_nums, rand_val)

new_nums = change(new_nums)

rand_val += change(new_nums)

print(new_nums, rand_val)


****************************************
import random

# Задача 1. Саботаж!
# Какой-то нехороший человек решил подпортить жизнь frontend-разработчикам и добавил в код сайта символ ~ (тильда). 
# Но программисты быстро решили эту проблему, пройдясь по всему коду маленькой программой.

# Пользователь вводит строку. Напишите программу, которая проходит по строке и выводит в консоль индексы символа ~. 
# Для решения этой задачи (и остальных тоже)
#  используйте функцию enumerate.

user_input = input('Строка: ')

sym = '~'

for ind, char in enumerate(user_input):
   if sym == char:
      print(ind)

# Пример:

# Строка: so~mec~od~e

 

# Ответ: 2 6 9 



# Задача 2. Словари из списков
# Создайте два списка, в каждом из которых лежит 10 случайных букв алфавита (могут повторяться). 
# Затем для каждого списка создайте словарь из пар «индекс — значение» и выведите оба словаря на экран.

# Подсказка: random
letters = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'

first_spis = [random.choice(letters) for _ in range(10)]
second_spis = [random.choice(letters) for _ in range(10)]

first_dict = dict(enumerate(first_spis))
second_dict = dict(enumerate(second_spis))

print('Первый словарь: ', first_dict)
print('Второй слорваь:', second_dict)
# Пример: 

# Первый список: ['й', 'р', 'с', 'г', 'а', 'а', 'т', 'ж', 'е', 'к']

# Второй список: ['д', 'а', 'а', 'в', 'т', 'ж', 'р', 'б', 'й', 'р']

 

# Первый словарь: {0: 'й', 1: 'р', 2: 'с', 3: 'г', 4: 'а', 5: 'а', 6: 'т', 7: 'ж', 8: 'е', 9: 'к'}

# Второй словарь: {0: 'д', 1: 'а', 2: 'а', 3: 'в', 4: 'т', 5: 'ж', 6: 'р', 7: 'б', 8: 'й', 9: 'р'}



# Задача 3. Универсальная программа
# Один заказчик попросил нас написать небольшой скрипт для своих криптографических нужд. При этом он заранее предупредил, 
# что скрипт должен уметь работать с любым итерируемым типом данных.

# Напишите функцию, которая возвращает список из элементов итерируемого объекта (кортежа, строки, списка, словаря), у которых индекс чётный.

 

# Пример 1:

# Допустим, есть такая строка: 'О Дивный Новый мир!'

 

# Результат: ['О', 'Д', 'в', 'ы', ' ', 'о', 'ы', ' ', 'и', '!']

 

# Пример 2:

# Допустим, есть такой список: [100, 200, 300, 'буква', 0, 2, 'а']

 

# Результат: [100, 300, 0, 'а']

 

# Примечание: для проверки типа можно использовать функцию 

# isinstance(<элемент>, <тип данных>), которая возвращает True, 
# если элемент принадлежит к этому типу данных, и возвращает False в противном случае.


****************************************
# Задача 1. Кризис миновал
# Закупки грейпфрутов прекратились, и кризис в торговой компании закончился. И теперь можно вернуться к обыденным делам. Однако внезапно вы обнаружили, 
# что старый скрипт, который выводит данные о фруктах, куда-то потерялся. Необходимо его восстановить.

# Дан словарь с парами «название фрукта — цена»:

incomes = {

     'apple': 5600.20,

     'orange': 3500.45,

     'banana': 5000.00,

     'bergamot': 3700.56,

     'durian': 5987.23,

     'peach': 10000.50,

     'pear': 1020.00,

     'persimmon': 310.00,

}

for a, b in incomes.items():
    print(a, ' - - ', b)

# Вывести на экран словарь в следующем виде:

# apple -- 5600.2

# orange -- 3500.45

# banana -- 5000.0

# bergamot -- 3700.56

# durian -- 5987.23

# peach -- 10000.5

# pear -- 1020.0

# persimmon -- 310.0

 

# Не используйте обращение по ключу словаря.



# Задача 2. Сервер
# У вас есть данные о сервере, которые хранятся в виде вот такого словаря:

server_data = {

     "server": {

         "host": "127.0.0.1",

         "port": "10"

     },

     "configuration": {

         "access": "true",

         "login": "Ivan",

         "password": "qwerty"

     }

 }

for section, selection_data in server_data.items():
    print(f'{section}:')
    for key, value in selection_data.items():
        print(f'    {key}: {value}')


# Напишите программу, которая выводит для пользователя эти данные так же красиво и понятно, как они представлены в словаре.

# Результат работы программы:

# server:

#     host: 127.0.0.1

#     port: 10

# configuration:

#     access: true

#     login: Ivan

#     password: qwerty



# Задача 3. В одну строчку
# Нашему другу дали задачу: «Есть словарь, в котором ключи — это числа от 0 до 4, а значения ключей — числа 0, 100, 144, 20 и 19 соответственно. 
# Нужно написать программу, которая выводит список тех значений, у которых ключ делится на 2. Причём программа должна быть в одну строчку.» 
# Программа у друга работает, но её не приняли, так как в ней не используется правило «не повторяйся» — это когда части кода не повторяются. 
# Помогите другу исправить решение задачи так, чтобы код в строчке не повторялся. 

 

# Решение друга:

# print([{0: 0, 1: 100, 2: 144, 3: 20, 4: 19}[i_key] for i_key in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19} if i_key % 2 == 0])

print([i_value for i_key, i_value in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19}.items() if i_key % 2 == 0])
****************************************
# Задача 1. Паспортные данные
# В базе данных поликлиники хранятся паспортные данные людей. Хранение реализовано с помощью словаря, 
# состоящего из пар «Серия и номер паспорта — фамилия и имя». Серия и номер — составной ключ, а фамилия и имя — составное значение.

data = {

     (5000, 123456): ('Иванов', 'Василий'),

     (6000, 111111): ('Иванов', 'Петр'),

     (7000, 222222): ('Медведев', 'Алексей'),

     (8000, 333333): ('Алексеев', 'Георгий'),

     (9000, 444444): ('Георгиева', 'Мария')

}
user_find = input('ВВедите номер и серию через пробел: ').split(' ')
user_series = int(user_find[0])
user_num = int(user_find[1])
    
for (series, number), (surname, name) in data.items():
    
    if user_series == series and user_num == number:
        print(name, surname)

# Реализуйте функцию, которая по номеру и серии паспорта выдаёт имя и фамилию человека.

# Задача 2. Контакты 2
# Мы уже реализовывали телефонную книгу для Степана, однако её проблема была в том, что туда нельзя было добавить людей с одинаковыми именами. 
# Надо это исправить.

# Напишите программу, которая запрашивает у пользователя имя контакта, фамилию и номер телефона, 
# добавляет их в словарь и выводит на экран текущий словарь контактов. 
# Словарь состоит из пар «Ф. И. — телефон», где Ф. И. — это составной ключ. 
# Запрос на добавление идёт бесконечно (но можно задать своё условие для завершения программы). 
# Обеспечьте контроль ввода: если этот человек уже есть в словаре, то выведите соответствующее сообщение.



# contacts = {}

# while True:
#     if not contacts:
#         print("<Пусто>")
#     else:
#         for name, phone in contacts.items():
#             print(name, phone)

#     name, phone = input("Введите имя и номер через пробел: ").split()

#     if name.lower() == "выход":
#         break

#     if name in contacts:
#         print("Ошибка: такое имя уже существует.")
#     else:
#         contacts[name] = phone
    
contacts = {}
while True:
     
   data = input("Введите имя, фамилию и телефон через пробел: ").split()
   
   if data[0].lower() == "выход":
    break
   

   if len(data) != 3:
    print("Нужно ввести 3 значения через пробел.")
    continue

   name, surname, phone = data

   key = (name, surname)

   if key not in contacts:
    contacts[key] = phone
    
    print("\n📒 Текущий список контактов:")
    for (n, s), p in contacts.items():
        print(f"{n} {s} - {p}")
   else:
    print("Уже есть")
****************************************
import os
# Задача 1. Сисадмин
# Вы работаете системным администратором в одной компании. На диске каждого сотрудника компании в специальной папке access лежит файл admin.bat. 
# Этот файл предназначен для вас, и вам нужен путь до этого файла, причём как относительный, так и абсолютный. 
# Недолго думая, вы решили написать небольшой скрипт, который закинете по сети к этому файлу.

# Напишите программу, которая выводит на экран относительный и абсолютный пути до файла admin.bat. 

# Пример результата:

# Абсолютный путь до файла: C:\Users\Roman\PycharmProjects\Skillbox\access\admin.bat

# Относительный путь до файла: Skillbox\access\admin.bat

abs_path = os.path.abspath("admin.bat")
print(abs_path)

file = open(os.path.relpath("works/02_second_module/008_Eight_block/admin.bat"))



# Задача 2. Содержимое
# Выберите любую директорию на своём диске и затем напишите программу, выводящую на экран абсолютные пути к файлам и папкам, 
# которые находятся внутри этой директории. 

# Результат программы на примере директории проекта python_basic:

# Содержимое каталога G:\PycharmProjects\python_basic

#     G:\PycharmProjects\python_basic\.git

#     G:\PycharmProjects\python_basic\.idea

#     G:\PycharmProjects\python_basic\Module14

#     G:\PycharmProjects\python_basic\Module15

#     G:\PycharmProjects\python_basic\Module16

#     G:\PycharmProjects\python_basic\Module17

#     G:\PycharmProjects\python_basic\Module18

#     G:\PycharmProjects\python_basic\Module19

#     G:\PycharmProjects\python_basic\Module20

#     G:\PycharmProjects\python_basic\Module21

#     G:\PycharmProjects\python_basic\Module22

for i_item in os.listdir(r'D:\Learning\Python\python_tasks\works'):
    print(i_item)

 
# Задача 3. Корень диска
# Напишите программу, которая выводит на экран только корень диска, на котором запущен скрипт. Учтите, 
# что скрипт может быть запущен где угодно и при любой вложенности папок.

# Результат программы на примере диска G:

# Корень диска: G:\\
    
script_path = os.path.abspath(__file__)   
tree_path = os.path.splitdrive(script_path)[0]
print(tree_path)
****************************************
# Задача 2. Всё в одном
# Ваш друг, который тоже проходит курс Python Basic, поехал с ноутбуком в другой город, и там у него случилась беда: его диск пришлось отформатировать, 
# а доступ в интернет отсутствует. Остался только телефон с мобильным интернетом.
# Так как со связью (и с памятью) проблемы, друг попросил вас скинуть одним файлом все решения и скрипты, которые у вас сейчас есть.

# Напишите программу, которая копирует код каждого скрипта в папке проекта python_basic в файл scripts.txt, разделяя код строкой из 40 символов *. 

 

# Пример содержимого файла scripts.txt:

# import platform

# import sys

 

# info = 'OS info is \n{}\n\nPython version is {} {}'.format(

#     platform.uname(),

#     sys.version,

#     platform.architecture(),

# )

# print(info)

 

# with open('os_info.txt', 'w', encoding='utf8') as file:

#     file.write(info)

# ****************************************

# print("Введите первую точку")

# x1 = float(input('X: '))

# y1 = float(input('Y: '))

# print("\nВведите вторую точку")

# x2 = float(input('X: '))

# y2 = float(input('Y: '))

 

# print("Уравнение прямой, проходящей через эти точки:")

# x_diff = x1 - x2

# y_diff = y1 - y2

# if x_diff == 0:

#     print("x = ", x1)

# elif y_diff == 0:

#     print("y = ", y1)

# else:

#     k = y_diff / x_diff

#     b = y2 - k * x2

#     print("y = ", k, " * x + ", b) 


import os
all_scripts = []

fls = 'D:\Learning\Python\python_tasks\works'
for root, dirs, files in os.walk(fls):
    for file in files:
        if file.endswith('.py'):
            full_path = os.path.join(root, file)
            
            with open (full_path, encoding= 'utf-8') as f:
                code = f.read()
                all_scripts.append(code)
                all_scripts.append('*' * 40)
                
with open('scripts.txt', 'w', encoding='utf-8') as result:
    result.write('\n'.join(all_scripts)) 
            
****************************************
# Задача 1. Иконки
# Андрей для себя хочет сделать экспериментальный сайт, где будет красиво отображаться вся структура его диска: папки одними иконками,
# файлы — другими. Поэтому ему нужен код, который поможет определить, какой тип иконки вставить.

# Напишите программу, которая по заданному абсолютному пути определяет, на что указывает этот путь 
# (на директорию, файл, или же путь является ссылкой), и выведите соответствующее сообщение. Если путь указывает на файл, 
# то также выведите его размер (сколько он весит в байтах). Обеспечьте контроль ввода: проверка пути на существование. 

 

# Подсказка: для вывода размера файла поищите соответствующий метод.

import os

full_p = ('E:\project\projects\Whispers\Whispers\log.txt')

if os.path.exists(full_p):
    print(True)
    
if os.path.isfile(full_p):
    print('Это файл')


if os.path.isdir(full_p):
    print('Это дериктория')

if os.path.islink(full_p):
    print('Это ссылка')


print(os.path.getsize(full_p), 'байт')

print('Размер файла:', os.path.getsize(full_p), 'байт')
    
    
    
    
# Пример 1:

# Путь: C:\Users\Roman\PycharmProjects\Skillbox\Module17\lesson2.py

# Это файл

# Размер файла: 605 байт

 

# Пример 2:

# Путь: C:\Users\Roman\PycharmProjects\Skillbox\Module17\lesson2.py

# Указанного пути не существует



# Задача 2. Поиск файла
# В уроке мы написали функцию, которая ищет нужный нам файл во всех подкаталогах указанной директории. 
# Однако, как мы понимаем, файлов с таким названием может быть несколько.

# Напишите функцию, которая принимает на вход абсолютный путь до директории и имя файла, 
# проходит по всем вложенным файлам и папкам и выводит на экран все абсолютные пути с этим именем.

 

# Пример:

# Ищем в: C:/Users/Roman/PycharmProjects/Skillbox

# Имя файла: lesson2


# Найдены следующие пути:

# C:/Users/Roman/PycharmProjects/Skillbox\Module15\lesson2.py

# C:/Users/Roman/PycharmProjects/Skillbox\Module16\lesson2.py

# C:/Users/Roman/PycharmProjects/Skillbox\Module17\lesson2.py

# C:/Users/Roman/PycharmProjects/Skillbox\Module18\lesson2.py

# C:/Users/Roman/PycharmProjects/Skillbox\Module19\lesson2.py

# C:/Users/Roman/PycharmProjects/Skillbox\Module20\lesson2.py

# C:/Users/Roman/PycharmProjects/Skillbox\Module21\lesson2.py

# C:/Users/Roman/PycharmProjects/Skillbox\Module22\lesson2.py


import os


fil_pat = r'D:\Learning\Python\python_tasks\works\02_second_module'
fil_name = '1.py'

def find_stuff(dirc):
    rt_stuff = []
    for root, dirs, files in os.walk(dirc):
        if fil_name in files:
           found_path = os.path.join(root, fil_name)
           rt_stuff.append([found_path])

    return rt_stuff

      
for path in find_stuff(fil_pat):
    print(path)

****************************************
# дача 1. Результаты
# Одному программисту дали задачу для обработки неких результатов тестирования двух групп людей. Файл первой группы (group_1.txt) находится в папке task, 
# файл второй группы (group_2.txt) — в папке Additional_info.


 

# Содержимое файла group_1.txt

# Бобровский Игорь 10

# Дронов Александр 20

# Жуков Виктор 30

 

# Содержимое файла group_2.txt

# Павленко Геннадий 20

# Щербаков Владимир 35

# Marley Bob 15

 

# На экран нужно было вывести сумму очков первой группы, затем разность очков опять же первой группы и напоследок — произведение очков уже второй группы. 

# Программист оказался не очень опытным, писал код наобум и даже не стал его проверять. И оказалось, этот код просто не работает. Вот что он написал:

 

# file = open('E:\task\group_1.txt', 'read')

# summa = 0

# for i_line in file:

#     info = i_line.split()

#     summa += info[2]

# file = open('E:\task\group_1.txt', 'read')

# diff = 0

# for i_line in file:

#     info = i_line.split()

#     diff -= info[2]

# file_2 = open('E:\task\group_2.txt', 'read')

# compose = 0

# for i_line in file:

#     info = i_line.split()

#     compose *= info[2]

# print(summa)

# print(diff)

# print(compose)

import os

total = 0
razn = 0
sum_of_fls = 1
group_1 = []

with open(r'D:\task\group_1.txt', 'r', encoding='utf-8') as file:
    
    for i_line in file:
        num = i_line.strip().split()
        if len(num) >= 3 and num[-1].isdigit():
         total += int(num[2])
         group_1.append(int(num[2]))
print(total)    

if len(group_1) >= 3:
    razn = group_1[0] - group_1[1] - group_1[2]
print("Разность:", razn)


    
with open(r'D:\task\additional_info\group_2.txt', 'r', encoding='utf-8') as file_2:
    
    for i_comp in file_2:
        num_3 = i_comp.strip().split()
        if len(num_3) >= 3 and num_3[-1].isdigit():
            sum_of_fls *= int(num_3[2])
            
print(sum_of_fls)

# Исправьте код для решения поставленной задачи. Для проверки результата создайте необходимые папки 
# (task, Additional_info, Dont touch me) на своём диске в соответствии с картинкой и также добавьте файлы group_1.txt и group_2.txt.



# Задача 2. Поиск файла 2
# Как мы помним, скрипты — это просто куча строк текста, хоть они и понятны только программисту. Таким образом, с ними можно работать точно так же,
# как и с обычными текстовыми файлами.

# Используя функцию поиска файла из предыдущего урока, реализуйте программу,
#   которая находит внутри указанного пути все файлы с искомым названием и выводит на экран текст одного из них (выбор можно сгенерировать случайно).

# Подсказка: можно использовать, например, список для сохранения найденного пути.

import random

find_lst = []

usr_path = input('Введите путь: ')
usr_fil = input('Введите название файла: ')



    
    
for root, dict, files in os.walk(usr_path):
    for file in files:
        if file == usr_fil:
            full_path = os.path.join(root, file)
            find_lst.append(full_path)
            


    
if find_lst:
    selected = random.choice(find_lst)
    
    with open(selected, 'r', encoding='utf-8') as fil:
     print(fil.read())
****************************************
# Задача 1. Сумма чисел
# Во входном файле numbers.txt записано N целых чисел, каждое в отдельной строке. Напишите программу, которая выводит их сумму в выходной файл answer.txt.

 

# Пример:

# Содержимое файла numbers.txt:

# 1

# 2

# 3

# 4

# 10

 

# Содержимое файла answer.txt

# 20



# Задача 2. Всё в одном
# Ваш друг, который тоже проходит курс Python Basic, поехал с ноутбуком в другой город, и там у него случилась беда: его диск пришлось отформатировать, 
# а доступ в интернет отсутствует. Остался только телефон с мобильным интернетом.
# Так как со связью (и с памятью) проблемы, друг попросил вас скинуть одним файлом все решения и скрипты, которые у вас сейчас есть.

# Напишите программу, которая копирует код каждого скрипта в папке проекта python_basic в файл scripts.txt, разделяя код строкой из 40 символов *. 

 

# Пример содержимого файла scripts.txt:

# import platform

# import sys

 

# info = 'OS info is \n{}\n\nPython version is {} {}'.format(

#     platform.uname(),

#     sys.version,

#     platform.architecture(),

# )

# print(info)

 

# with open('os_info.txt', 'w', encoding='utf8') as file:

#     file.write(info)

# ****************************************

# print("Введите первую точку")

# x1 = float(input('X: '))

# y1 = float(input('Y: '))

# print("\nВведите вторую точку")

# x2 = float(input('X: '))

# y2 = float(input('Y: '))

 

# print("Уравнение прямой, проходящей через эти точки:")

# x_diff = x1 - x2

# y_diff = y1 - y2

# if x_diff == 0:

#     print("x = ", x1)

# elif y_diff == 0:

#     print("y = ", y1)

# else:

#     k = y_diff / x_diff

#     b = y2 - k * x2

#     print("y = ", k, " * x + ", b)
****************************************
# Задание 12. Счёт и округление
# Пользователь вводит 2 числа (float), программа считает:

# сумму

# разность

# деление (2 знака после запятой)

# округляет всё до ближайшего целого
****************************************
# Задание 13. Функция-чистильщик
# Функция sanitize(text), которая:
# убирает пробелы по краям
# переводит в нижний регистр
# заменяет "!" на "?"

def sanitize(text):
   if symbol == '!':
       text.replace 
# Задание 14. Повторяшка
# Функция, которая принимает строку и число, и возвращает эту строку, повторённую указанное число раз.



def repeat(text, digit):
   return text * digit

text = input('Введите строку: ')
digit = int(input('Введите число: '))

repeat(text, digit)

****************************************
#Задача 1: Подсчёт чётных
# У тебя есть список чисел. Посчитай, сколько в нём чётных чисел.

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
count = 0
#  Напиши код, который выведет: Чётных чисел: 5

for i in numbers:
    if i % 2 == 0:
        count += 1
print(f'Чётный числел: {count}')


# Задача 2: Список наоборот
# Пользователь вводит список слов через пробел. Выведи список в обратном порядке.

# # Ввод: "яблоко груша банан"
# # Вывод: ['банан', 'груша', 'яблоко']
# Подсказка: .split() и срез [::-1]

sentence = input('Введите слова через пробел: ')
words = sentence.split() 

words = words[::-1]
print(words)


# Задача 3: Удалить всё, что меньше 10
# Дан список чисел. Удали из него все числа, которые меньше 10.

numbers = [4, 11, 2, 99, 10, 7, 45, 3]

numbers = [num for num in numbers if num >= 10]

print(numbers)

# Задача 4: Проверь палиндром
# Пользователь вводит слово. Нужно проверить, является ли оно палиндромом — читается одинаково слева и справа.

user_word = input('Введите слово: ')

wording = list(user_word)

if wording == wording[::-1]:
    print('Это палиндром!')
else:
    print('Это не палиндром!')
****************************************
# 🧨 Задание 1:
# Выведи на экран фразу:
# Привет, Python! Я не боюсь тебя.

print('Привет, Python! Я не боюсь тебя.')

# 🧨 Задание 2:
# Создай две переменные a и b, присвой им значения 5 и 10. Выведи на экран их сумму.

a = 5
b = 10

print(f'Сумма: {a + b}')

# 🧨 Задание 3:
# Пусть у тебя есть переменная name, в которую пользователь вводит своё имя. Выведи фразу:

# Привет, <имя пользователя>!
# (используй input())

user_name = input('Введите имя пользователя: ')

print(f'Привет, {user_name}')

# 🧨 Задание 4:
# Создай переменную age, в которую вводится возраст. Увеличь возраст на 10 и выведи результат.
# Пусть человек почувствует себя старым уже сейчас!

age = int(input('Введите возрст: '))

new_age = age + 10

print(new_age)
****************************************
# 🧨 Задание 1: Арифметика
# Создай две переменные x = 7 и y = 3, а затем выведи:

# их сумму

# разность

# произведение

# результат деления

# остаток от деления

# результат целочисленного деления

# возведение в степень

x = 7
y = 3

summ = x + y
difference = x - y  
multiply = x * y
divide = x / y
remainder = x % y  
floor_divide = x // y  
power = x ** y  

# 🧨 Задание 2: Логические операторы
# Создай две переменные a = True, b = False. Выведи:

# a and b

# a or b

# not a

a = True
b = False

print(f'{a} and {b} = {a and b}')
print(f'{a} or {b} = {a or b}')
print(f'not {a} = {not a}')

# 🧨 Задание 3: Сравнение
# Пусть пользователь вводит два числа. Сравни их:

# больше ли первое второго

# равно ли

# меньше ли

# не равно ли

# Выводи результаты в виде:

# Первое число больше второго: True/False

first_digit = int(input('Введите первое число: '))
second_digit = int(input('Введите второе число: '))

print("Первое число больше второго:", first_digit > second_digit)
print("Первое число равно второму:", first_digit == second_digit)
print("Первое число меньше второго:", first_digit < second_digit)
print("Числа не равны:", first_digit != second_digit)

# 🧨 Задание 4: Сложные выражения
# Создай переменную num = 10. Выведи результат следующих выражений:

# (num + 5) * 2

# num ** 2 - 10

# num % 3 + num // 2

num = 10

print((num + 5) * 2)
print(num ** 2 - 10)
print(num % 3 + num // 2)
****************************************
# Задание 1: Условие и логика
# Создай переменные a = 5, b = 10. Проверь, является ли a больше b. Выведи результат.

# Создай переменные x = 7, y = 3. Если результат деления x на y больше 2, выведи "Деление больше двух". 
# Иначе выведи "Деление меньше или равно двум".

# Напиши программу, которая запрашивает у пользователя его возраст и проверяет, если он больше или равен 18, вывести "Добро пожаловать!", 
# если меньше — "Доступ запрещён".

a = 5
b = 10

x = 7
y = 3

user_age = int(input('Введите возраст: '))

if a > b:
    print(f'{a} больше чем {b}')
elif a < b:
    print(f'{a} меньше чем {b}')
else:
    print(f'{a} равно {b}')


if x / y > 2:
 print('Деление больше двух')
else:
 print('Деление меньше или равно двум')

if user_age >= 18:
   print('Добро пожаловать!')
else:
   print('Проход воспрещен!')

# Задание 2: Циклы
# Создай цикл, который будет выводить числа от 1 до 5.
for digit in range(6):
    print(digit)

# Напиши программу, которая запрашивает у пользователя число и выводит его таблицу умножения от 1 до 10.
user_num = int(input('Введите число: '))
for i in range(11):
    print(user_num * i)
# Создай цикл, который выводит все чётные числа от 2 до 20.

for even in range (21):
    if even % 2 == 0:
        print(even)

# Задание 3: Функции
def summ(x, y):
   sum = x + y
   return sum

x = int(input('Введите первое число: '))
y = int(input('Введите второе число: '))
result = summ(x, y)
print('Сумма:', result)

# Напиши функцию, которая принимает число и проверяет, является ли оно чётным или нечётным.
def decide(num):
   if num % 2 == 0:
      print(f'Число {num} чётное')
   else:
      print(f'Число {num} нечётное')

num = int(input('Введите число: '))

decide(num)
# Напиши функцию, которая возвращает строку "Привет, мир!" (используя return).
def hello():
    return 'Привет, мир!'

print(hello())
****************************************
# Задание 1. Калькулятор оценок
# Пользователь вводит балл (от 0 до 100).
# Выведи:

# "5" если от 85

# "4" если от 70

# "3" если от 50

# "2" если ниже

user_score = int(input('Введите оценку: '))
if user_score >= 85:
    print('5')
elif user_score >= 70:
    print('4')
elif user_score >= 50:
    print('3')
else:
    print('2')

# Задание 2. Кто ты по возрасту?
# Пользователь вводит возраст.
# Выводи:

# До 12 — "Ребёнок"

# 13–17 — "Подросток"

# 18–65 — "Взрослый"

# Больше 65 — "Мудрец... или мумия"

user_age = int(input('Введите возраст: '))

if user_age <= 12:
    print('Ребёнок')
elif user_age >= 13 and user_age <= 17:
    print('Подросток')
elif user_age >= 18 and user_age <= 65:
    print('Взрослый')
else:
    print('Мудрец... или мумия')
****************************************
# Задание 3. Бесконечный привет
# Пользователь вводит слово. Пока это не стоп, печатай "Привет, смертный!"
while True:
    user_word = input('Введите слово: ')
    if user_word == 'стоп' or user_word == 'Стоп':
        break
    else:
        print('Привет, смертный!')

# Задание 4. Сумма чисел
# Пользователь вводит числа. Если ввёл 0 — заканчиваем и выводим сумму всех введённых чисел.
****************************************
# Задание 5. Обратный отсчёт
# Выведи числа от 10 до 1.
for i in range(10, 0, -1):
 print(i)

# Задание 6. Квадраты
# Выведи квадраты чисел от 1 до 10.

for i in range (11):
 square = i ** 2
 print(f'Квадрат числа {i} - {square}')
****************************************
# Задание 7. Таблица умножения 1–5
# Сделай вложенный цикл и выведи таблицу умножения для чисел 1 до 5 (по 10 строк каждая).
for i in range(1, 6):
    for j in range(1, 6):
        print(f'{i} x {j:2} = {i*j:2}', end='\t')
    print()
****************************************
# Задание 8. Счёт гласных
# Пользователь вводит строку. Подсчитай количество гласных.
user_str = input('Введите строку:').lower()  # приводим к нижнему регистру, чтобы 'А' не сбежала
vowels = ["а", "е", "ё", "и", "о", "у", "ы", "э", "ю", "я"]
count = 0
for i in user_str:
    if i in vowels:
        count += 1
print(f'Количество гласных равно {count}')

# Задание 9. Развёрнутая строка
# Выведи строку в обратном порядке, по одной букве на строку.

for j in user_str:
    print(j)
    print()
****************************************
# Задание 10. Прямоугольник
# Выведи прямоугольник из #, 5 строк по 10 символов.

for i in range(5):              # 5 строк
    for j in range(10):         # 10 символов в каждой строке
        print('#', end='')      # Печатаем без перехода на новую строку
    print()                     # Переход на новую строку после каждой строки

# Задание 11. Таблица координат
# Выведи:

# (0,0) (0,1) (0,2)  
# (1,0) (1,1) (1,2)  
# ...

for i in range(0, 3, +1):
   for j in range(0, 3, +1):
      print(f'({i}, {j}) ', end='')
   print()
****************************************
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Напиши код, который выведет: Чётных чисел: 5


****************************************